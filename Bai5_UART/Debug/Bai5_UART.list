
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003060  080074b0  080074b0  000084b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a510  0800a510  0000c018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a510  0800a510  0000b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a518  0800a518  0000c018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a518  0800a518  0000b518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a51c  0800a51c  0000b51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800a520  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c018  2**0
                  CONTENTS
 10 .bss          00000218  20000018  20000018  0000c018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000c018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001789c  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c4d  00000000  00000000  000238e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  00027538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108d  00000000  00000000  00028a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002410c  00000000  00000000  00029afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d025  00000000  00000000  0004dc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2946  00000000  00000000  0006ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005794  00000000  00000000  0013d5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00142d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007498 	.word	0x08007498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08007498 	.word	0x08007498

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fe63 	bl	800319c <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:

void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 fe56 	bl	800319c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 fe51 	bl	800319c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f004 fdb0 	bl	8005066 <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	20000054 	.word	0x20000054
 80005b0:	20000144 	.word	0x20000144
 80005b4:	20000034 	.word	0x20000034

080005b8 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005bc:	201e      	movs	r0, #30
 80005be:	f002 f9c9 	bl	8002954 <DEC2BCD>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <ds3231_init+0x80>)
 80005c8:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005ca:	2016      	movs	r0, #22
 80005cc:	f002 f9c2 	bl	8002954 <DEC2BCD>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <ds3231_init+0x80>)
 80005d6:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d8:	2015      	movs	r0, #21
 80005da:	f002 f9bb 	bl	8002954 <DEC2BCD>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <ds3231_init+0x80>)
 80005e4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005e6:	2006      	movs	r0, #6
 80005e8:	f002 f9b4 	bl	8002954 <DEC2BCD>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <ds3231_init+0x80>)
 80005f2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005f4:	200f      	movs	r0, #15
 80005f6:	f002 f9ad 	bl	8002954 <DEC2BCD>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <ds3231_init+0x80>)
 8000600:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000602:	2009      	movs	r0, #9
 8000604:	f002 f9a6 	bl	8002954 <DEC2BCD>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <ds3231_init+0x80>)
 800060e:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000610:	2017      	movs	r0, #23
 8000612:	f002 f99f 	bl	8002954 <DEC2BCD>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <ds3231_init+0x80>)
 800061c:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800061e:	2332      	movs	r3, #50	@ 0x32
 8000620:	2203      	movs	r2, #3
 8000622:	21d0      	movs	r1, #208	@ 0xd0
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <ds3231_init+0x84>)
 8000626:	f003 fa37 	bl	8003a98 <HAL_I2C_IsDeviceReady>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <ds3231_init+0x7c>
		while(1);
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <ds3231_init+0x78>
	};
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000058 	.word	0x20000058
 800063c:	200000bc 	.word	0x200000bc

08000640 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af04      	add	r7, sp, #16
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f97e 	bl	8002954 <DEC2BCD>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29a      	uxth	r2, r3
 8000660:	230a      	movs	r3, #10
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	f107 030f 	add.w	r3, r7, #15
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	21d0      	movs	r1, #208	@ 0xd0
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <ds3231_Write+0x40>)
 8000674:	f002 fef0 	bl	8003458 <HAL_I2C_Mem_Write>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000bc 	.word	0x200000bc

08000684 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800068a:	230a      	movs	r3, #10
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2307      	movs	r3, #7
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <ds3231_ReadTime+0xa4>)
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	2200      	movs	r2, #0
 800069a:	21d0      	movs	r1, #208	@ 0xd0
 800069c:	4823      	ldr	r0, [pc, #140]	@ (800072c <ds3231_ReadTime+0xa8>)
 800069e:	f002 ffd5 	bl	800364c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f93a 	bl	8002920 <BCD2DEC>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <ds3231_ReadTime+0xac>)
 80006b2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f931 	bl	8002920 <BCD2DEC>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <ds3231_ReadTime+0xb0>)
 80006c4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f928 	bl	8002920 <BCD2DEC>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <ds3231_ReadTime+0xb4>)
 80006d6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006da:	78db      	ldrb	r3, [r3, #3]
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f91f 	bl	8002920 <BCD2DEC>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <ds3231_ReadTime+0xb8>)
 80006e8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f916 	bl	8002920 <BCD2DEC>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <ds3231_ReadTime+0xbc>)
 80006fa:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f90d 	bl	8002920 <BCD2DEC>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <ds3231_ReadTime+0xc0>)
 800070c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <ds3231_ReadTime+0xa4>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f904 	bl	8002920 <BCD2DEC>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <ds3231_ReadTime+0xc4>)
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000058 	.word	0x20000058
 800072c:	200000bc 	.word	0x200000bc
 8000730:	20000061 	.word	0x20000061
 8000734:	20000060 	.word	0x20000060
 8000738:	2000005f 	.word	0x2000005f
 800073c:	20000063 	.word	0x20000063
 8000740:	20000062 	.word	0x20000062
 8000744:	20000064 	.word	0x20000064
 8000748:	20000065 	.word	0x20000065

0800074c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000778:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_FSMC_Init+0xec>)
 800077a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800077e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000782:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <MX_FSMC_Init+0xf0>)
 8000784:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_FSMC_Init+0xec>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_FSMC_Init+0xec>)
 800079a:	2210      	movs	r2, #16
 800079c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007de:	230f      	movs	r3, #15
 80007e0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007e2:	230f      	movs	r3, #15
 80007e4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007e6:	233c      	movs	r3, #60	@ 0x3c
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80007ee:	2310      	movs	r3, #16
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80007f2:	2311      	movs	r3, #17
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007fa:	2308      	movs	r3, #8
 80007fc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000802:	2309      	movs	r3, #9
 8000804:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800080a:	2310      	movs	r3, #16
 800080c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800080e:	2311      	movs	r3, #17
 8000810:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000816:	463a      	mov	r2, r7
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000820:	f005 f804 	bl	800582c <HAL_SRAM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800082a:	f001 fdd9 	bl	80023e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	@ 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000068 	.word	0x20000068
 800083c:	a0000104 	.word	0xa0000104

08000840 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000854:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_FSMC_MspInit+0x88>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d131      	bne.n	80008c0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <HAL_FSMC_MspInit+0x88>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 8000868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6393      	str	r3, [r2, #56]	@ 0x38
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 8000874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800087e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000882:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000890:	230c      	movs	r3, #12
 8000892:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <HAL_FSMC_MspInit+0x90>)
 800089a:	f002 fae3 	bl	8002e64 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800089e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80008a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b0:	230c      	movs	r3, #12
 80008b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <HAL_FSMC_MspInit+0x94>)
 80008ba:	f002 fad3 	bl	8002e64 <HAL_GPIO_Init>
 80008be:	e000      	b.n	80008c2 <HAL_FSMC_MspInit+0x82>
    return;
 80008c0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000b8 	.word	0x200000b8
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008e0:	f7ff ffae 	bl	8000840 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	4b6f      	ldr	r3, [pc, #444]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a6e      	ldr	r2, [pc, #440]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b6c      	ldr	r3, [pc, #432]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	4b68      	ldr	r3, [pc, #416]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a67      	ldr	r2, [pc, #412]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b65      	ldr	r3, [pc, #404]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b61      	ldr	r3, [pc, #388]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a60      	ldr	r2, [pc, #384]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a59      	ldr	r2, [pc, #356]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b57      	ldr	r3, [pc, #348]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b53      	ldr	r3, [pc, #332]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a52      	ldr	r2, [pc, #328]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b50      	ldr	r3, [pc, #320]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a4b      	ldr	r2, [pc, #300]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b49      	ldr	r3, [pc, #292]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a44      	ldr	r2, [pc, #272]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2170      	movs	r1, #112	@ 0x70
 80009ca:	483f      	ldr	r0, [pc, #252]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 80009cc:	f002 fbe6 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	483d      	ldr	r0, [pc, #244]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 80009d8:	f002 fbe0 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	@ 0x40
 80009e0:	483b      	ldr	r0, [pc, #236]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 80009e2:	f002 fbdb 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ec:	4839      	ldr	r0, [pc, #228]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 80009ee:	f002 fbd5 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2108      	movs	r1, #8
 80009f6:	4838      	ldr	r0, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 80009f8:	f002 fbd0 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009fc:	2370      	movs	r3, #112	@ 0x70
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	482d      	ldr	r0, [pc, #180]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000a14:	f002 fa26 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4826      	ldr	r0, [pc, #152]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 8000a32:	f002 fa17 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a36:	23c0      	movs	r3, #192	@ 0xc0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4822      	ldr	r0, [pc, #136]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a4a:	f002 fa0b 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a4e:	2330      	movs	r3, #48	@ 0x30
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 8000a62:	f002 f9ff 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 8000a7e:	f002 f9f1 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a9c:	f002 f9e2 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000ab8:	f002 f9d4 	bl	8002e64 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	@ 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f002 fb59 	bl	80031d0 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f001 fc5c 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000bc 	.word	0x200000bc
 8000b30:	40005400 	.word	0x40005400
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_I2C_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b76:	23c0      	movs	r3, #192	@ 0xc0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b92:	f002 f967 	bl	8002e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <LCD_WR_REG+0x1c>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	8013      	strh	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	600ffffe 	.word	0x600ffffe

08000be8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <LCD_WR_DATA+0x1c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8053      	strh	r3, [r2, #2]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	600ffffe 	.word	0x600ffffe

08000c08 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <LCD_RD_DATA+0x20>)
 8000c10:	885b      	ldrh	r3, [r3, #2]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	b29b      	uxth	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	600ffffe 	.word	0x600ffffe

08000c2c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c4a:	202a      	movs	r0, #42	@ 0x2a
 8000c4c:	f7ff ffbc 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffc6 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffc0 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffba 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffb4 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c80:	202b      	movs	r0, #43	@ 0x2b
 8000c82:	f7ff ffa1 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffab 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffa5 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c9e:	883b      	ldrh	r3, [r7, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff9f 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000caa:	883b      	ldrh	r3, [r7, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff99 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cb6:	202c      	movs	r0, #44	@ 0x2c
 8000cb8:	f7ff ff86 	bl	8000bc8 <LCD_WR_REG>
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <lcd_Clear+0x70>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <lcd_Clear+0x70>)
 8000ce8:	885b      	ldrh	r3, [r3, #2]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff ff9b 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	81fb      	strh	r3, [r7, #14]
 8000cfa:	e011      	b.n	8000d20 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	e006      	b.n	8000d10 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff6f 	bl	8000be8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d0a:	89bb      	ldrh	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	81bb      	strh	r3, [r7, #12]
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <lcd_Clear+0x70>)
 8000d12:	885b      	ldrh	r3, [r3, #2]
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3f3      	bcc.n	8000d02 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	81fb      	strh	r3, [r7, #14]
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <lcd_Clear+0x70>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3e8      	bcc.n	8000cfc <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000110 	.word	0x20000110

08000d38 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80bb      	strh	r3, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	807b      	strh	r3, [r7, #2]
 8000d52:	4613      	mov	r3, r2
 8000d54:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	883b      	ldrh	r3, [r7, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	88b9      	ldrh	r1, [r7, #4]
 8000d64:	88f8      	ldrh	r0, [r7, #6]
 8000d66:	f7ff ff61 	bl	8000c2c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	81fb      	strh	r3, [r7, #14]
 8000d6e:	e010      	b.n	8000d92 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	81bb      	strh	r3, [r7, #12]
 8000d74:	e006      	b.n	8000d84 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d76:	8c3b      	ldrh	r3, [r7, #32]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff35 	bl	8000be8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d7e:	89bb      	ldrh	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	81bb      	strh	r3, [r7, #12]
 8000d84:	89ba      	ldrh	r2, [r7, #12]
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3f4      	bcc.n	8000d76 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	89fa      	ldrh	r2, [r7, #14]
 8000d94:	883b      	ldrh	r3, [r7, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3ea      	bcc.n	8000d70 <lcd_Fill+0x38>
		}
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}

08000da4 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
 8000dae:	460b      	mov	r3, r1
 8000db0:	80bb      	strh	r3, [r7, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	88b9      	ldrh	r1, [r7, #4]
 8000dbc:	88f8      	ldrh	r0, [r7, #6]
 8000dbe:	f7ff ff35 	bl	8000c2c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff0f 	bl	8000be8 <LCD_WR_DATA>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70fb      	strb	r3, [r7, #3]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	fb12 f303 	smulbb	r3, r2, r3
 8000e2a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	3b20      	subs	r3, #32
 8000e30:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29c      	uxth	r4, r3
 8000e40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	88b9      	ldrh	r1, [r7, #4]
 8000e52:	88f8      	ldrh	r0, [r7, #6]
 8000e54:	4622      	mov	r2, r4
 8000e56:	f7ff fee9 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	827b      	strh	r3, [r7, #18]
 8000e5e:	e07a      	b.n	8000f56 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e64:	2b0c      	cmp	r3, #12
 8000e66:	d028      	beq.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d108      	bne.n	8000e82 <lcd_ShowChar+0xae>
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	8a7b      	ldrh	r3, [r7, #18]
 8000e74:	493c      	ldr	r1, [pc, #240]	@ (8000f68 <lcd_ShowChar+0x194>)
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	440a      	add	r2, r1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	e01b      	b.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e86:	2b18      	cmp	r3, #24
 8000e88:	d10b      	bne.n	8000ea2 <lcd_ShowChar+0xce>
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	8a79      	ldrh	r1, [r7, #18]
 8000e8e:	4837      	ldr	r0, [pc, #220]	@ (8000f6c <lcd_ShowChar+0x198>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4403      	add	r3, r0
 8000e9a:	440b      	add	r3, r1
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e00b      	b.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ea6:	2b20      	cmp	r3, #32
 8000ea8:	d15a      	bne.n	8000f60 <lcd_ShowChar+0x18c>
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	8a7b      	ldrh	r3, [r7, #18]
 8000eae:	4930      	ldr	r1, [pc, #192]	@ (8000f70 <lcd_ShowChar+0x19c>)
 8000eb0:	0192      	lsls	r2, r2, #6
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75bb      	strb	r3, [r7, #22]
 8000ebe:	e044      	b.n	8000f4a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ec0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d120      	bne.n	8000f0a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ec8:	7dfa      	ldrb	r2, [r7, #23]
 8000eca:	7dbb      	ldrb	r3, [r7, #22]
 8000ecc:	fa42 f303 	asr.w	r3, r2, r3
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <lcd_ShowChar+0x10e>
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe84 	bl	8000be8 <LCD_WR_DATA>
 8000ee0:	e003      	b.n	8000eea <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000ee2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe7f 	bl	8000be8 <LCD_WR_DATA>
				m++;
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	3301      	adds	r3, #1
 8000eee:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ef0:	7d7b      	ldrb	r3, [r7, #21]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11f      	bne.n	8000f44 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	757b      	strb	r3, [r7, #21]
					break;
 8000f08:	e022      	b.n	8000f50 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	7dbb      	ldrb	r3, [r7, #22]
 8000f0e:	fa42 f303 	asr.w	r3, r2, r3
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <lcd_ShowChar+0x152>
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	88b9      	ldrh	r1, [r7, #4]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff3f 	bl	8000da4 <lcd_DrawPoint>
				x++;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f2c:	88fa      	ldrh	r2, [r7, #6]
 8000f2e:	8a3b      	ldrh	r3, [r7, #16]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d105      	bne.n	8000f44 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f38:	8a3b      	ldrh	r3, [r7, #16]
 8000f3a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	80bb      	strh	r3, [r7, #4]
					break;
 8000f42:	e005      	b.n	8000f50 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f44:	7dbb      	ldrb	r3, [r7, #22]
 8000f46:	3301      	adds	r3, #1
 8000f48:	75bb      	strb	r3, [r7, #22]
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d9b7      	bls.n	8000ec0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f50:	8a7b      	ldrh	r3, [r7, #18]
 8000f52:	3301      	adds	r3, #1
 8000f54:	827b      	strh	r3, [r7, #18]
 8000f56:	8a7a      	ldrh	r2, [r7, #18]
 8000f58:	89bb      	ldrh	r3, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d380      	bcc.n	8000e60 <lcd_ShowChar+0x8c>
 8000f5e:	e000      	b.n	8000f62 <lcd_ShowChar+0x18e>
		else return;
 8000f60:	bf00      	nop
				}
			}
		}
	}
}
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	08007578 	.word	0x08007578
 8000f6c:	08007b68 	.word	0x08007b68
 8000f70:	08008d38 	.word	0x08008d38

08000f74 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f88:	e004      	b.n	8000f94 <mypow+0x20>
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	71ba      	strb	r2, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f5      	bne.n	8000f8a <mypow+0x16>
	return result;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e059      	b.n	8001090 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000fdc:	887c      	ldrh	r4, [r7, #2]
 8000fde:	787a      	ldrb	r2, [r7, #1]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff ffc1 	bl	8000f74 <mypow>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <lcd_ShowIntNum+0xf8>)
 8000ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	1aca      	subs	r2, r1, r3
 800100a:	4613      	mov	r3, r2
 800100c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d121      	bne.n	8001058 <lcd_ShowIntNum+0xac>
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	3b01      	subs	r3, #1
 800101a:	429a      	cmp	r2, r3
 800101c:	da1c      	bge.n	8001058 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d117      	bne.n	8001054 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	b29a      	uxth	r2, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b29b      	uxth	r3, r3
 800102c:	fb12 f303 	smulbb	r3, r2, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4413      	add	r3, r2
 8001036:	b298      	uxth	r0, r3
 8001038:	8c3a      	ldrh	r2, [r7, #32]
 800103a:	88b9      	ldrh	r1, [r7, #4]
 800103c:	2300      	movs	r3, #0
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	2220      	movs	r2, #32
 800104e:	f7ff fec1 	bl	8000dd4 <lcd_ShowChar>
				continue;
 8001052:	e01a      	b.n	800108a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001054:	2301      	movs	r3, #1
 8001056:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	b29a      	uxth	r2, r3
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	b29b      	uxth	r3, r3
 8001060:	fb12 f303 	smulbb	r3, r2, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	3330      	adds	r3, #48	@ 0x30
 8001070:	b2da      	uxtb	r2, r3
 8001072:	8c3c      	ldrh	r4, [r7, #32]
 8001074:	88b9      	ldrh	r1, [r7, #4]
 8001076:	2300      	movs	r3, #0
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4623      	mov	r3, r4
 8001086:	f7ff fea5 	bl	8000dd4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3a1      	bcc.n	8000fdc <lcd_ShowIntNum+0x30>
	}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	cccccccd 	.word	0xcccccccd

080010a8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <lcd_SetDir+0x44>)
 80010c4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010c8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <lcd_SetDir+0x44>)
 80010cc:	22f0      	movs	r2, #240	@ 0xf0
 80010ce:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010d0:	e006      	b.n	80010e0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <lcd_SetDir+0x44>)
 80010d4:	22f0      	movs	r2, #240	@ 0xf0
 80010d6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <lcd_SetDir+0x44>)
 80010da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010de:	805a      	strh	r2, [r3, #2]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000110 	.word	0x20000110

080010f0 <lcd_init>:


void lcd_init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fa:	48aa      	ldr	r0, [pc, #680]	@ (80013a4 <lcd_init+0x2b4>)
 80010fc:	f002 f84e 	bl	800319c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001100:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001104:	f001 fce6 	bl	8002ad4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110e:	48a5      	ldr	r0, [pc, #660]	@ (80013a4 <lcd_init+0x2b4>)
 8001110:	f002 f844 	bl	800319c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001118:	f001 fcdc 	bl	8002ad4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ffc3 	bl	80010a8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001122:	20d3      	movs	r0, #211	@ 0xd3
 8001124:	f7ff fd50 	bl	8000bc8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001128:	f7ff fd6e 	bl	8000c08 <LCD_RD_DATA>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b9d      	ldr	r3, [pc, #628]	@ (80013a8 <lcd_init+0x2b8>)
 8001132:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001134:	f7ff fd68 	bl	8000c08 <LCD_RD_DATA>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b9a      	ldr	r3, [pc, #616]	@ (80013a8 <lcd_init+0x2b8>)
 800113e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001140:	f7ff fd62 	bl	8000c08 <LCD_RD_DATA>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b97      	ldr	r3, [pc, #604]	@ (80013a8 <lcd_init+0x2b8>)
 800114a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800114c:	4b96      	ldr	r3, [pc, #600]	@ (80013a8 <lcd_init+0x2b8>)
 800114e:	889b      	ldrh	r3, [r3, #4]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b94      	ldr	r3, [pc, #592]	@ (80013a8 <lcd_init+0x2b8>)
 8001156:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001158:	f7ff fd56 	bl	8000c08 <LCD_RD_DATA>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b91      	ldr	r3, [pc, #580]	@ (80013a8 <lcd_init+0x2b8>)
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b8f      	ldr	r3, [pc, #572]	@ (80013a8 <lcd_init+0x2b8>)
 800116a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800116c:	20cf      	movs	r0, #207	@ 0xcf
 800116e:	f7ff fd2b 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fd38 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001178:	20c1      	movs	r0, #193	@ 0xc1
 800117a:	f7ff fd35 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800117e:	2030      	movs	r0, #48	@ 0x30
 8001180:	f7ff fd32 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001184:	20ed      	movs	r0, #237	@ 0xed
 8001186:	f7ff fd1f 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800118a:	2064      	movs	r0, #100	@ 0x64
 800118c:	f7ff fd2c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001190:	2003      	movs	r0, #3
 8001192:	f7ff fd29 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001196:	2012      	movs	r0, #18
 8001198:	f7ff fd26 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800119c:	2081      	movs	r0, #129	@ 0x81
 800119e:	f7ff fd23 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011a2:	20e8      	movs	r0, #232	@ 0xe8
 80011a4:	f7ff fd10 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011a8:	2085      	movs	r0, #133	@ 0x85
 80011aa:	f7ff fd1d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fd1a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011b4:	207a      	movs	r0, #122	@ 0x7a
 80011b6:	f7ff fd17 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011ba:	20cb      	movs	r0, #203	@ 0xcb
 80011bc:	f7ff fd04 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011c0:	2039      	movs	r0, #57	@ 0x39
 80011c2:	f7ff fd11 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011c6:	202c      	movs	r0, #44	@ 0x2c
 80011c8:	f7ff fd0e 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fd0b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011d2:	2034      	movs	r0, #52	@ 0x34
 80011d4:	f7ff fd08 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fd05 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011de:	20f7      	movs	r0, #247	@ 0xf7
 80011e0:	f7ff fcf2 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011e4:	2020      	movs	r0, #32
 80011e6:	f7ff fcff 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011ea:	20ea      	movs	r0, #234	@ 0xea
 80011ec:	f7ff fcec 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fcf9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fcf6 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011fc:	20c0      	movs	r0, #192	@ 0xc0
 80011fe:	f7ff fce3 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001202:	201b      	movs	r0, #27
 8001204:	f7ff fcf0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001208:	20c1      	movs	r0, #193	@ 0xc1
 800120a:	f7ff fcdd 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fcea 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001214:	20c5      	movs	r0, #197	@ 0xc5
 8001216:	f7ff fcd7 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800121a:	2030      	movs	r0, #48	@ 0x30
 800121c:	f7ff fce4 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001220:	2030      	movs	r0, #48	@ 0x30
 8001222:	f7ff fce1 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001226:	20c7      	movs	r0, #199	@ 0xc7
 8001228:	f7ff fcce 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800122c:	20b7      	movs	r0, #183	@ 0xb7
 800122e:	f7ff fcdb 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001232:	2036      	movs	r0, #54	@ 0x36
 8001234:	f7ff fcc8 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001238:	2008      	movs	r0, #8
 800123a:	f7ff fcd5 	bl	8000be8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800123e:	203a      	movs	r0, #58	@ 0x3a
 8001240:	f7ff fcc2 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001244:	2055      	movs	r0, #85	@ 0x55
 8001246:	f7ff fccf 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800124a:	20b1      	movs	r0, #177	@ 0xb1
 800124c:	f7ff fcbc 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fcc9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001256:	201a      	movs	r0, #26
 8001258:	f7ff fcc6 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800125c:	20b6      	movs	r0, #182	@ 0xb6
 800125e:	f7ff fcb3 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001262:	200a      	movs	r0, #10
 8001264:	f7ff fcc0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001268:	20a2      	movs	r0, #162	@ 0xa2
 800126a:	f7ff fcbd 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800126e:	20f2      	movs	r0, #242	@ 0xf2
 8001270:	f7ff fcaa 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcb7 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800127a:	2026      	movs	r0, #38	@ 0x26
 800127c:	f7ff fca4 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fcb1 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001286:	20e0      	movs	r0, #224	@ 0xe0
 8001288:	f7ff fc9e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800128c:	200f      	movs	r0, #15
 800128e:	f7ff fcab 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001292:	202a      	movs	r0, #42	@ 0x2a
 8001294:	f7ff fca8 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001298:	2028      	movs	r0, #40	@ 0x28
 800129a:	f7ff fca5 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800129e:	2008      	movs	r0, #8
 80012a0:	f7ff fca2 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012a4:	200e      	movs	r0, #14
 80012a6:	f7ff fc9f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff fc9c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012b0:	2054      	movs	r0, #84	@ 0x54
 80012b2:	f7ff fc99 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012b6:	20a9      	movs	r0, #169	@ 0xa9
 80012b8:	f7ff fc96 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012bc:	2043      	movs	r0, #67	@ 0x43
 80012be:	f7ff fc93 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f7ff fc90 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012c8:	200f      	movs	r0, #15
 80012ca:	f7ff fc8d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fc8a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc87 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fc84 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fc81 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012e6:	20e1      	movs	r0, #225	@ 0xe1
 80012e8:	f7ff fc6e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fc7b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012f2:	2015      	movs	r0, #21
 80012f4:	f7ff fc78 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012f8:	2017      	movs	r0, #23
 80012fa:	f7ff fc75 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012fe:	2007      	movs	r0, #7
 8001300:	f7ff fc72 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001304:	2011      	movs	r0, #17
 8001306:	f7ff fc6f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800130a:	2006      	movs	r0, #6
 800130c:	f7ff fc6c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001310:	202b      	movs	r0, #43	@ 0x2b
 8001312:	f7ff fc69 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001316:	2056      	movs	r0, #86	@ 0x56
 8001318:	f7ff fc66 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800131c:	203c      	movs	r0, #60	@ 0x3c
 800131e:	f7ff fc63 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff fc60 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001328:	2010      	movs	r0, #16
 800132a:	f7ff fc5d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff fc5a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001334:	203f      	movs	r0, #63	@ 0x3f
 8001336:	f7ff fc57 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800133a:	203f      	movs	r0, #63	@ 0x3f
 800133c:	f7ff fc54 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001340:	200f      	movs	r0, #15
 8001342:	f7ff fc51 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001346:	202b      	movs	r0, #43	@ 0x2b
 8001348:	f7ff fc3e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fc4b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fc48 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fc45 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800135e:	203f      	movs	r0, #63	@ 0x3f
 8001360:	f7ff fc42 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001364:	202a      	movs	r0, #42	@ 0x2a
 8001366:	f7ff fc2f 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fc3c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fc39 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc36 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800137c:	20ef      	movs	r0, #239	@ 0xef
 800137e:	f7ff fc33 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001382:	2011      	movs	r0, #17
 8001384:	f7ff fc20 	bl	8000bc8 <LCD_WR_REG>
	HAL_Delay(120);
 8001388:	2078      	movs	r0, #120	@ 0x78
 800138a:	f001 fba3 	bl	8002ad4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800138e:	2029      	movs	r0, #41	@ 0x29
 8001390:	f7ff fc1a 	bl	8000bc8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139a:	4804      	ldr	r0, [pc, #16]	@ (80013ac <lcd_init+0x2bc>)
 800139c:	f001 fefe 	bl	800319c <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40020800 	.word	0x40020800
 80013a8:	20000110 	.word	0x20000110
 80013ac:	40020000 	.word	0x40020000

080013b0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	@ 0x2c
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	81fb      	strh	r3, [r7, #14]
 80013be:	460b      	mov	r3, r1
 80013c0:	81bb      	strh	r3, [r7, #12]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013ce:	e048      	b.n	8001462 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d145      	bne.n	8001462 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013d6:	89fa      	ldrh	r2, [r7, #14]
 80013d8:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <lcd_ShowStr+0xc4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	1acb      	subs	r3, r1, r3
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dc3f      	bgt.n	800146c <lcd_ShowStr+0xbc>
 80013ec:	89ba      	ldrh	r2, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <lcd_ShowStr+0xc4>)
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dc36      	bgt.n	800146c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b80      	cmp	r3, #128	@ 0x80
 8001404:	d902      	bls.n	800140c <lcd_ShowStr+0x5c>
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
 800140a:	e02a      	b.n	8001462 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0d      	cmp	r3, #13
 8001412:	d10b      	bne.n	800142c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001414:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001418:	b29a      	uxth	r2, r3
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001420:	8abb      	ldrh	r3, [r7, #20]
 8001422:	81fb      	strh	r3, [r7, #14]
					str++;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e017      	b.n	800145c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	88fc      	ldrh	r4, [r7, #6]
 8001432:	89b9      	ldrh	r1, [r7, #12]
 8001434:	89f8      	ldrh	r0, [r7, #14]
 8001436:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4623      	mov	r3, r4
 8001448:	f7ff fcc4 	bl	8000dd4 <lcd_ShowChar>
					x+=sizey/2;
 800144c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	4413      	add	r3, r2
 800145a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3301      	adds	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1b2      	bne.n	80013d0 <lcd_ShowStr+0x20>
 800146a:	e000      	b.n	800146e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800146c:	bf00      	nop
			}
		}
	}
}
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	20000110 	.word	0x20000110

08001478 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af04      	add	r7, sp, #16
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	460b      	mov	r3, r1
 8001488:	81bb      	strh	r3, [r7, #12]
 800148a:	4613      	mov	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7fe fe9a 	bl	80001c8 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <lcd_StrCenter+0x60>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014ac:	89fa      	ldrh	r2, [r7, #14]
 80014ae:	8abb      	ldrh	r3, [r7, #20]
 80014b0:	4413      	add	r3, r2
 80014b2:	b298      	uxth	r0, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	89b9      	ldrh	r1, [r7, #12]
 80014b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	8c3b      	ldrh	r3, [r7, #32]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f7ff ff70 	bl	80013b0 <lcd_ShowStr>
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000110 	.word	0x20000110

080014dc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2140      	movs	r1, #64	@ 0x40
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <led7_init+0x14>)
 80014e6:	f001 fe59 	bl	800319c <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021800 	.word	0x40021800

080014f4 <led7_Scan>:

void led7_Scan(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014f8:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <led7_Scan+0x104>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <led7_Scan+0x104>)
 8001502:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <led7_Scan+0x108>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3d      	ldr	r2, [pc, #244]	@ (8001600 <led7_Scan+0x10c>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b39      	ldr	r3, [pc, #228]	@ (80015f8 <led7_Scan+0x104>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <led7_Scan+0x104>)
 800151e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <led7_Scan+0x108>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d847      	bhi.n	80015b8 <led7_Scan+0xc4>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <led7_Scan+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	0800155f 	.word	0x0800155f
 8001538:	0800157d 	.word	0x0800157d
 800153c:	0800159b 	.word	0x0800159b
	case 0:
		spi_buffer |= 0x00b0;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <led7_Scan+0x104>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <led7_Scan+0x104>)
 800154c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <led7_Scan+0x104>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <led7_Scan+0x104>)
 800155a:	801a      	strh	r2, [r3, #0]
		break;
 800155c:	e02d      	b.n	80015ba <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <led7_Scan+0x104>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <led7_Scan+0x104>)
 800156a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <led7_Scan+0x104>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	f023 0320 	bic.w	r3, r3, #32
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <led7_Scan+0x104>)
 8001578:	801a      	strh	r2, [r3, #0]
		break;
 800157a:	e01e      	b.n	80015ba <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <led7_Scan+0x104>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <led7_Scan+0x104>)
 8001588:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <led7_Scan+0x104>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	f023 0310 	bic.w	r3, r3, #16
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <led7_Scan+0x104>)
 8001596:	801a      	strh	r2, [r3, #0]
		break;
 8001598:	e00f      	b.n	80015ba <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <led7_Scan+0x104>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <led7_Scan+0x104>)
 80015a6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <led7_Scan+0x104>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <led7_Scan+0x104>)
 80015b4:	801a      	strh	r2, [r3, #0]
		break;
 80015b6:	e000      	b.n	80015ba <led7_Scan+0xc6>
	default:
		break;
 80015b8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <led7_Scan+0x108>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	425a      	negs	r2, r3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	bf58      	it	pl
 80015cc:	4253      	negpl	r3, r2
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <led7_Scan+0x108>)
 80015d0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2140      	movs	r1, #64	@ 0x40
 80015d6:	480b      	ldr	r0, [pc, #44]	@ (8001604 <led7_Scan+0x110>)
 80015d8:	f001 fde0 	bl	800319c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015dc:	2301      	movs	r3, #1
 80015de:	2202      	movs	r2, #2
 80015e0:	4905      	ldr	r1, [pc, #20]	@ (80015f8 <led7_Scan+0x104>)
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <led7_Scan+0x114>)
 80015e4:	f003 fc03 	bl	8004dee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <led7_Scan+0x110>)
 80015ee:	f001 fdd5 	bl	800319c <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000118 	.word	0x20000118
 8001600:	20000000 	.word	0x20000000
 8001604:	40021800 	.word	0x40021800
 8001608:	20000144 	.word	0x20000144

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f001 f9ed 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f8c7 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f7ff f967 	bl	80008ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800161e:	f001 f831 	bl	8002684 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001622:	f000 ff33 	bl	800248c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001626:	f7ff f891 	bl	800074c <MX_FSMC_Init>
  MX_I2C1_Init();
 800162a:	f7ff fa57 	bl	8000adc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800162e:	f001 f8fd 	bl	800282c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001632:	f000 f923 	bl	800187c <system_init>

    	// Inside the main loop



      while (!flag_timer2);
 8001636:	bf00      	nop
 8001638:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <main+0x168>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0fb      	beq.n	8001638 <main+0x2c>
      flag_timer2 = 0;
 8001640:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <main+0x168>)
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
      button_Scan();
 8001646:	f7fe ff4b 	bl	80004e0 <button_Scan>
      buttonBai5();
 800164a:	f000 f961 	bl	8001910 <buttonBai5>
  	if (data_available_flag) {
 800164e:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <main+0x16c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <main+0x54>
  	    ProcessRingBufferData();  // Process all available data in the ring buffer
 8001656:	f000 fdbb 	bl	80021d0 <ProcessRingBufferData>
  	    data_available_flag = 0;   // Reset the flag after processing
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <main+0x16c>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
  	}
      switch (current_mode) {
 8001660:	4b46      	ldr	r3, [pc, #280]	@ (800177c <main+0x170>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b04      	cmp	r3, #4
 8001666:	f200 8081 	bhi.w	800176c <main+0x160>
 800166a:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <main+0x64>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001685 	.word	0x08001685
 8001674:	080016b3 	.word	0x080016b3
 8001678:	080016d3 	.word	0x080016d3
 800167c:	080016f9 	.word	0x080016f9
 8001680:	08001719 	.word	0x08001719
          case DISPLAY_MODE:
        	  lcd_StrCenter(0, 2, "DISPLAY MODE", WHITE, BLACK, 16, 1);
 8001684:	2301      	movs	r3, #1
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2310      	movs	r3, #16
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001694:	4a3a      	ldr	r2, [pc, #232]	@ (8001780 <main+0x174>)
 8001696:	2102      	movs	r1, #2
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff feed 	bl	8001478 <lcd_StrCenter>
              ds3231_ReadTime();
 800169e:	f7fe fff1 	bl	8000684 <ds3231_ReadTime>
              displayTime();
 80016a2:	f000 f977 	bl	8001994 <displayTime>
              checkAlarm();
 80016a6:	f000 fbd1 	bl	8001e4c <checkAlarm>
              adjust_part =0;
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <main+0x178>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
              break;
 80016b0:	e05f      	b.n	8001772 <main+0x166>

          case ADJUST_MODE:
        	  lcd_StrCenter(0, 2, "ADJUST MANUALLY Mode", WHITE, BLACK, 16, 1);
 80016b2:	2301      	movs	r3, #1
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2310      	movs	r3, #16
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c2:	4a31      	ldr	r2, [pc, #196]	@ (8001788 <main+0x17c>)
 80016c4:	2102      	movs	r1, #2
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fed6 	bl	8001478 <lcd_StrCenter>
              adjustTime();
 80016cc:	f000 f9e0 	bl	8001a90 <adjustTime>
              break;
 80016d0:	e04f      	b.n	8001772 <main+0x166>

          case ALARM_MODE:
        	  lcd_StrCenter(0, 2, "ALARM Mode", WHITE, BLACK, 16, 1);
 80016d2:	2301      	movs	r3, #1
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	2310      	movs	r3, #16
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e2:	4a2a      	ldr	r2, [pc, #168]	@ (800178c <main+0x180>)
 80016e4:	2102      	movs	r1, #2
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fec6 	bl	8001478 <lcd_StrCenter>
              setAlarm();
 80016ec:	f000 fb2e 	bl	8001d4c <setAlarm>
              adjust_part =0;
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <main+0x178>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
              break;
 80016f6:	e03c      	b.n	8001772 <main+0x166>
          case ADJUST_RS232_Mode:
        	  lcd_StrCenter(0, 2, "ADJUST RS232 Mode", WHITE, BLACK, 16, 1);
 80016f8:	2301      	movs	r3, #1
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2310      	movs	r3, #16
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001708:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <main+0x184>)
 800170a:	2102      	movs	r1, #2
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff feb3 	bl	8001478 <lcd_StrCenter>
//        	  lcd_ShowStr(20, 30, "Traffic light", WHITE, Black, 24, 0);
        	  adjustTimeRS232();
 8001712:	f000 fc0b 	bl	8001f2c <adjustTimeRS232>
        	  break;
 8001716:	e02c      	b.n	8001772 <main+0x166>
          case ADJUST_RS232_Mode_ERROR:
        	    lcd_StrCenter(0, 2, "ERROR: No response", RED, BLACK, 16, 1);
 8001718:	2301      	movs	r3, #1
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2310      	movs	r3, #16
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001728:	4a1a      	ldr	r2, [pc, #104]	@ (8001794 <main+0x188>)
 800172a:	2102      	movs	r1, #2
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fea3 	bl	8001478 <lcd_StrCenter>
      	        error_display_counter++;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <main+0x18c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <main+0x18c>)
 800173c:	701a      	strb	r2, [r3, #0]
      	        if (error_display_counter >= ERROR_DISPLAY_TIME) {
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <main+0x18c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b3b      	cmp	r3, #59	@ 0x3b
 8001744:	d914      	bls.n	8001770 <main+0x164>
      	            current_mode = DISPLAY_MODE;  // Reset to normal mode
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <main+0x170>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
      	            lcd_Clear(BLACK);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fab9 	bl	8000cc4 <lcd_Clear>
      	            in_error_display = 0;
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <main+0x190>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
      	            error_display_counter = 0;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <main+0x18c>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
      	          attempt_count = 0;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <main+0x194>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
      	          timeout_counter = TIMEOUT;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <main+0x198>)
 8001766:	2264      	movs	r2, #100	@ 0x64
 8001768:	801a      	strh	r2, [r3, #0]
      	        }
        	  break;
 800176a:	e001      	b.n	8001770 <main+0x164>
          default:
              break;
 800176c:	bf00      	nop
 800176e:	e762      	b.n	8001636 <main+0x2a>
        	  break;
 8001770:	bf00      	nop
      while (!flag_timer2);
 8001772:	e760      	b.n	8001636 <main+0x2a>
 8001774:	2000013c 	.word	0x2000013c
 8001778:	2000012e 	.word	0x2000012e
 800177c:	2000012f 	.word	0x2000012f
 8001780:	080074b0 	.word	0x080074b0
 8001784:	20000130 	.word	0x20000130
 8001788:	080074c0 	.word	0x080074c0
 800178c:	080074d8 	.word	0x080074d8
 8001790:	080074e4 	.word	0x080074e4
 8001794:	080074f8 	.word	0x080074f8
 8001798:	20000138 	.word	0x20000138
 800179c:	20000139 	.word	0x20000139
 80017a0:	20000134 	.word	0x20000134
 80017a4:	20000006 	.word	0x20000006

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	@ 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	@ 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fe42 	bl	8007440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180c:	2310      	movs	r3, #16
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800181c:	23a8      	movs	r3, #168	@ 0xa8
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fdbd 	bl	80043ac <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fdd2 	bl	80023e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001848:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800184e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2105      	movs	r1, #5
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f81e 	bl	800489c <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001866:	f000 fdbb 	bl	80023e0 <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	@ 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2120      	movs	r1, #32
 8001884:	4811      	ldr	r0, [pc, #68]	@ (80018cc <system_init+0x50>)
 8001886:	f001 fc89 	bl	800319c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2140      	movs	r1, #64	@ 0x40
 800188e:	480f      	ldr	r0, [pc, #60]	@ (80018cc <system_init+0x50>)
 8001890:	f001 fc84 	bl	800319c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2110      	movs	r1, #16
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <system_init+0x50>)
 800189a:	f001 fc7f 	bl	800319c <HAL_GPIO_WritePin>
	  timer_init();
 800189e:	f000 fda5 	bl	80023ec <timer_init>
	  led7_init();
 80018a2:	f7ff fe1b 	bl	80014dc <led7_init>
	  button_init();
 80018a6:	f7fe fe0f 	bl	80004c8 <button_init>
	  lcd_init();
 80018aa:	f7ff fc21 	bl	80010f0 <lcd_init>
	  uart_init_rs232();
 80018ae:	f000 ff5b 	bl	8002768 <uart_init_rs232>
	  ds3231_init();
 80018b2:	f7fe fe81 	bl	80005b8 <ds3231_init>
	  setTimer2(50);
 80018b6:	2032      	movs	r0, #50	@ 0x32
 80018b8:	f000 fda2 	bl	8002400 <setTimer2>
	  lcd_Clear(BLACK);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fa01 	bl	8000cc4 <lcd_Clear>
	  updateTime();
 80018c2:	f000 f805 	bl	80018d0 <updateTime>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <updateTime>:
		uart_Rs232SendString(":");
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}
void updateTime(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80018d4:	2117      	movs	r1, #23
 80018d6:	2006      	movs	r0, #6
 80018d8:	f7fe feb2 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 80018dc:	210a      	movs	r1, #10
 80018de:	2005      	movs	r0, #5
 80018e0:	f7fe feae 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 80018e4:	2114      	movs	r1, #20
 80018e6:	2004      	movs	r0, #4
 80018e8:	f7fe feaa 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80018ec:	2106      	movs	r1, #6
 80018ee:	2003      	movs	r0, #3
 80018f0:	f7fe fea6 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 1);
 80018f4:	2101      	movs	r1, #1
 80018f6:	2002      	movs	r0, #2
 80018f8:	f7fe fea2 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 2);
 80018fc:	2102      	movs	r1, #2
 80018fe:	2001      	movs	r0, #1
 8001900:	f7fe fe9e 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 8001904:	211e      	movs	r1, #30
 8001906:	2000      	movs	r0, #0
 8001908:	f7fe fe9a 	bl	8000640 <ds3231_Write>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <buttonBai5>:
void buttonBai5(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    if (button_count[0] == 1) {
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <buttonBai5+0x38>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d112      	bne.n	8001942 <buttonBai5+0x32>
        current_mode = (current_mode +1) % 4;
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <buttonBai5+0x3c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	425a      	negs	r2, r3
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	bf58      	it	pl
 800192e:	4253      	negpl	r3, r2
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <buttonBai5+0x3c>)
 8001934:	701a      	strb	r2, [r3, #0]
       lcd_Clear(BLACK);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff f9c4 	bl	8000cc4 <lcd_Clear>
       request_RS232_count =0;
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <buttonBai5+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
    }
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000034 	.word	0x20000034
 800194c:	2000012f 	.word	0x2000012f
 8001950:	20000133 	.word	0x20000133

08001954 <isButtonUp>:

uint8_t isButtonUp()
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <isButtonUp+0x1c>)
 800195a:	88db      	ldrh	r3, [r3, #6]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <isButtonUp+0x10>
        return 1;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <isButtonUp+0x12>
    else
        return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000034 	.word	0x20000034

08001974 <isButtonDown>:
uint8_t isButtonDown()
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <isButtonDown+0x1c>)
 800197a:	89db      	ldrh	r3, [r3, #14]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <isButtonDown+0x10>
        return 1;
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <isButtonDown+0x12>
    else
        return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	20000034 	.word	0x20000034

08001994 <displayTime>:
void displayTime(){
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af04      	add	r7, sp, #16

	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800199a:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <displayTime+0xe0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	2318      	movs	r3, #24
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2302      	movs	r3, #2
 80019b0:	2164      	movs	r1, #100	@ 0x64
 80019b2:	2046      	movs	r0, #70	@ 0x46
 80019b4:	f7ff fafa 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <displayTime+0xe4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	2318      	movs	r3, #24
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2302      	movs	r3, #2
 80019ce:	2164      	movs	r1, #100	@ 0x64
 80019d0:	206e      	movs	r0, #110	@ 0x6e
 80019d2:	f7ff faeb 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80019d6:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <displayTime+0xe8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	2318      	movs	r3, #24
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	2164      	movs	r1, #100	@ 0x64
 80019ee:	2096      	movs	r0, #150	@ 0x96
 80019f0:	f7ff fadc 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <displayTime+0xec>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	2318      	movs	r3, #24
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	2182      	movs	r1, #130	@ 0x82
 8001a0c:	2014      	movs	r0, #20
 8001a0e:	f7ff facd 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <displayTime+0xf0>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	2318      	movs	r3, #24
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2302      	movs	r3, #2
 8001a28:	2182      	movs	r1, #130	@ 0x82
 8001a2a:	2046      	movs	r0, #70	@ 0x46
 8001a2c:	f7ff fabe 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <displayTime+0xf4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	2318      	movs	r3, #24
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2302      	movs	r3, #2
 8001a46:	2182      	movs	r1, #130	@ 0x82
 8001a48:	206e      	movs	r0, #110	@ 0x6e
 8001a4a:	f7ff faaf 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <displayTime+0xf8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	2318      	movs	r3, #24
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2302      	movs	r3, #2
 8001a64:	2182      	movs	r1, #130	@ 0x82
 8001a66:	2096      	movs	r0, #150	@ 0x96
 8001a68:	f7ff faa0 	bl	8000fac <lcd_ShowIntNum>
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000005f 	.word	0x2000005f
 8001a78:	20000060 	.word	0x20000060
 8001a7c:	20000061 	.word	0x20000061
 8001a80:	20000063 	.word	0x20000063
 8001a84:	20000062 	.word	0x20000062
 8001a88:	20000064 	.word	0x20000064
 8001a8c:	20000065 	.word	0x20000065

08001a90 <adjustTime>:

void adjustTime() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af04      	add	r7, sp, #16
//    lcd_ShowStr(10, 10, "Adjust Time", RED, BLACK, 24);
	counter_blink = (counter_blink + 1)%10;
 8001a96:	4ba2      	ldr	r3, [pc, #648]	@ (8001d20 <adjustTime+0x290>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8001d24 <adjustTime+0x294>)
 8001a9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001aa2:	1099      	asrs	r1, r3, #2
 8001aa4:	17d3      	asrs	r3, r2, #31
 8001aa6:	1ac9      	subs	r1, r1, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	1ad1      	subs	r1, r2, r3
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d20 <adjustTime+0x290>)
 8001ab6:	701a      	strb	r2, [r3, #0]
    // Increment the selected part of time
    if (isButtonUp()) {
 8001ab8:	f7ff ff4c 	bl	8001954 <isButtonUp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d042      	beq.n	8001b48 <adjustTime+0xb8>
        if (adjust_part == 0){
 8001ac2:	4b99      	ldr	r3, [pc, #612]	@ (8001d28 <adjustTime+0x298>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d111      	bne.n	8001aee <adjustTime+0x5e>
        	ds3231_hours = (ds3231_hours + 1) % 24;
 8001aca:	4b98      	ldr	r3, [pc, #608]	@ (8001d2c <adjustTime+0x29c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	4b97      	ldr	r3, [pc, #604]	@ (8001d30 <adjustTime+0x2a0>)
 8001ad2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad6:	1099      	asrs	r1, r3, #2
 8001ad8:	17d3      	asrs	r3, r2, #31
 8001ada:	1ac9      	subs	r1, r1, r3
 8001adc:	460b      	mov	r3, r1
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	440b      	add	r3, r1
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1ad1      	subs	r1, r2, r3
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	4b90      	ldr	r3, [pc, #576]	@ (8001d2c <adjustTime+0x29c>)
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e02c      	b.n	8001b48 <adjustTime+0xb8>

        }
        else if (adjust_part == 1) ds3231_min = (ds3231_min + 1) % 60;
 8001aee:	4b8e      	ldr	r3, [pc, #568]	@ (8001d28 <adjustTime+0x298>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d112      	bne.n	8001b1c <adjustTime+0x8c>
 8001af6:	4b8f      	ldr	r3, [pc, #572]	@ (8001d34 <adjustTime+0x2a4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	4b8e      	ldr	r3, [pc, #568]	@ (8001d38 <adjustTime+0x2a8>)
 8001afe:	fb83 1302 	smull	r1, r3, r3, r2
 8001b02:	4413      	add	r3, r2
 8001b04:	1159      	asrs	r1, r3, #5
 8001b06:	17d3      	asrs	r3, r2, #31
 8001b08:	1ac9      	subs	r1, r1, r3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a5b      	subs	r3, r3, r1
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	1ad1      	subs	r1, r2, r3
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	4b87      	ldr	r3, [pc, #540]	@ (8001d34 <adjustTime+0x2a4>)
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e015      	b.n	8001b48 <adjustTime+0xb8>
        else if (adjust_part == 2) ds3231_sec = (ds3231_sec + 1) % 60;
 8001b1c:	4b82      	ldr	r3, [pc, #520]	@ (8001d28 <adjustTime+0x298>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d111      	bne.n	8001b48 <adjustTime+0xb8>
 8001b24:	4b85      	ldr	r3, [pc, #532]	@ (8001d3c <adjustTime+0x2ac>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4b83      	ldr	r3, [pc, #524]	@ (8001d38 <adjustTime+0x2a8>)
 8001b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b30:	4413      	add	r3, r2
 8001b32:	1159      	asrs	r1, r3, #5
 8001b34:	17d3      	asrs	r3, r2, #31
 8001b36:	1ac9      	subs	r1, r1, r3
 8001b38:	460b      	mov	r3, r1
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	1ad1      	subs	r1, r2, r3
 8001b42:	b2ca      	uxtb	r2, r1
 8001b44:	4b7d      	ldr	r3, [pc, #500]	@ (8001d3c <adjustTime+0x2ac>)
 8001b46:	701a      	strb	r2, [r3, #0]
    }

    // Save part and move to the next part
    if (isButtonDown()) {
 8001b48:	f7ff ff14 	bl	8001974 <isButtonDown>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02a      	beq.n	8001ba8 <adjustTime+0x118>
        adjust_part = (adjust_part + 1) % 3;  // Rotate through hours, minutes, seconds
 8001b52:	4b75      	ldr	r3, [pc, #468]	@ (8001d28 <adjustTime+0x298>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	4b79      	ldr	r3, [pc, #484]	@ (8001d40 <adjustTime+0x2b0>)
 8001b5a:	fb83 3102 	smull	r3, r1, r3, r2
 8001b5e:	17d3      	asrs	r3, r2, #31
 8001b60:	1ac9      	subs	r1, r1, r3
 8001b62:	460b      	mov	r3, r1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	440b      	add	r3, r1
 8001b68:	1ad1      	subs	r1, r2, r3
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d28 <adjustTime+0x298>)
 8001b6e:	701a      	strb	r2, [r3, #0]

        if (adjust_part == 0) {
 8001b70:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <adjustTime+0x298>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d117      	bne.n	8001ba8 <adjustTime+0x118>
        	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001b78:	4b6c      	ldr	r3, [pc, #432]	@ (8001d2c <adjustTime+0x29c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f7fe fd5e 	bl	8000640 <ds3231_Write>
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <adjustTime+0x2a4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7fe fd58 	bl	8000640 <ds3231_Write>
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001b90:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <adjustTime+0x2ac>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7fe fd52 	bl	8000640 <ds3231_Write>
            current_mode = DISPLAY_MODE;
 8001b9c:	4b69      	ldr	r3, [pc, #420]	@ (8001d44 <adjustTime+0x2b4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
            lcd_Clear(BLACK);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff f88e 	bl	8000cc4 <lcd_Clear>
        }
    }

    // Display and blink selected part

    if (adjust_part == 0) {
 8001ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d28 <adjustTime+0x298>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13a      	bne.n	8001c26 <adjustTime+0x196>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <adjustTime+0x290>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d118      	bne.n	8001bea <adjustTime+0x15a>
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <adjustTime+0x2b8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d114      	bne.n	8001bea <adjustTime+0x15a>
    	{
    		displayTime();
 8001bc0:	f7ff fee8 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <adjustTime+0x29c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2318      	movs	r3, #24
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2164      	movs	r1, #100	@ 0x64
 8001bdc:	2046      	movs	r0, #70	@ 0x46
 8001bde:	f7ff f9e5 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =1;
 8001be2:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <adjustTime+0x2b8>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e097      	b.n	8001d1a <adjustTime+0x28a>
    	}
    	else if (counter_blink ==0 &&blink_flag ==1){
 8001bea:	4b4d      	ldr	r3, [pc, #308]	@ (8001d20 <adjustTime+0x290>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8093 	bne.w	8001d1a <adjustTime+0x28a>
 8001bf4:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <adjustTime+0x2b8>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f040 808e 	bne.w	8001d1a <adjustTime+0x28a>
    		displayTime();
 8001bfe:	f7ff fec9 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <adjustTime+0x29c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	2318      	movs	r3, #24
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2300      	movs	r3, #0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2302      	movs	r3, #2
 8001c16:	2164      	movs	r1, #100	@ 0x64
 8001c18:	2046      	movs	r0, #70	@ 0x46
 8001c1a:	f7ff f9c7 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =0;
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <adjustTime+0x2b8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    		displayTime();
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
    		blink_flag =0;
    	}
    }
}
 8001c24:	e079      	b.n	8001d1a <adjustTime+0x28a>
    else if (adjust_part == 1) {
 8001c26:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <adjustTime+0x298>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d138      	bne.n	8001ca0 <adjustTime+0x210>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <adjustTime+0x290>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <adjustTime+0x1d8>
 8001c36:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <adjustTime+0x2b8>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d114      	bne.n	8001c68 <adjustTime+0x1d8>
    		displayTime();
 8001c3e:	f7ff fea9 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <adjustTime+0x2a4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2318      	movs	r3, #24
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2302      	movs	r3, #2
 8001c58:	2164      	movs	r1, #100	@ 0x64
 8001c5a:	206e      	movs	r0, #110	@ 0x6e
 8001c5c:	f7ff f9a6 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =1;
 8001c60:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <adjustTime+0x2b8>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e058      	b.n	8001d1a <adjustTime+0x28a>
    	else if (counter_blink ==0 &&blink_flag ==1){
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <adjustTime+0x290>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d154      	bne.n	8001d1a <adjustTime+0x28a>
 8001c70:	4b35      	ldr	r3, [pc, #212]	@ (8001d48 <adjustTime+0x2b8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d150      	bne.n	8001d1a <adjustTime+0x28a>
    		displayTime();
 8001c78:	f7ff fe8c 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <adjustTime+0x2a4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	2318      	movs	r3, #24
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2302      	movs	r3, #2
 8001c90:	2164      	movs	r1, #100	@ 0x64
 8001c92:	206e      	movs	r0, #110	@ 0x6e
 8001c94:	f7ff f98a 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =0;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <adjustTime+0x2b8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	e03c      	b.n	8001d1a <adjustTime+0x28a>
    else if (adjust_part == 2) {
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <adjustTime+0x298>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d138      	bne.n	8001d1a <adjustTime+0x28a>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <adjustTime+0x290>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d118      	bne.n	8001ce2 <adjustTime+0x252>
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <adjustTime+0x2b8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d114      	bne.n	8001ce2 <adjustTime+0x252>
    		displayTime();
 8001cb8:	f7ff fe6c 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <adjustTime+0x2ac>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2318      	movs	r3, #24
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	2164      	movs	r1, #100	@ 0x64
 8001cd4:	2096      	movs	r0, #150	@ 0x96
 8001cd6:	f7ff f969 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =1;
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <adjustTime+0x2b8>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e01b      	b.n	8001d1a <adjustTime+0x28a>
    	else if(counter_blink ==0 &&blink_flag ==1){
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <adjustTime+0x290>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d117      	bne.n	8001d1a <adjustTime+0x28a>
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <adjustTime+0x2b8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d113      	bne.n	8001d1a <adjustTime+0x28a>
    		displayTime();
 8001cf2:	f7ff fe4f 	bl	8001994 <displayTime>
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <adjustTime+0x2ac>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2318      	movs	r3, #24
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2164      	movs	r1, #100	@ 0x64
 8001d0c:	2096      	movs	r0, #150	@ 0x96
 8001d0e:	f7ff f94d 	bl	8000fac <lcd_ShowIntNum>
    		blink_flag =0;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <adjustTime+0x2b8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	e7ff      	b.n	8001d1a <adjustTime+0x28a>
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000011c 	.word	0x2000011c
 8001d24:	66666667 	.word	0x66666667
 8001d28:	20000130 	.word	0x20000130
 8001d2c:	2000005f 	.word	0x2000005f
 8001d30:	2aaaaaab 	.word	0x2aaaaaab
 8001d34:	20000060 	.word	0x20000060
 8001d38:	88888889 	.word	0x88888889
 8001d3c:	20000061 	.word	0x20000061
 8001d40:	55555556 	.word	0x55555556
 8001d44:	2000012f 	.word	0x2000012f
 8001d48:	2000011d 	.word	0x2000011d

08001d4c <setAlarm>:
static uint8_t alarm_active = 2;  // Flag to indicate if the alarm is active


void setAlarm() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af04      	add	r7, sp, #16
//    lcd_ShowStr(10, 10, "Set Alarm", YELLOW, BLACK, 24);

    // Adjust alarm time
    if (isButtonUp()) {
 8001d52:	f7ff fdff 	bl	8001954 <isButtonUp>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02b      	beq.n	8001db4 <setAlarm+0x68>
        if (adjust_part == 0) alarm_hours = (alarm_hours + 1) % 24;
 8001d5c:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <setAlarm+0xe4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d111      	bne.n	8001d88 <setAlarm+0x3c>
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <setAlarm+0xe8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <setAlarm+0xec>)
 8001d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d70:	1099      	asrs	r1, r3, #2
 8001d72:	17d3      	asrs	r3, r2, #31
 8001d74:	1ac9      	subs	r1, r1, r3
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1ad1      	subs	r1, r2, r3
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <setAlarm+0xe8>)
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e015      	b.n	8001db4 <setAlarm+0x68>
        else if (adjust_part == 1) alarm_minutes = (alarm_minutes + 1) % 60;
 8001d88:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <setAlarm+0xe4>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d111      	bne.n	8001db4 <setAlarm+0x68>
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <setAlarm+0xf0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <setAlarm+0xf4>)
 8001d98:	fb83 1302 	smull	r1, r3, r3, r2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	1159      	asrs	r1, r3, #5
 8001da0:	17d3      	asrs	r3, r2, #31
 8001da2:	1ac9      	subs	r1, r1, r3
 8001da4:	460b      	mov	r3, r1
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a5b      	subs	r3, r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	1ad1      	subs	r1, r2, r3
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <setAlarm+0xf0>)
 8001db2:	701a      	strb	r2, [r3, #0]


    }

    if (isButtonDown()) {
 8001db4:	f7ff fdde 	bl	8001974 <isButtonDown>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <setAlarm+0xa2>
        adjust_part = (adjust_part + 1) % 2;  // Move to next part
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <setAlarm+0xe4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	bfb8      	it	lt
 8001dcc:	425b      	neglt	r3, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <setAlarm+0xe4>)
 8001dd2:	701a      	strb	r2, [r3, #0]

        if (adjust_part == 0) {
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <setAlarm+0xe4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d108      	bne.n	8001dee <setAlarm+0xa2>
            current_mode = DISPLAY_MODE; // Return to view mode
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <setAlarm+0xf8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
            lcd_Clear(BLACK);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7fe ff6e 	bl	8000cc4 <lcd_Clear>
            alarm_active = 1;
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <setAlarm+0xfc>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
        }
    }

    // Display alarm time
    lcd_ShowIntNum(70, 100, alarm_hours, 2, YELLOW, BLACK, 24);
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <setAlarm+0xe8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	2318      	movs	r3, #24
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2302      	movs	r3, #2
 8001e04:	2164      	movs	r1, #100	@ 0x64
 8001e06:	2046      	movs	r0, #70	@ 0x46
 8001e08:	f7ff f8d0 	bl	8000fac <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, alarm_minutes, 2, YELLOW, BLACK, 24);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <setAlarm+0xf0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	2318      	movs	r3, #24
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2302      	movs	r3, #2
 8001e22:	2164      	movs	r1, #100	@ 0x64
 8001e24:	206e      	movs	r0, #110	@ 0x6e
 8001e26:	f7ff f8c1 	bl	8000fac <lcd_ShowIntNum>

}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000130 	.word	0x20000130
 8001e34:	20000131 	.word	0x20000131
 8001e38:	2aaaaaab 	.word	0x2aaaaaab
 8001e3c:	20000132 	.word	0x20000132
 8001e40:	88888889 	.word	0x88888889
 8001e44:	2000012f 	.word	0x2000012f
 8001e48:	20000008 	.word	0x20000008

08001e4c <checkAlarm>:
uint8_t flash_counter = 0;
void checkAlarm() {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af02      	add	r7, sp, #8
    ds3231_ReadTime();
 8001e52:	f7fe fc17 	bl	8000684 <ds3231_ReadTime>

    // Check if it's time for the alarm to trigger
    if (ds3231_hours == alarm_hours && ds3231_min == alarm_minutes) {
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <checkAlarm+0x70>)
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <checkAlarm+0x74>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d124      	bne.n	8001eac <checkAlarm+0x60>
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <checkAlarm+0x78>)
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <checkAlarm+0x7c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11e      	bne.n	8001eac <checkAlarm+0x60>
        flash_counter++;  // Increment the flash counter every time checkAlarm is called
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <checkAlarm+0x80>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <checkAlarm+0x80>)
 8001e78:	701a      	strb	r2, [r3, #0]

        // Flash red screen every 5 seconds
        if (flash_counter >= 20) {
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <checkAlarm+0x80>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b13      	cmp	r3, #19
 8001e80:	d918      	bls.n	8001eb4 <checkAlarm+0x68>
            lcd_Fill(0, 0, 240, 320, RED);  // Flash red screen
 8001e82:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001e8c:	22f0      	movs	r2, #240	@ 0xf0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7fe ff51 	bl	8000d38 <lcd_Fill>
            flash_counter = 0;  // Reset the counter after flashing
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <checkAlarm+0x80>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
            if(flash_counter == 0){
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <checkAlarm+0x80>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <checkAlarm+0x68>
            	lcd_Clear(BLACK);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7fe ff0d 	bl	8000cc4 <lcd_Clear>
        if (flash_counter >= 20) {
 8001eaa:	e003      	b.n	8001eb4 <checkAlarm+0x68>
            }
        }
    } else {
        flash_counter = 0;  // Reset counter if not in alarm time
 8001eac:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <checkAlarm+0x80>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    }
}
 8001eb2:	e000      	b.n	8001eb6 <checkAlarm+0x6a>
        if (flash_counter >= 20) {
 8001eb4:	bf00      	nop
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000005f 	.word	0x2000005f
 8001ec0:	20000131 	.word	0x20000131
 8001ec4:	20000060 	.word	0x20000060
 8001ec8:	20000132 	.word	0x20000132
 8001ecc:	2000013a 	.word	0x2000013a

08001ed0 <resendRequest>:

void resendRequest() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    switch (adjust_part) {
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <resendRequest+0x48>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d014      	beq.n	8001f06 <resendRequest+0x36>
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	dc19      	bgt.n	8001f14 <resendRequest+0x44>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <resendRequest+0x1a>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d007      	beq.n	8001ef8 <resendRequest+0x28>
        case 0: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Hour\n", 13, 10); break;
        case 1: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Min\n", 12, 10); break;
        case 2: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Sec\n", 12, 10); break;
    }
}
 8001ee8:	e014      	b.n	8001f14 <resendRequest+0x44>
        case 0: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Hour\n", 13, 10); break;
 8001eea:	230a      	movs	r3, #10
 8001eec:	220d      	movs	r2, #13
 8001eee:	490b      	ldr	r1, [pc, #44]	@ (8001f1c <resendRequest+0x4c>)
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <resendRequest+0x50>)
 8001ef2:	f004 f9ae 	bl	8006252 <HAL_UART_Transmit>
 8001ef6:	e00d      	b.n	8001f14 <resendRequest+0x44>
        case 1: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Min\n", 12, 10); break;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	220c      	movs	r2, #12
 8001efc:	4909      	ldr	r1, [pc, #36]	@ (8001f24 <resendRequest+0x54>)
 8001efe:	4808      	ldr	r0, [pc, #32]	@ (8001f20 <resendRequest+0x50>)
 8001f00:	f004 f9a7 	bl	8006252 <HAL_UART_Transmit>
 8001f04:	e006      	b.n	8001f14 <resendRequest+0x44>
        case 2: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Sec\n", 12, 10); break;
 8001f06:	230a      	movs	r3, #10
 8001f08:	220c      	movs	r2, #12
 8001f0a:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <resendRequest+0x58>)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <resendRequest+0x50>)
 8001f0e:	f004 f9a0 	bl	8006252 <HAL_UART_Transmit>
 8001f12:	bf00      	nop
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000130 	.word	0x20000130
 8001f1c:	08007514 	.word	0x08007514
 8001f20:	200001e8 	.word	0x200001e8
 8001f24:	08007524 	.word	0x08007524
 8001f28:	08007534 	.word	0x08007534

08001f2c <adjustTimeRS232>:




void adjustTimeRS232(void){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af04      	add	r7, sp, #16
	counter_blink = (counter_blink + 1)%10;
 8001f32:	4b99      	ldr	r3, [pc, #612]	@ (8002198 <adjustTimeRS232+0x26c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4b98      	ldr	r3, [pc, #608]	@ (800219c <adjustTimeRS232+0x270>)
 8001f3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f3e:	1099      	asrs	r1, r3, #2
 8001f40:	17d3      	asrs	r3, r2, #31
 8001f42:	1ac9      	subs	r1, r1, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	1ad1      	subs	r1, r2, r3
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	4b91      	ldr	r3, [pc, #580]	@ (8002198 <adjustTimeRS232+0x26c>)
 8001f52:	701a      	strb	r2, [r3, #0]
	timeout_counter = (timeout_counter + 1)%TIMEOUT;
 8001f54:	4b92      	ldr	r3, [pc, #584]	@ (80021a0 <adjustTimeRS232+0x274>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a92      	ldr	r2, [pc, #584]	@ (80021a4 <adjustTimeRS232+0x278>)
 8001f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f60:	1151      	asrs	r1, r2, #5
 8001f62:	17da      	asrs	r2, r3, #31
 8001f64:	1a8a      	subs	r2, r1, r2
 8001f66:	2164      	movs	r1, #100	@ 0x64
 8001f68:	fb01 f202 	mul.w	r2, r1, r2
 8001f6c:	1a9a      	subs	r2, r3, r2
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	4b8b      	ldr	r3, [pc, #556]	@ (80021a0 <adjustTimeRS232+0x274>)
 8001f72:	801a      	strh	r2, [r3, #0]



	    if (isButtonDown()) {
 8001f74:	f7ff fcfe 	bl	8001974 <isButtonDown>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02a      	beq.n	8001fd4 <adjustTimeRS232+0xa8>
	        adjust_part = (adjust_part + 1) % 3;  // Rotate through hours, minutes, seconds
 8001f7e:	4b8a      	ldr	r3, [pc, #552]	@ (80021a8 <adjustTimeRS232+0x27c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	4b89      	ldr	r3, [pc, #548]	@ (80021ac <adjustTimeRS232+0x280>)
 8001f86:	fb83 3102 	smull	r3, r1, r3, r2
 8001f8a:	17d3      	asrs	r3, r2, #31
 8001f8c:	1ac9      	subs	r1, r1, r3
 8001f8e:	460b      	mov	r3, r1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	440b      	add	r3, r1
 8001f94:	1ad1      	subs	r1, r2, r3
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	4b83      	ldr	r3, [pc, #524]	@ (80021a8 <adjustTimeRS232+0x27c>)
 8001f9a:	701a      	strb	r2, [r3, #0]

	        if (adjust_part == 0) {
 8001f9c:	4b82      	ldr	r3, [pc, #520]	@ (80021a8 <adjustTimeRS232+0x27c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d117      	bne.n	8001fd4 <adjustTimeRS232+0xa8>
	        	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001fa4:	4b82      	ldr	r3, [pc, #520]	@ (80021b0 <adjustTimeRS232+0x284>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2002      	movs	r0, #2
 8001fac:	f7fe fb48 	bl	8000640 <ds3231_Write>
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001fb0:	4b80      	ldr	r3, [pc, #512]	@ (80021b4 <adjustTimeRS232+0x288>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe fb42 	bl	8000640 <ds3231_Write>
				ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80021b8 <adjustTimeRS232+0x28c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7fe fb3c 	bl	8000640 <ds3231_Write>
	            current_mode = DISPLAY_MODE;
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80021bc <adjustTimeRS232+0x290>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
	            lcd_Clear(BLACK);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7fe fe78 	bl	8000cc4 <lcd_Clear>
	        }
	    }

	    if (data_available_flag) {
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	@ (80021c0 <adjustTimeRS232+0x294>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <adjustTimeRS232+0xba>
	        data_available_flag = 0;
 8001fdc:	4b78      	ldr	r3, [pc, #480]	@ (80021c0 <adjustTimeRS232+0x294>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
	        ProcessRingBufferData();
 8001fe2:	f000 f8f5 	bl	80021d0 <ProcessRingBufferData>
	    }

	    if (timeout_counter ==0) {  // 5 seconds elapsed
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80021a0 <adjustTimeRS232+0x274>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <adjustTimeRS232+0xf4>
	        if (attempt_count < MAX_ATTEMPTS) {
 8001fee:	4b75      	ldr	r3, [pc, #468]	@ (80021c4 <adjustTimeRS232+0x298>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d80b      	bhi.n	800200e <adjustTimeRS232+0xe2>
	            resendRequest();
 8001ff6:	f7ff ff6b 	bl	8001ed0 <resendRequest>
	            timeout_counter = 0;  // Reset counter after resend
 8001ffa:	4b69      	ldr	r3, [pc, #420]	@ (80021a0 <adjustTimeRS232+0x274>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	801a      	strh	r2, [r3, #0]
	            attempt_count++;
 8002000:	4b70      	ldr	r3, [pc, #448]	@ (80021c4 <adjustTimeRS232+0x298>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b6e      	ldr	r3, [pc, #440]	@ (80021c4 <adjustTimeRS232+0x298>)
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e008      	b.n	8002020 <adjustTimeRS232+0xf4>

	        }
	        else{
	            current_mode = ADJUST_RS232_Mode_ERROR;
 800200e:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <adjustTimeRS232+0x290>)
 8002010:	2204      	movs	r2, #4
 8002012:	701a      	strb	r2, [r3, #0]
	            lcd_Clear(BLACK);
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe fe55 	bl	8000cc4 <lcd_Clear>
	            error_display_counter = 0;
 800201a:	4b6b      	ldr	r3, [pc, #428]	@ (80021c8 <adjustTimeRS232+0x29c>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
	        }

	    }

	    //Blink with 0.5 second
	    if (adjust_part == 0) {
 8002020:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <adjustTimeRS232+0x27c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d13a      	bne.n	800209e <adjustTimeRS232+0x172>
	    	if(counter_blink ==0 &&blink_flag ==0)
 8002028:	4b5b      	ldr	r3, [pc, #364]	@ (8002198 <adjustTimeRS232+0x26c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <adjustTimeRS232+0x136>
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <adjustTimeRS232+0x2a0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d114      	bne.n	8002062 <adjustTimeRS232+0x136>
	    	{
	    		displayTime();
 8002038:	f7ff fcac 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800203c:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <adjustTimeRS232+0x284>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	2318      	movs	r3, #24
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2300      	movs	r3, #0
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2302      	movs	r3, #2
 8002052:	2164      	movs	r1, #100	@ 0x64
 8002054:	2046      	movs	r0, #70	@ 0x46
 8002056:	f7fe ffa9 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =1;
 800205a:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <adjustTimeRS232+0x2a0>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e097      	b.n	8002192 <adjustTimeRS232+0x266>
	    	}
	    	else if (counter_blink ==0 &&blink_flag ==1){
 8002062:	4b4d      	ldr	r3, [pc, #308]	@ (8002198 <adjustTimeRS232+0x26c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8093 	bne.w	8002192 <adjustTimeRS232+0x266>
 800206c:	4b57      	ldr	r3, [pc, #348]	@ (80021cc <adjustTimeRS232+0x2a0>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 808e 	bne.w	8002192 <adjustTimeRS232+0x266>
	    		displayTime();
 8002076:	f7ff fc8d 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 800207a:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <adjustTimeRS232+0x284>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	2318      	movs	r3, #24
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2302      	movs	r3, #2
 800208e:	2164      	movs	r1, #100	@ 0x64
 8002090:	2046      	movs	r0, #70	@ 0x46
 8002092:	f7fe ff8b 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =0;
 8002096:	4b4d      	ldr	r3, [pc, #308]	@ (80021cc <adjustTimeRS232+0x2a0>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
	    		displayTime();
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
	    		blink_flag =0;
	    	}
	    }
}
 800209c:	e079      	b.n	8002192 <adjustTimeRS232+0x266>
	    else if (adjust_part == 1) {
 800209e:	4b42      	ldr	r3, [pc, #264]	@ (80021a8 <adjustTimeRS232+0x27c>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d138      	bne.n	8002118 <adjustTimeRS232+0x1ec>
	    	if(counter_blink ==0 &&blink_flag ==0)
 80020a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002198 <adjustTimeRS232+0x26c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <adjustTimeRS232+0x1b4>
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <adjustTimeRS232+0x2a0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d114      	bne.n	80020e0 <adjustTimeRS232+0x1b4>
	    		displayTime();
 80020b6:	f7ff fc6d 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80020ba:	4b3e      	ldr	r3, [pc, #248]	@ (80021b4 <adjustTimeRS232+0x288>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	2318      	movs	r3, #24
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2302      	movs	r3, #2
 80020d0:	2164      	movs	r1, #100	@ 0x64
 80020d2:	206e      	movs	r0, #110	@ 0x6e
 80020d4:	f7fe ff6a 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =1;
 80020d8:	4b3c      	ldr	r3, [pc, #240]	@ (80021cc <adjustTimeRS232+0x2a0>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e058      	b.n	8002192 <adjustTimeRS232+0x266>
	    	else if (counter_blink ==0 &&blink_flag ==1){
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <adjustTimeRS232+0x26c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d154      	bne.n	8002192 <adjustTimeRS232+0x266>
 80020e8:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <adjustTimeRS232+0x2a0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d150      	bne.n	8002192 <adjustTimeRS232+0x266>
	    		displayTime();
 80020f0:	f7ff fc50 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 80020f4:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <adjustTimeRS232+0x288>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	2318      	movs	r3, #24
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2302      	movs	r3, #2
 8002108:	2164      	movs	r1, #100	@ 0x64
 800210a:	206e      	movs	r0, #110	@ 0x6e
 800210c:	f7fe ff4e 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =0;
 8002110:	4b2e      	ldr	r3, [pc, #184]	@ (80021cc <adjustTimeRS232+0x2a0>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	e03c      	b.n	8002192 <adjustTimeRS232+0x266>
	    else if (adjust_part == 2) {
 8002118:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <adjustTimeRS232+0x27c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d138      	bne.n	8002192 <adjustTimeRS232+0x266>
	    	if(counter_blink ==0 &&blink_flag ==0)
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <adjustTimeRS232+0x26c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d118      	bne.n	800215a <adjustTimeRS232+0x22e>
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <adjustTimeRS232+0x2a0>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d114      	bne.n	800215a <adjustTimeRS232+0x22e>
	    		displayTime();
 8002130:	f7ff fc30 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <adjustTimeRS232+0x28c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	2318      	movs	r3, #24
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2300      	movs	r3, #0
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2302      	movs	r3, #2
 800214a:	2164      	movs	r1, #100	@ 0x64
 800214c:	2096      	movs	r0, #150	@ 0x96
 800214e:	f7fe ff2d 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =1;
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <adjustTimeRS232+0x2a0>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e01b      	b.n	8002192 <adjustTimeRS232+0x266>
	    	else if(counter_blink ==0 &&blink_flag ==1){
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <adjustTimeRS232+0x26c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d117      	bne.n	8002192 <adjustTimeRS232+0x266>
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <adjustTimeRS232+0x2a0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d113      	bne.n	8002192 <adjustTimeRS232+0x266>
	    		displayTime();
 800216a:	f7ff fc13 	bl	8001994 <displayTime>
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <adjustTimeRS232+0x28c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	2318      	movs	r3, #24
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2300      	movs	r3, #0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2302      	movs	r3, #2
 8002182:	2164      	movs	r1, #100	@ 0x64
 8002184:	2096      	movs	r0, #150	@ 0x96
 8002186:	f7fe ff11 	bl	8000fac <lcd_ShowIntNum>
	    		blink_flag =0;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <adjustTimeRS232+0x2a0>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
}
 8002190:	e7ff      	b.n	8002192 <adjustTimeRS232+0x266>
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000011c 	.word	0x2000011c
 800219c:	66666667 	.word	0x66666667
 80021a0:	20000006 	.word	0x20000006
 80021a4:	51eb851f 	.word	0x51eb851f
 80021a8:	20000130 	.word	0x20000130
 80021ac:	55555556 	.word	0x55555556
 80021b0:	2000005f 	.word	0x2000005f
 80021b4:	20000060 	.word	0x20000060
 80021b8:	20000061 	.word	0x20000061
 80021bc:	2000012f 	.word	0x2000012f
 80021c0:	2000012e 	.word	0x2000012e
 80021c4:	20000134 	.word	0x20000134
 80021c8:	20000138 	.word	0x20000138
 80021cc:	2000011d 	.word	0x2000011d

080021d0 <ProcessRingBufferData>:
void ProcessRingBufferData() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
    while (tail != head) {
 80021d6:	e0ca      	b.n	800236e <ProcessRingBufferData+0x19e>
        uint8_t data = ring_buffer[tail];
 80021d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <ProcessRingBufferData+0x1b8>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b6b      	ldr	r3, [pc, #428]	@ (800238c <ProcessRingBufferData+0x1bc>)
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	71fb      	strb	r3, [r7, #7]
        tail = (tail + 1) % RING_BUFFER_SIZE;
 80021e4:	4b68      	ldr	r3, [pc, #416]	@ (8002388 <ProcessRingBufferData+0x1b8>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4b69      	ldr	r3, [pc, #420]	@ (8002390 <ProcessRingBufferData+0x1c0>)
 80021ec:	fb83 1302 	smull	r1, r3, r3, r2
 80021f0:	1099      	asrs	r1, r3, #2
 80021f2:	17d3      	asrs	r3, r2, #31
 80021f4:	1ac9      	subs	r1, r1, r3
 80021f6:	460b      	mov	r3, r1
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	1ad1      	subs	r1, r2, r3
 8002200:	b28a      	uxth	r2, r1
 8002202:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <ProcessRingBufferData+0x1b8>)
 8002204:	801a      	strh	r2, [r3, #0]

        if (data >= '0' && data <= '9') {
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b2f      	cmp	r3, #47	@ 0x2f
 800220a:	f240 80b0 	bls.w	800236e <ProcessRingBufferData+0x19e>
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b39      	cmp	r3, #57	@ 0x39
 8002212:	f200 80ac 	bhi.w	800236e <ProcessRingBufferData+0x19e>
            temp_value = temp_value * 10 + (data - '0');
 8002216:	4b5f      	ldr	r3, [pc, #380]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4413      	add	r3, r2
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3b30      	subs	r3, #48	@ 0x30
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b59      	ldr	r3, [pc, #356]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 8002230:	701a      	strb	r2, [r3, #0]
            digit_count++;
 8002232:	4b59      	ldr	r3, [pc, #356]	@ (8002398 <ProcessRingBufferData+0x1c8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b57      	ldr	r3, [pc, #348]	@ (8002398 <ProcessRingBufferData+0x1c8>)
 800223c:	701a      	strb	r2, [r3, #0]

            if (digit_count == 2 || (adjust_part == 0 && temp_value > 2)) {
 800223e:	4b56      	ldr	r3, [pc, #344]	@ (8002398 <ProcessRingBufferData+0x1c8>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d009      	beq.n	800225a <ProcessRingBufferData+0x8a>
 8002246:	4b55      	ldr	r3, [pc, #340]	@ (800239c <ProcessRingBufferData+0x1cc>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 808f 	bne.w	800236e <ProcessRingBufferData+0x19e>
 8002250:	4b50      	ldr	r3, [pc, #320]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b02      	cmp	r3, #2
 8002256:	f240 808a 	bls.w	800236e <ProcessRingBufferData+0x19e>
                switch (adjust_part) {
 800225a:	4b50      	ldr	r3, [pc, #320]	@ (800239c <ProcessRingBufferData+0x1cc>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d030      	beq.n	80022c4 <ProcessRingBufferData+0xf4>
 8002262:	2b02      	cmp	r3, #2
 8002264:	dc43      	bgt.n	80022ee <ProcessRingBufferData+0x11e>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <ProcessRingBufferData+0xa0>
 800226a:	2b01      	cmp	r3, #1
 800226c:	d015      	beq.n	800229a <ProcessRingBufferData+0xca>
 800226e:	e03e      	b.n	80022ee <ProcessRingBufferData+0x11e>
                    case 0:
                        ds3231_hours = temp_value % 24;
 8002270:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <ProcessRingBufferData+0x1d0>)
 8002276:	fba3 1302 	umull	r1, r3, r3, r2
 800227a:	0919      	lsrs	r1, r3, #4
 800227c:	460b      	mov	r3, r1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	440b      	add	r3, r1
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b46      	ldr	r3, [pc, #280]	@ (80023a4 <ProcessRingBufferData+0x1d4>)
 800228a:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Hour Set\n", 9, 10);
 800228c:	230a      	movs	r3, #10
 800228e:	2209      	movs	r2, #9
 8002290:	4945      	ldr	r1, [pc, #276]	@ (80023a8 <ProcessRingBufferData+0x1d8>)
 8002292:	4846      	ldr	r0, [pc, #280]	@ (80023ac <ProcessRingBufferData+0x1dc>)
 8002294:	f003 ffdd 	bl	8006252 <HAL_UART_Transmit>
                        break;
 8002298:	e029      	b.n	80022ee <ProcessRingBufferData+0x11e>
                    case 1:
                        ds3231_min = temp_value % 60;
 800229a:	4b3e      	ldr	r3, [pc, #248]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <ProcessRingBufferData+0x1e0>)
 80022a0:	fba3 1302 	umull	r1, r3, r3, r2
 80022a4:	0959      	lsrs	r1, r3, #5
 80022a6:	460b      	mov	r3, r1
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a5b      	subs	r3, r3, r1
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <ProcessRingBufferData+0x1e4>)
 80022b4:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Minute Set\n", 11, 10);
 80022b6:	230a      	movs	r3, #10
 80022b8:	220b      	movs	r2, #11
 80022ba:	493f      	ldr	r1, [pc, #252]	@ (80023b8 <ProcessRingBufferData+0x1e8>)
 80022bc:	483b      	ldr	r0, [pc, #236]	@ (80023ac <ProcessRingBufferData+0x1dc>)
 80022be:	f003 ffc8 	bl	8006252 <HAL_UART_Transmit>
                        break;
 80022c2:	e014      	b.n	80022ee <ProcessRingBufferData+0x11e>
                    case 2:
                        ds3231_sec = temp_value % 60;
 80022c4:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <ProcessRingBufferData+0x1e0>)
 80022ca:	fba3 1302 	umull	r1, r3, r3, r2
 80022ce:	0959      	lsrs	r1, r3, #5
 80022d0:	460b      	mov	r3, r1
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a5b      	subs	r3, r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <ProcessRingBufferData+0x1ec>)
 80022de:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Second Set\n", 11, 10);
 80022e0:	230a      	movs	r3, #10
 80022e2:	220b      	movs	r2, #11
 80022e4:	4936      	ldr	r1, [pc, #216]	@ (80023c0 <ProcessRingBufferData+0x1f0>)
 80022e6:	4831      	ldr	r0, [pc, #196]	@ (80023ac <ProcessRingBufferData+0x1dc>)
 80022e8:	f003 ffb3 	bl	8006252 <HAL_UART_Transmit>
                        break;
 80022ec:	bf00      	nop
                }

                // Reset temporary variables on valid data
                attempt_count = 0;
 80022ee:	4b35      	ldr	r3, [pc, #212]	@ (80023c4 <ProcessRingBufferData+0x1f4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
                timeout_counter = 0;
 80022f4:	4b34      	ldr	r3, [pc, #208]	@ (80023c8 <ProcessRingBufferData+0x1f8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	801a      	strh	r2, [r3, #0]
                request_sent = 0;
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <ProcessRingBufferData+0x1fc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
                temp_value = 0;
 8002300:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <ProcessRingBufferData+0x1c4>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
                digit_count = 0;
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <ProcessRingBufferData+0x1c8>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]

                // Move to the next part
                adjust_part = (adjust_part + 1) % 3;
 800230c:	4b23      	ldr	r3, [pc, #140]	@ (800239c <ProcessRingBufferData+0x1cc>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <ProcessRingBufferData+0x200>)
 8002314:	fb83 3102 	smull	r3, r1, r3, r2
 8002318:	17d3      	asrs	r3, r2, #31
 800231a:	1ac9      	subs	r1, r1, r3
 800231c:	460b      	mov	r3, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	440b      	add	r3, r1
 8002322:	1ad1      	subs	r1, r2, r3
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <ProcessRingBufferData+0x1cc>)
 8002328:	701a      	strb	r2, [r3, #0]

                // If finished adjusting all parts, save and exit
                if (adjust_part == 0) {
 800232a:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <ProcessRingBufferData+0x1cc>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11d      	bne.n	800236e <ProcessRingBufferData+0x19e>
                    ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8002332:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <ProcessRingBufferData+0x1d4>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	2002      	movs	r0, #2
 800233a:	f7fe f981 	bl	8000640 <ds3231_Write>
                    ds3231_Write(ADDRESS_MIN, ds3231_min);
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <ProcessRingBufferData+0x1e4>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	2001      	movs	r0, #1
 8002346:	f7fe f97b 	bl	8000640 <ds3231_Write>
                    ds3231_Write(ADDRESS_SEC, ds3231_sec);
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <ProcessRingBufferData+0x1ec>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe f975 	bl	8000640 <ds3231_Write>
                    current_mode = DISPLAY_MODE;
 8002356:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <ProcessRingBufferData+0x204>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
                    lcd_Clear(BLACK);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fcb1 	bl	8000cc4 <lcd_Clear>
                    HAL_UART_Transmit(&huart1, (uint8_t *)"Time Adjusted\n", 14, 10);
 8002362:	230a      	movs	r3, #10
 8002364:	220e      	movs	r2, #14
 8002366:	491c      	ldr	r1, [pc, #112]	@ (80023d8 <ProcessRingBufferData+0x208>)
 8002368:	4810      	ldr	r0, [pc, #64]	@ (80023ac <ProcessRingBufferData+0x1dc>)
 800236a:	f003 ff72 	bl	8006252 <HAL_UART_Transmit>
    while (tail != head) {
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <ProcessRingBufferData+0x1b8>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <ProcessRingBufferData+0x20c>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	f47f af2e 	bne.w	80021d8 <ProcessRingBufferData+0x8>
                }
            }
        }
    }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000012c 	.word	0x2000012c
 800238c:	20000120 	.word	0x20000120
 8002390:	66666667 	.word	0x66666667
 8002394:	20000135 	.word	0x20000135
 8002398:	20000136 	.word	0x20000136
 800239c:	20000130 	.word	0x20000130
 80023a0:	aaaaaaab 	.word	0xaaaaaaab
 80023a4:	2000005f 	.word	0x2000005f
 80023a8:	08007544 	.word	0x08007544
 80023ac:	200001e8 	.word	0x200001e8
 80023b0:	88888889 	.word	0x88888889
 80023b4:	20000060 	.word	0x20000060
 80023b8:	08007550 	.word	0x08007550
 80023bc:	20000061 	.word	0x20000061
 80023c0:	0800755c 	.word	0x0800755c
 80023c4:	20000134 	.word	0x20000134
 80023c8:	20000006 	.word	0x20000006
 80023cc:	20000137 	.word	0x20000137
 80023d0:	55555556 	.word	0x55555556
 80023d4:	2000012f 	.word	0x2000012f
 80023d8:	08007568 	.word	0x08007568
 80023dc:	2000012a 	.word	0x2000012a

080023e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <Error_Handler+0x8>

080023ec <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <timer_init+0x10>)
 80023f2:	f003 faaf 	bl	8005954 <HAL_TIM_Base_Start_IT>
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000019c 	.word	0x2000019c

08002400 <setTimer2>:

void setTimer2(uint16_t duration){
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <setTimer2+0x2c>)
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <setTimer2+0x2c>)
 8002412:	881a      	ldrh	r2, [r3, #0]
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <setTimer2+0x30>)
 8002416:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <setTimer2+0x34>)
 800241a:	2200      	movs	r2, #0
 800241c:	801a      	strh	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000140 	.word	0x20000140
 8002430:	2000013e 	.word	0x2000013e
 8002434:	2000013c 	.word	0x2000013c

08002438 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002448:	d116      	bne.n	8002478 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d010      	beq.n	8002474 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800245c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002468:	2201      	movs	r2, #1
 800246a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002472:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002474:	f7ff f83e 	bl	80014f4 <led7_Scan>
	}
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000013e 	.word	0x2000013e
 8002484:	2000013c 	.word	0x2000013c
 8002488:	20000140 	.word	0x20000140

0800248c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002490:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <MX_SPI1_Init+0x64>)
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <MX_SPI1_Init+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <MX_SPI1_Init+0x64>)
 8002498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800249c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024d8:	220a      	movs	r2, #10
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024dc:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <MX_SPI1_Init+0x64>)
 80024de:	f002 fbfd 	bl	8004cdc <HAL_SPI_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024e8:	f7ff ff7a 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000144 	.word	0x20000144
 80024f4:	40013000 	.word	0x40013000

080024f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	@ (800257c <HAL_SPI_MspInit+0x84>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d12b      	bne.n	8002572 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a17      	ldr	r2, [pc, #92]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 8002524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a10      	ldr	r2, [pc, #64]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <HAL_SPI_MspInit+0x88>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002552:	2338      	movs	r3, #56	@ 0x38
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002562:	2305      	movs	r3, #5
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	@ (8002584 <HAL_SPI_MspInit+0x8c>)
 800256e:	f000 fc79 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	@ 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40013000 	.word	0x40013000
 8002580:	40023800 	.word	0x40023800
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a0f      	ldr	r2, [pc, #60]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <NMI_Handler+0x4>

080025e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <MemManage_Handler+0x4>

080025f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <BusFault_Handler+0x4>

080025f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <UsageFault_Handler+0x4>

08002600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262e:	f000 fa31 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <TIM2_IRQHandler+0x10>)
 800263e:	f003 f9f9 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000019c 	.word	0x2000019c

0800264c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <USART1_IRQHandler+0x10>)
 8002652:	f003 fec1 	bl	80063d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200001e8 	.word	0x200001e8

08002660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <SystemInit+0x20>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <SystemInit+0x20>)
 800266c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026aa:	f240 3247 	movw	r2, #839	@ 0x347
 80026ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026b8:	2263      	movs	r2, #99	@ 0x63
 80026ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026c8:	4813      	ldr	r0, [pc, #76]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026ca:	f003 f8f3 	bl	80058b4 <HAL_TIM_Base_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026d4:	f7ff fe84 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026e6:	f003 faad 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026f0:	f7ff fe76 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	@ (8002718 <MX_TIM2_Init+0x94>)
 8002702:	f003 fcc9 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800270c:	f7ff fe68 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000019c 	.word	0x2000019c

0800271c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d115      	bne.n	800275a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <HAL_TIM_Base_MspInit+0x48>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_TIM_Base_MspInit+0x48>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_TIM_Base_MspInit+0x48>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	201c      	movs	r0, #28
 8002750:	f000 fabf 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002754:	201c      	movs	r0, #28
 8002756:	f000 fad8 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <uart_init_rs232>:
uint8_t receive_buffer1 = 0;
uint8_t msg[100];

extern uint16_t head, tail;
extern uint8_t data_available_flag;
void uart_init_rs232(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800276c:	2201      	movs	r2, #1
 800276e:	4903      	ldr	r1, [pc, #12]	@ (800277c <uart_init_rs232+0x14>)
 8002770:	4803      	ldr	r0, [pc, #12]	@ (8002780 <uart_init_rs232+0x18>)
 8002772:	f003 fe00 	bl	8006376 <HAL_UART_Receive_IT>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001e4 	.word	0x200001e4
 8002780:	200001e8 	.word	0x200001e8

08002784 <HAL_UART_RxCpltCallback>:
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <HAL_UART_RxCpltCallback+0x88>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d136      	bne.n	8002804 <HAL_UART_RxCpltCallback+0x80>
        // Add the received byte to the ring buffer
        ring_buffer[head] = receive_buffer1;
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_UART_RxCpltCallback+0x8c>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_UART_RxCpltCallback+0x90>)
 800279e:	7819      	ldrb	r1, [r3, #0]
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_UART_RxCpltCallback+0x94>)
 80027a2:	5499      	strb	r1, [r3, r2]
        head = (head + 1) % RING_BUFFER_SIZE;
 80027a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <HAL_UART_RxCpltCallback+0x8c>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <HAL_UART_RxCpltCallback+0x98>)
 80027ac:	fb83 1302 	smull	r1, r3, r3, r2
 80027b0:	1099      	asrs	r1, r3, #2
 80027b2:	17d3      	asrs	r3, r2, #31
 80027b4:	1ac9      	subs	r1, r1, r3
 80027b6:	460b      	mov	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	1ad1      	subs	r1, r2, r3
 80027c0:	b28a      	uxth	r2, r1
 80027c2:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_UART_RxCpltCallback+0x8c>)
 80027c4:	801a      	strh	r2, [r3, #0]

        // Check if the buffer is full (head == tail indicates overflow)
        if (head == tail) {
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_UART_RxCpltCallback+0x8c>)
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_UART_RxCpltCallback+0x9c>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d110      	bne.n	80027f4 <HAL_UART_RxCpltCallback+0x70>
            // Handle overflow: adjust tail to discard oldest data
            tail = (tail + 1) % RING_BUFFER_SIZE;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <HAL_UART_RxCpltCallback+0x9c>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_UART_RxCpltCallback+0x98>)
 80027da:	fb83 1302 	smull	r1, r3, r3, r2
 80027de:	1099      	asrs	r1, r3, #2
 80027e0:	17d3      	asrs	r3, r2, #31
 80027e2:	1ac9      	subs	r1, r1, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	1ad1      	subs	r1, r2, r3
 80027ee:	b28a      	uxth	r2, r1
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_UART_RxCpltCallback+0x9c>)
 80027f2:	801a      	strh	r2, [r3, #0]
        }

        // Set flag to indicate new data is available for processing
        data_available_flag = 1;
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_UART_RxCpltCallback+0xa0>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]

        // Re-enable UART interrupt for the next byte
        HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	4905      	ldr	r1, [pc, #20]	@ (8002814 <HAL_UART_RxCpltCallback+0x90>)
 80027fe:	480a      	ldr	r0, [pc, #40]	@ (8002828 <HAL_UART_RxCpltCallback+0xa4>)
 8002800:	f003 fdb9 	bl	8006376 <HAL_UART_Receive_IT>
    }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40011000 	.word	0x40011000
 8002810:	2000012a 	.word	0x2000012a
 8002814:	200001e4 	.word	0x200001e4
 8002818:	20000120 	.word	0x20000120
 800281c:	66666667 	.word	0x66666667
 8002820:	2000012c 	.word	0x2000012c
 8002824:	2000012e 	.word	0x2000012e
 8002828:	200001e8 	.word	0x200001e8

0800282c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <MX_USART1_UART_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002864:	f003 fca8 	bl	80061b8 <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800286e:	f7ff fdb7 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200001e8 	.word	0x200001e8
 800287c:	40011000 	.word	0x40011000

08002880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1d      	ldr	r2, [pc, #116]	@ (8002914 <HAL_UART_MspInit+0x94>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d134      	bne.n	800290c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_UART_MspInit+0x98>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ec:	2307      	movs	r3, #7
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4619      	mov	r1, r3
 80028f6:	4809      	ldr	r0, [pc, #36]	@ (800291c <HAL_UART_MspInit+0x9c>)
 80028f8:	f000 fab4 	bl	8002e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	2025      	movs	r0, #37	@ 0x25
 8002902:	f000 f9e6 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002906:	2025      	movs	r0, #37	@ 0x25
 8002908:	f000 f9ff 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800290c:	bf00      	nop
 800290e:	3728      	adds	r7, #40	@ 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40011000 	.word	0x40011000
 8002918:	40023800 	.word	0x40023800
 800291c:	40020000 	.word	0x40020000

08002920 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4413      	add	r3, r2
 8002944:	b2db      	uxtb	r3, r3
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <DEC2BCD+0x44>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	b258      	sxtb	r0, r3
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <DEC2BCD+0x44>)
 8002972:	fba3 1302 	umull	r1, r3, r3, r2
 8002976:	08d9      	lsrs	r1, r3, #3
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	b25b      	sxtb	r3, r3
 8002986:	4303      	orrs	r3, r0
 8002988:	b25b      	sxtb	r3, r3
 800298a:	b2db      	uxtb	r3, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	cccccccd 	.word	0xcccccccd

0800299c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029a0:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029a2:	490e      	ldr	r1, [pc, #56]	@ (80029dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029a4:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b6:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029b8:	4c0b      	ldr	r4, [pc, #44]	@ (80029e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029c6:	f7ff fe4b 	bl	8002660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ca:	f004 fd41 	bl	8007450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ce:	f7fe fe1d 	bl	800160c <main>
  bx  lr    
 80029d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80029e0:	0800a520 	.word	0x0800a520
  ldr r2, =_sbss
 80029e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80029e8:	20000230 	.word	0x20000230

080029ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a30 <HAL_Init+0x40>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_Init+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_Init+0x40>)
 8002a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <HAL_Init+0x40>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <HAL_Init+0x40>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 f94f 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f000 f808 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a24:	f7ff fdb0 	bl	8002588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <HAL_InitTick+0x54>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <HAL_InitTick+0x58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f967 	bl	8002d26 <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f000 f92f 	bl	8002cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	@ (8002a90 <HAL_InitTick+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000014 	.word	0x20000014
 8002a90:	20000010 	.word	0x20000010

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014
 8002ab8:	2000022c 	.word	0x2000022c

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000022c 	.word	0x2000022c

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000014 	.word	0x20000014

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	@ (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	@ (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	@ (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	@ 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f7ff ff8e 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff29 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff3e 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff8e 	bl	8002c10 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff31 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff feb6 	bl	8002abc <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d008      	beq.n	8002d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e052      	b.n	8002e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0216 	bic.w	r2, r2, #22
 8002d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <HAL_DMA_Abort+0x62>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc0:	e013      	b.n	8002dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc2:	f7ff fe7b 	bl	8002abc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d90c      	bls.n	8002dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e015      	b.n	8002e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e4      	bne.n	8002dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	223f      	movs	r2, #63	@ 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d004      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2280      	movs	r2, #128	@ 0x80
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e00c      	b.n	8002e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e16b      	b.n	8003158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 815a 	bne.w	8003152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d005      	beq.n	8002eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d130      	bne.n	8002f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 0201 	and.w	r2, r3, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d017      	beq.n	8002f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d123      	bne.n	8002fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80b4 	beq.w	8003152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <HAL_GPIO_Init+0x30c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8003170 <HAL_GPIO_Init+0x30c>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8003170 <HAL_GPIO_Init+0x30c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003006:	4a5b      	ldr	r2, [pc, #364]	@ (8003174 <HAL_GPIO_Init+0x310>)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a52      	ldr	r2, [pc, #328]	@ (8003178 <HAL_GPIO_Init+0x314>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02b      	beq.n	800308a <HAL_GPIO_Init+0x226>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a51      	ldr	r2, [pc, #324]	@ (800317c <HAL_GPIO_Init+0x318>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d025      	beq.n	8003086 <HAL_GPIO_Init+0x222>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a50      	ldr	r2, [pc, #320]	@ (8003180 <HAL_GPIO_Init+0x31c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01f      	beq.n	8003082 <HAL_GPIO_Init+0x21e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4f      	ldr	r2, [pc, #316]	@ (8003184 <HAL_GPIO_Init+0x320>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d019      	beq.n	800307e <HAL_GPIO_Init+0x21a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4e      	ldr	r2, [pc, #312]	@ (8003188 <HAL_GPIO_Init+0x324>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0x216>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4d      	ldr	r2, [pc, #308]	@ (800318c <HAL_GPIO_Init+0x328>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00d      	beq.n	8003076 <HAL_GPIO_Init+0x212>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_GPIO_Init+0x32c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <HAL_GPIO_Init+0x20e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <HAL_GPIO_Init+0x330>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_GPIO_Init+0x20a>
 800306a:	2307      	movs	r3, #7
 800306c:	e00e      	b.n	800308c <HAL_GPIO_Init+0x228>
 800306e:	2308      	movs	r3, #8
 8003070:	e00c      	b.n	800308c <HAL_GPIO_Init+0x228>
 8003072:	2306      	movs	r3, #6
 8003074:	e00a      	b.n	800308c <HAL_GPIO_Init+0x228>
 8003076:	2305      	movs	r3, #5
 8003078:	e008      	b.n	800308c <HAL_GPIO_Init+0x228>
 800307a:	2304      	movs	r3, #4
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x228>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_Init+0x228>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_Init+0x228>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x228>
 800308a:	2300      	movs	r3, #0
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800309c:	4935      	ldr	r1, [pc, #212]	@ (8003174 <HAL_GPIO_Init+0x310>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003198 <HAL_GPIO_Init+0x334>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ce:	4a32      	ldr	r2, [pc, #200]	@ (8003198 <HAL_GPIO_Init+0x334>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <HAL_GPIO_Init+0x334>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030f8:	4a27      	ldr	r2, [pc, #156]	@ (8003198 <HAL_GPIO_Init+0x334>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <HAL_GPIO_Init+0x334>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003122:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_GPIO_Init+0x334>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_GPIO_Init+0x334>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_GPIO_Init+0x334>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3301      	adds	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	f67f ae90 	bls.w	8002e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40013800 	.word	0x40013800
 8003178:	40020000 	.word	0x40020000
 800317c:	40020400 	.word	0x40020400
 8003180:	40020800 	.word	0x40020800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	40021000 	.word	0x40021000
 800318c:	40021400 	.word	0x40021400
 8003190:	40021800 	.word	0x40021800
 8003194:	40021c00 	.word	0x40021c00
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031b8:	e003      	b.n	80031c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	041a      	lsls	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	619a      	str	r2, [r3, #24]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e12b      	b.n	800343a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fc9e 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	@ 0x24
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003234:	f001 fd2a 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a81      	ldr	r2, [pc, #516]	@ (8003444 <HAL_I2C_Init+0x274>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d807      	bhi.n	8003254 <HAL_I2C_Init+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a80      	ldr	r2, [pc, #512]	@ (8003448 <HAL_I2C_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e006      	b.n	8003262 <HAL_I2C_Init+0x92>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a7d      	ldr	r2, [pc, #500]	@ (800344c <HAL_I2C_Init+0x27c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0e7      	b.n	800343a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a78      	ldr	r2, [pc, #480]	@ (8003450 <HAL_I2C_Init+0x280>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a6a      	ldr	r2, [pc, #424]	@ (8003444 <HAL_I2C_Init+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d802      	bhi.n	80032a4 <HAL_I2C_Init+0xd4>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e009      	b.n	80032b8 <HAL_I2C_Init+0xe8>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	4a69      	ldr	r2, [pc, #420]	@ (8003454 <HAL_I2C_Init+0x284>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	3301      	adds	r3, #1
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	495c      	ldr	r1, [pc, #368]	@ (8003444 <HAL_I2C_Init+0x274>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d819      	bhi.n	800330c <HAL_I2C_Init+0x13c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032ec:	400b      	ands	r3, r1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_I2C_Init+0x138>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e59      	subs	r1, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	e051      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003308:	2304      	movs	r3, #4
 800330a:	e04f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_I2C_Init+0x168>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e012      	b.n	800335e <HAL_I2C_Init+0x18e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	0099      	lsls	r1, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x196>
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10e      	bne.n	800338c <HAL_I2C_Init+0x1bc>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e58      	subs	r0, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	440b      	add	r3, r1
 800337c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003380:	3301      	adds	r3, #1
 8003382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6911      	ldr	r1, [r2, #16]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	000186a0 	.word	0x000186a0
 8003448:	001e847f 	.word	0x001e847f
 800344c:	003d08ff 	.word	0x003d08ff
 8003450:	431bde83 	.word	0x431bde83
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003472:	f7ff fb23 	bl	8002abc <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	f040 80d9 	bne.w	8003638 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2319      	movs	r3, #25
 800348c:	2201      	movs	r2, #1
 800348e:	496d      	ldr	r1, [pc, #436]	@ (8003644 <HAL_I2C_Mem_Write+0x1ec>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fdad 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	e0cc      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Write+0x56>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0c5      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	@ 0x21
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2240      	movs	r2, #64	@ 0x40
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a4d      	ldr	r2, [pc, #308]	@ (8003648 <HAL_I2C_Mem_Write+0x1f0>)
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003516:	88f8      	ldrh	r0, [r7, #6]
 8003518:	893a      	ldrh	r2, [r7, #8]
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fbe4 	bl	8003cf4 <I2C_RequestMemoryWrite>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d052      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e081      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fe2e 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b04      	cmp	r3, #4
 800354c:	d107      	bne.n	800355e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06b      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_I2C_Mem_Write+0x180>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1aa      	bne.n	8003536 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fe1a 	bl	800421e <I2C_WaitOnBTFFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d107      	bne.n	8003608 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e016      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00100002 	.word	0x00100002
 8003648:	ffff0000 	.word	0xffff0000

0800364c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	@ 0x30
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7ff fa29 	bl	8002abc <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	f040 8208 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2319      	movs	r3, #25
 8003680:	2201      	movs	r2, #1
 8003682:	497b      	ldr	r1, [pc, #492]	@ (8003870 <HAL_I2C_Mem_Read+0x224>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fcb3 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	e1fb      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_I2C_Mem_Read+0x56>
 800369e:	2302      	movs	r3, #2
 80036a0:	e1f4      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d007      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2222      	movs	r2, #34	@ 0x22
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2240      	movs	r2, #64	@ 0x40
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a5b      	ldr	r2, [pc, #364]	@ (8003874 <HAL_I2C_Mem_Read+0x228>)
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800370a:	88f8      	ldrh	r0, [r7, #6]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4603      	mov	r3, r0
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb80 	bl	8003e20 <I2C_RequestMemoryRead>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1b0      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d113      	bne.n	800375a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e184      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375e:	2b01      	cmp	r3, #1
 8003760:	d11b      	bne.n	800379a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e164      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d11b      	bne.n	80037da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	e144      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037f0:	e138      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	f200 80f1 	bhi.w	80039de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b01      	cmp	r3, #1
 8003802:	d123      	bne.n	800384c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fd49 	bl	80042a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e139      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800384a:	e10b      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	2b02      	cmp	r3, #2
 8003852:	d14e      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	2200      	movs	r2, #0
 800385c:	4906      	ldr	r1, [pc, #24]	@ (8003878 <HAL_I2C_Mem_Read+0x22c>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fbc6 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e10e      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
 800386e:	bf00      	nop
 8003870:	00100002 	.word	0x00100002
 8003874:	ffff0000 	.word	0xffff0000
 8003878:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038f0:	e0b8      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	2200      	movs	r2, #0
 80038fa:	4966      	ldr	r1, [pc, #408]	@ (8003a94 <HAL_I2C_Mem_Read+0x448>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fb77 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0bf      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	494f      	ldr	r1, [pc, #316]	@ (8003a94 <HAL_I2C_Mem_Read+0x448>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fb49 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e091      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039dc:	e042      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fc5c 	bl	80042a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e04c      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d118      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f47f aec2 	bne.w	80037f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	00010004 	.word	0x00010004

08003a98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	@ 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff f808 	bl	8002abc <HAL_GetTick>
 8003aac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 8111 	bne.w	8003ce2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4988      	ldr	r1, [pc, #544]	@ (8003cec <HAL_I2C_IsDeviceReady+0x254>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fa90 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e104      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2C_IsDeviceReady+0x50>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0fd      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d007      	beq.n	8003b0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2224      	movs	r2, #36	@ 0x24
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a70      	ldr	r2, [pc, #448]	@ (8003cf0 <HAL_I2C_IsDeviceReady+0x258>)
 8003b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa4e 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b68:	d103      	bne.n	8003b72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0b6      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe ff99 	bl	8002abc <HAL_GetTick>
 8003b8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bba:	e025      	b.n	8003c08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7fe ff7e 	bl	8002abc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <HAL_I2C_IsDeviceReady+0x13a>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	22a0      	movs	r2, #160	@ 0xa0
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c12:	d005      	beq.n	8003c20 <HAL_I2C_IsDeviceReady+0x188>
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_I2C_IsDeviceReady+0x188>
 8003c1a:	7dbb      	ldrb	r3, [r7, #22]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0cd      	beq.n	8003bbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d129      	bne.n	8003c8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2319      	movs	r3, #25
 8003c62:	2201      	movs	r2, #1
 8003c64:	4921      	ldr	r1, [pc, #132]	@ (8003cec <HAL_I2C_IsDeviceReady+0x254>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9c2 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e036      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e02c      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2319      	movs	r3, #25
 8003caa:	2201      	movs	r2, #1
 8003cac:	490f      	ldr	r1, [pc, #60]	@ (8003cec <HAL_I2C_IsDeviceReady+0x254>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f99e 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e012      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	f4ff af32 	bcc.w	8003b32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	00100002 	.word	0x00100002
 8003cf0:	ffff0000 	.word	0xffff0000

08003cf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	460b      	mov	r3, r1
 8003d08:	813b      	strh	r3, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f960 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d44:	d103      	bne.n	8003d4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e05f      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	492d      	ldr	r1, [pc, #180]	@ (8003e1c <I2C_RequestMemoryWrite+0x128>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f998 	bl	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04c      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa02 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02b      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d105      	bne.n	8003dcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	e021      	b.n	8003e10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ddc:	6a39      	ldr	r1, [r7, #32]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f9dc 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d107      	bne.n	8003e02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e005      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e06:	893b      	ldrh	r3, [r7, #8]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	00010002 	.word	0x00010002

08003e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8c2 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e80:	d103      	bne.n	8003e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0aa      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	4952      	ldr	r1, [pc, #328]	@ (8003fec <I2C_RequestMemoryRead+0x1cc>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f8fa 	bl	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e097      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f964 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e076      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e021      	b.n	8003f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f93e 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e050      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4e:	6a39      	ldr	r1, [r7, #32]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f923 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d107      	bne.n	8003f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e035      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f82b 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fae:	d103      	bne.n	8003fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e013      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	4906      	ldr	r1, [pc, #24]	@ (8003fec <I2C_RequestMemoryRead+0x1cc>)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f863 	bl	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	e025      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d021      	beq.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe fd57 	bl	8002abc <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e023      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10d      	bne.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	e00c      	b.n	800408e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0b6      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ac:	e051      	b.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040bc:	d123      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e046      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d021      	beq.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe fcd5 	bl	8002abc <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e020      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10c      	bne.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e00b      	b.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	43da      	mvns	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d18d      	bne.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a8:	e02d      	b.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f8ce 	bl	800434c <I2C_IsAcknowledgeFailed>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02d      	b.n	8004216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d021      	beq.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe fc7b 	bl	8002abc <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e007      	b.n	8004216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	2b80      	cmp	r3, #128	@ 0x80
 8004212:	d1ca      	bne.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800422a:	e02d      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f88d 	bl	800434c <I2C_IsAcknowledgeFailed>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e02d      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d021      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe fc3a 	bl	8002abc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d1ca      	bne.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ac:	e042      	b.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d119      	bne.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0210 	mvn.w	r2, #16
 80042c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e029      	b.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fe fbe4 	bl	8002abc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e007      	b.n	8004344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	2b40      	cmp	r3, #64	@ 0x40
 8004340:	d1b5      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d11b      	bne.n	800439c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800436c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e267      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d075      	beq.n	80044b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	4b88      	ldr	r3, [pc, #544]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d00c      	beq.n	80043f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d6:	4b85      	ldr	r3, [pc, #532]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d112      	bne.n	8004408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e2:	4b82      	ldr	r3, [pc, #520]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ee:	d10b      	bne.n	8004408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	4b7e      	ldr	r3, [pc, #504]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05b      	beq.n	80044b4 <HAL_RCC_OscConfig+0x108>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d157      	bne.n	80044b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e242      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	d106      	bne.n	8004420 <HAL_RCC_OscConfig+0x74>
 8004412:	4b76      	ldr	r3, [pc, #472]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a75      	ldr	r2, [pc, #468]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e01d      	b.n	800445c <HAL_RCC_OscConfig+0xb0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004428:	d10c      	bne.n	8004444 <HAL_RCC_OscConfig+0x98>
 800442a:	4b70      	ldr	r3, [pc, #448]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6f      	ldr	r2, [pc, #444]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b6d      	ldr	r3, [pc, #436]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6c      	ldr	r2, [pc, #432]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e00b      	b.n	800445c <HAL_RCC_OscConfig+0xb0>
 8004444:	4b69      	ldr	r3, [pc, #420]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a68      	ldr	r2, [pc, #416]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800444a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b66      	ldr	r3, [pc, #408]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a65      	ldr	r2, [pc, #404]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d013      	beq.n	800448c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe fb2a 	bl	8002abc <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446c:	f7fe fb26 	bl	8002abc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e207      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b5b      	ldr	r3, [pc, #364]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0xc0>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fe fb16 	bl	8002abc <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f7fe fb12 	bl	8002abc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	@ 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1f3      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	4b51      	ldr	r3, [pc, #324]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0xe8>
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d063      	beq.n	800458a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	4b4a      	ldr	r3, [pc, #296]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ce:	4b47      	ldr	r3, [pc, #284]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d11c      	bne.n	8004514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b44      	ldr	r3, [pc, #272]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d116      	bne.n	8004514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e6:	4b41      	ldr	r3, [pc, #260]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_RCC_OscConfig+0x152>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e1c7      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b3b      	ldr	r3, [pc, #236]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4937      	ldr	r1, [pc, #220]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004512:	e03a      	b.n	800458a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451c:	4b34      	ldr	r3, [pc, #208]	@ (80045f0 <HAL_RCC_OscConfig+0x244>)
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fe facb 	bl	8002abc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452a:	f7fe fac7 	bl	8002abc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1a8      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b28      	ldr	r3, [pc, #160]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4925      	ldr	r1, [pc, #148]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]
 800455c:	e015      	b.n	800458a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455e:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <HAL_RCC_OscConfig+0x244>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe faaa 	bl	8002abc <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456c:	f7fe faa6 	bl	8002abc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e187      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d036      	beq.n	8004604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459e:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <HAL_RCC_OscConfig+0x248>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fe fa8a 	bl	8002abc <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fe fa86 	bl	8002abc <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e167      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_RCC_OscConfig+0x240>)
 80045c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x200>
 80045ca:	e01b      	b.n	8004604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <HAL_RCC_OscConfig+0x248>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d2:	f7fe fa73 	bl	8002abc <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	e00e      	b.n	80045f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045da:	f7fe fa6f 	bl	8002abc <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d907      	bls.n	80045f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e150      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470000 	.word	0x42470000
 80045f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	4b88      	ldr	r3, [pc, #544]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80045fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ea      	bne.n	80045da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8097 	beq.w	8004740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b81      	ldr	r3, [pc, #516]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	4a7c      	ldr	r2, [pc, #496]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	@ 0x40
 8004632:	4b7a      	ldr	r3, [pc, #488]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004642:	4b77      	ldr	r3, [pc, #476]	@ (8004820 <HAL_RCC_OscConfig+0x474>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464e:	4b74      	ldr	r3, [pc, #464]	@ (8004820 <HAL_RCC_OscConfig+0x474>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a73      	ldr	r2, [pc, #460]	@ (8004820 <HAL_RCC_OscConfig+0x474>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fe fa2f 	bl	8002abc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fe fa2b 	bl	8002abc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e10c      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b6a      	ldr	r3, [pc, #424]	@ (8004820 <HAL_RCC_OscConfig+0x474>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x2ea>
 8004688:	4b64      	ldr	r3, [pc, #400]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a63      	ldr	r2, [pc, #396]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x324>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x30c>
 800469e:	4b5f      	ldr	r3, [pc, #380]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	4a5e      	ldr	r2, [pc, #376]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046aa:	4b5c      	ldr	r3, [pc, #368]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	4a5b      	ldr	r2, [pc, #364]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b6:	e00b      	b.n	80046d0 <HAL_RCC_OscConfig+0x324>
 80046b8:	4b58      	ldr	r3, [pc, #352]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	4a57      	ldr	r2, [pc, #348]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	4a54      	ldr	r2, [pc, #336]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fe f9f0 	bl	8002abc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fe f9ec 	bl	8002abc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0cb      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	4b49      	ldr	r3, [pc, #292]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ee      	beq.n	80046e0 <HAL_RCC_OscConfig+0x334>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fe f9da 	bl	8002abc <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fe f9d6 	bl	8002abc <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e0b5      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ee      	bne.n	800470c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004734:	4b39      	ldr	r3, [pc, #228]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	4a38      	ldr	r2, [pc, #224]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 800473a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800473e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a1 	beq.w	800488c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474a:	4b34      	ldr	r3, [pc, #208]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b08      	cmp	r3, #8
 8004754:	d05c      	beq.n	8004810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d141      	bne.n	80047e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b31      	ldr	r3, [pc, #196]	@ (8004824 <HAL_RCC_OscConfig+0x478>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fe f9aa 	bl	8002abc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe f9a6 	bl	8002abc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e087      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	491b      	ldr	r1, [pc, #108]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x478>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe f97f 	bl	8002abc <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe f97b 	bl	8002abc <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e05c      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d4:	4b11      	ldr	r3, [pc, #68]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x416>
 80047e0:	e054      	b.n	800488c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <HAL_RCC_OscConfig+0x478>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fe f968 	bl	8002abc <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fe f964 	bl	8002abc <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e045      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_RCC_OscConfig+0x470>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x444>
 800480e:	e03d      	b.n	800488c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d107      	bne.n	8004828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e038      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000
 8004824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004828:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <HAL_RCC_OscConfig+0x4ec>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d028      	beq.n	8004888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d121      	bne.n	8004888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d11a      	bne.n	8004888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004858:	4013      	ands	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800485e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004860:	4293      	cmp	r3, r2
 8004862:	d111      	bne.n	8004888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	3b01      	subs	r3, #1
 8004872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800

0800489c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0cc      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b0:	4b68      	ldr	r3, [pc, #416]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d90c      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b65      	ldr	r3, [pc, #404]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b63      	ldr	r3, [pc, #396]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0b8      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f0:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a58      	ldr	r2, [pc, #352]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004908:	4b53      	ldr	r3, [pc, #332]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a52      	ldr	r2, [pc, #328]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004914:	4b50      	ldr	r3, [pc, #320]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	494d      	ldr	r1, [pc, #308]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d044      	beq.n	80049bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d119      	bne.n	800497a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e07f      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d003      	beq.n	800495a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004956:	2b03      	cmp	r3, #3
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06f      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e067      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497a:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f023 0203 	bic.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4934      	ldr	r1, [pc, #208]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800498c:	f7fe f896 	bl	8002abc <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	e00a      	b.n	80049aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004994:	f7fe f892 	bl	8002abc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e04f      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 020c 	and.w	r2, r3, #12
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d1eb      	bne.n	8004994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049bc:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d20c      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e032      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f0:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4916      	ldr	r1, [pc, #88]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0e:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	490e      	ldr	r1, [pc, #56]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a22:	f000 f821 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	490a      	ldr	r1, [pc, #40]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c0>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	4a09      	ldr	r2, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a3e:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fff6 	bl	8002a34 <HAL_InitTick>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023c00 	.word	0x40023c00
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	0800a4f8 	.word	0x0800a4f8
 8004a60:	2000000c 	.word	0x2000000c
 8004a64:	20000010 	.word	0x20000010

08004a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a6c:	b094      	sub	sp, #80	@ 0x50
 8004a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a74:	2300      	movs	r3, #0
 8004a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a78:	2300      	movs	r3, #0
 8004a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a80:	4b79      	ldr	r3, [pc, #484]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	f200 80e1 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x34>
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9a:	e0db      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a9c:	4b73      	ldr	r3, [pc, #460]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004aa0:	e0db      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa2:	4b73      	ldr	r3, [pc, #460]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa6:	e0d8      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d063      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ada:	4622      	mov	r2, r4
 8004adc:	462b      	mov	r3, r5
 8004ade:	f04f 0000 	mov.w	r0, #0
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	0159      	lsls	r1, r3, #5
 8004ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aec:	0150      	lsls	r0, r2, #5
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4621      	mov	r1, r4
 8004af4:	1a51      	subs	r1, r2, r1
 8004af6:	6139      	str	r1, [r7, #16]
 8004af8:	4629      	mov	r1, r5
 8004afa:	eb63 0301 	sbc.w	r3, r3, r1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	018b      	lsls	r3, r1, #6
 8004b10:	4651      	mov	r1, sl
 8004b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b16:	4651      	mov	r1, sl
 8004b18:	018a      	lsls	r2, r1, #6
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b20:	4659      	mov	r1, fp
 8004b22:	eb63 0901 	sbc.w	r9, r3, r1
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3a:	4690      	mov	r8, r2
 8004b3c:	4699      	mov	r9, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	eb18 0303 	adds.w	r3, r8, r3
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	462b      	mov	r3, r5
 8004b48:	eb49 0303 	adc.w	r3, r9, r3
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	024b      	lsls	r3, r1, #9
 8004b5e:	4621      	mov	r1, r4
 8004b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b64:	4621      	mov	r1, r4
 8004b66:	024a      	lsls	r2, r1, #9
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6e:	2200      	movs	r2, #0
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b78:	f7fb fb2e 	bl	80001d8 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4613      	mov	r3, r2
 8004b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b84:	e058      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b38      	ldr	r3, [pc, #224]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	4611      	mov	r1, r2
 8004b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	f04f 0000 	mov.w	r0, #0
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	0159      	lsls	r1, r3, #5
 8004bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb2:	0150      	lsls	r0, r2, #5
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	00eb      	lsls	r3, r5, #3
 8004bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bee:	00e2      	lsls	r2, r4, #3
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	461d      	mov	r5, r3
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	18e3      	adds	r3, r4, r3
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	eb45 0303 	adc.w	r3, r5, r3
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0e:	4629      	mov	r1, r5
 8004c10:	028b      	lsls	r3, r1, #10
 8004c12:	4621      	mov	r1, r4
 8004c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c18:	4621      	mov	r1, r4
 8004c1a:	028a      	lsls	r2, r1, #10
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c22:	2200      	movs	r2, #0
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	61fa      	str	r2, [r7, #28]
 8004c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2c:	f7fb fad4 	bl	80001d8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3750      	adds	r7, #80	@ 0x50
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	007a1200 	.word	0x007a1200

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	@ (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800a508 	.word	0x0800a508

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	@ (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800a508 	.word	0x0800a508

08004cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07b      	b.n	8004de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfe:	d009      	beq.n	8004d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	61da      	str	r2, [r3, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd fbe2 	bl	80024f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0104 	and.w	r1, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	f003 0210 	and.w	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b088      	sub	sp, #32
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_Transmit+0x22>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e126      	b.n	800505e <HAL_SPI_Transmit+0x270>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e18:	f7fd fe50 	bl	8002abc <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e32:	e10b      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0x52>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e44:	e102      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8c:	d10f      	bne.n	8004eae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed4:	d14b      	bne.n	8004f6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Transmit+0xf6>
 8004ede:	8afb      	ldrh	r3, [r7, #22]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d13e      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f08:	e02b      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d112      	bne.n	8004f3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	881a      	ldrh	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f3c:	e011      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3e:	f7fd fdbd 	bl	8002abc <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_Transmit+0x168>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_Transmit+0x16e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f60:	e074      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ce      	bne.n	8004f0a <HAL_SPI_Transmit+0x11c>
 8004f6c:	e04c      	b.n	8005008 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_SPI_Transmit+0x18e>
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d140      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fa2:	e02c      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d113      	bne.n	8004fda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fd8:	e011      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fda:	f7fd fd6f 	bl	8002abc <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d803      	bhi.n	8004ff2 <HAL_SPI_Transmit+0x204>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_Transmit+0x20a>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ffc:	e026      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1cd      	bne.n	8004fa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fbcb 	bl	80057a8 <SPI_EndRxTxTransaction>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e000      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

error:
 800504a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b088      	sub	sp, #32
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005082:	d112      	bne.n	80050aa <HAL_SPI_Receive+0x44>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10e      	bne.n	80050aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2204      	movs	r2, #4
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8f1 	bl	8005288 <HAL_SPI_TransmitReceive>
 80050a6:	4603      	mov	r3, r0
 80050a8:	e0ea      	b.n	8005280 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_Receive+0x52>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0e3      	b.n	8005280 <HAL_SPI_Receive+0x21a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c0:	f7fd fcfc 	bl	8002abc <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050d6:	e0ca      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x7e>
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e8:	e0c1      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2204      	movs	r2, #4
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005130:	d10f      	bne.n	8005152 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005150:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515c:	2b40      	cmp	r3, #64	@ 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d162      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005178:	e02e      	b.n	80051d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d115      	bne.n	80051b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f103 020c 	add.w	r2, r3, #12
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051b2:	e011      	b.n	80051d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b4:	f7fd fc82 	bl	8002abc <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_Receive+0x166>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_Receive+0x16c>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051d6:	e04a      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1cb      	bne.n	800517a <HAL_SPI_Receive+0x114>
 80051e2:	e031      	b.n	8005248 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d113      	bne.n	800521a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	b292      	uxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	1c9a      	adds	r2, r3, #2
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005218:	e011      	b.n	800523e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521a:	f7fd fc4f 	bl	8002abc <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d803      	bhi.n	8005232 <HAL_SPI_Receive+0x1cc>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x1d2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800523c:	e017      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1cd      	bne.n	80051e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fa45 	bl	80056dc <SPI_EndRxTransaction>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	e000      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

error :
 800526c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	@ 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x26>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e18a      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x33c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b6:	f7fd fc01 	bl	8002abc <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d00f      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052de:	d107      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
 80052e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d003      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80052f6:	e15b      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005310:	e14e      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b04      	cmp	r3, #4
 800531c:	d003      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2205      	movs	r2, #5
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	887a      	ldrh	r2, [r7, #2]
 800534e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b40      	cmp	r3, #64	@ 0x40
 8005368:	d007      	beq.n	800537a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005382:	d178      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x10a>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d166      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	1c9a      	adds	r2, r3, #2
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b6:	e053      	b.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d11b      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d113      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d119      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d014      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	b292      	uxth	r2, r2
 8005422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800543c:	2301      	movs	r3, #1
 800543e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005440:	f7fd fb3c 	bl	8002abc <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800544c:	429a      	cmp	r2, r3
 800544e:	d807      	bhi.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d003      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800545e:	e0a7      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1a6      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1a1      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 8005474:	e07c      	b.n	8005570 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x1fc>
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d16b      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	e057      	b.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11c      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d119      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005536:	f7fd fac1 	bl	8002abc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005542:	429a      	cmp	r2, r3
 8005544:	d803      	bhi.n	800554e <HAL_SPI_TransmitReceive+0x2c6>
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d102      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x2cc>
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800555a:	e029      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a2      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d19d      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f917 	bl	80057a8 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800558c:	e010      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e000      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80055c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	@ 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055dc:	f7fd fa6e 	bl	8002abc <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ec:	f7fd fa66 	bl	8002abc <HAL_GetTick>
 80055f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055f2:	4b39      	ldr	r3, [pc, #228]	@ (80056d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	e054      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d050      	beq.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800560c:	f7fd fa56 	bl	8002abc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d902      	bls.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13d      	bne.n	800569e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800563a:	d111      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005644:	d004      	beq.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800564e:	d107      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800565e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005668:	d10f      	bne.n	800568a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e017      	b.n	80056ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d19b      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000000c 	.word	0x2000000c

080056dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f0:	d111      	bne.n	8005716 <SPI_EndRxTransaction+0x3a>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fa:	d004      	beq.n	8005706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005704:	d107      	bne.n	8005716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800571e:	d12a      	bne.n	8005776 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	d012      	beq.n	8005750 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	2180      	movs	r1, #128	@ 0x80
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff49 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02d      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e026      	b.n	800579e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	2101      	movs	r1, #1
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff36 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e013      	b.n	800579e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	2101      	movs	r1, #1
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff23 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e000      	b.n	800579e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <SPI_EndRxTxTransaction+0x7c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <SPI_EndRxTxTransaction+0x80>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0d5b      	lsrs	r3, r3, #21
 80057c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057d2:	d112      	bne.n	80057fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	@ 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fef4 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3b01      	subs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005810:	2b80      	cmp	r3, #128	@ 0x80
 8005812:	d0f2      	beq.n	80057fa <SPI_EndRxTxTransaction+0x52>
 8005814:	e000      	b.n	8005818 <SPI_EndRxTxTransaction+0x70>
        break;
 8005816:	bf00      	nop
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	2000000c 	.word	0x2000000c
 8005828:	165e9f81 	.word	0x165e9f81

0800582c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e034      	b.n	80058ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7fb f83e 	bl	80008d8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3308      	adds	r3, #8
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f001 fd1a 	bl	80072a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	461a      	mov	r2, r3
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	f001 fd64 	bl	8007344 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6858      	ldr	r0, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	f001 fd99 	bl	80073c0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6892      	ldr	r2, [r2, #8]
 80058a2:	f041 0101 	orr.w	r1, r1, #1
 80058a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e041      	b.n	800594a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc ff1e 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 fa96 	bl	8005e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d001      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e04e      	b.n	8005a0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a23      	ldr	r2, [pc, #140]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d022      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005996:	d01d      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d018      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d013      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00e      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a19      	ldr	r2, [pc, #100]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x80>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d111      	bne.n	80059f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d010      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	e007      	b.n	8005a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40010400 	.word	0x40010400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40001800 	.word	0x40001800

08005a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0202 	mvn.w	r2, #2
 8005a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9b5 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9a7 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f9b8 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0204 	mvn.w	r2, #4
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f98b 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f97d 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f98e 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0208 	mvn.w	r2, #8
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f961 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f953 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f964 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0210 	mvn.w	r2, #16
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2208      	movs	r2, #8
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f937 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f929 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f93a 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0201 	mvn.w	r2, #1
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fc fc40 	bl	8002438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd0:	2b80      	cmp	r3, #128	@ 0x80
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fae0 	bl	80061a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b40      	cmp	r3, #64	@ 0x40
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfc:	2b40      	cmp	r3, #64	@ 0x40
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8ff 	bl	8005e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d10e      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d107      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0220 	mvn.w	r2, #32
 8005c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 faaa 	bl	8006190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0b4      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0xd4>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x172>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b70      	cmp	r3, #112	@ 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xa6>
 8005cb4:	2b70      	cmp	r3, #112	@ 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b60      	cmp	r3, #96	@ 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b60      	cmp	r3, #96	@ 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b50      	cmp	r3, #80	@ 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xfa>
 8005cc4:	2b50      	cmp	r3, #80	@ 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x13a>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b30      	cmp	r3, #48	@ 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b30      	cmp	r3, #48	@ 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f000 f9ad 	bl	8006058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f000 f996 	bl	8006058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 f90a 	bl	8005f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	@ 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f963 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 f929 	bl	8005fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	@ 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f953 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 f8ea 	bl	8005f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	@ 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f943 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 f93a 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a40      	ldr	r2, [pc, #256]	@ (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e42:	d00f      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3d      	ldr	r2, [pc, #244]	@ (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3b      	ldr	r2, [pc, #236]	@ (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f48 <TIM_Base_SetConfig+0x124>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2f      	ldr	r2, [pc, #188]	@ (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d027      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d023      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	@ (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	@ (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	@ (8005f48 <TIM_Base_SetConfig+0x124>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d017      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	@ (8005f4c <TIM_Base_SetConfig+0x128>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	@ (8005f50 <TIM_Base_SetConfig+0x12c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <TIM_Base_SetConfig+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <TIM_Base_SetConfig+0x134>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	@ (8005f5c <TIM_Base_SetConfig+0x138>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a23      	ldr	r2, [pc, #140]	@ (8005f60 <TIM_Base_SetConfig+0x13c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <TIM_Base_SetConfig+0x114>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0xf8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a0c      	ldr	r2, [pc, #48]	@ (8005f48 <TIM_Base_SetConfig+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40001800 	.word	0x40001800
 8005f5c:	40001c00 	.word	0x40001c00
 8005f60:	40002000 	.word	0x40002000

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0210 	bic.w	r2, r3, #16
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	f043 0307 	orr.w	r3, r3, #7
 8006044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	021a      	lsls	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	431a      	orrs	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4313      	orrs	r3, r2
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	609a      	str	r2, [r3, #8]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e05a      	b.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a21      	ldr	r2, [pc, #132]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fc:	d01d      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1b      	ldr	r2, [pc, #108]	@ (800617c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1a      	ldr	r2, [pc, #104]	@ (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a15      	ldr	r2, [pc, #84]	@ (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10c      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4313      	orrs	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40010400 	.word	0x40010400
 8006188:	40014000 	.word	0x40014000
 800618c:	40001800 	.word	0x40001800

08006190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e03f      	b.n	800624a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fc fb4e 	bl	8002880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2224      	movs	r2, #36	@ 0x24
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fddb 	bl	8006db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b08a      	sub	sp, #40	@ 0x28
 8006256:	af02      	add	r7, sp, #8
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b20      	cmp	r3, #32
 8006270:	d17c      	bne.n	800636c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_UART_Transmit+0x2c>
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e075      	b.n	800636e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_UART_Transmit+0x3e>
 800628c:	2302      	movs	r3, #2
 800628e:	e06e      	b.n	800636e <HAL_UART_Transmit+0x11c>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2221      	movs	r2, #33	@ 0x21
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a6:	f7fc fc09 	bl	8002abc <HAL_GetTick>
 80062aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c0:	d108      	bne.n	80062d4 <HAL_UART_Transmit+0x82>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e003      	b.n	80062dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80062e4:	e02a      	b.n	800633c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2180      	movs	r1, #128	@ 0x80
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fb1f 	bl	8006934 <UART_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e036      	b.n	800636e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	3302      	adds	r3, #2
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e007      	b.n	800632e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1cf      	bne.n	80062e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	2140      	movs	r1, #64	@ 0x40
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 faef 	bl	8006934 <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	4613      	mov	r3, r2
 8006382:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b20      	cmp	r3, #32
 800638e:	d11d      	bne.n	80063cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_Receive_IT+0x26>
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e016      	b.n	80063ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Receive_IT+0x38>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e00f      	b.n	80063ce <HAL_UART_Receive_IT+0x58>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	461a      	mov	r2, r3
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fb24 	bl	8006a10 <UART_Start_Receive_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	e000      	b.n	80063ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0ba      	sub	sp, #232	@ 0xe8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063fe:	2300      	movs	r3, #0
 8006400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10f      	bne.n	800643e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800641e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <HAL_UART_IRQHandler+0x66>
 800642a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fc03 	bl	8006c42 <UART_Receive_IT>
      return;
 800643c:	e256      	b.n	80068ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800643e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80de 	beq.w	8006604 <HAL_UART_IRQHandler+0x22c>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006458:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80d1 	beq.w	8006604 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <HAL_UART_IRQHandler+0xae>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	f043 0201 	orr.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <HAL_UART_IRQHandler+0xd2>
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	f043 0202 	orr.w	r2, r3, #2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <HAL_UART_IRQHandler+0xf6>
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d011      	beq.n	80064fe <HAL_UART_IRQHandler+0x126>
 80064da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f043 0208 	orr.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 81ed 	beq.w	80068e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <HAL_UART_IRQHandler+0x14e>
 8006514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fb8e 	bl	8006c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b40      	cmp	r3, #64	@ 0x40
 8006532:	bf0c      	ite	eq
 8006534:	2301      	moveq	r3, #1
 8006536:	2300      	movne	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <HAL_UART_IRQHandler+0x17a>
 800654a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04f      	beq.n	80065f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa96 	bl	8006a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d141      	bne.n	80065ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3314      	adds	r3, #20
 800656c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800657c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800659e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1d9      	bne.n	8006566 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d013      	beq.n	80065e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065be:	4a7d      	ldr	r2, [pc, #500]	@ (80067b4 <HAL_UART_IRQHandler+0x3dc>)
 80065c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fc fc29 	bl	8002e1e <HAL_DMA_Abort_IT>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	e00e      	b.n	8006600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f990 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	e00a      	b.n	8006600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f98c 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e006      	b.n	8006600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f988 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80065fe:	e170      	b.n	80068e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	bf00      	nop
    return;
 8006602:	e16e      	b.n	80068e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006608:	2b01      	cmp	r3, #1
 800660a:	f040 814a 	bne.w	80068a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8143 	beq.w	80068a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800661c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 813c 	beq.w	80068a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664a:	2b40      	cmp	r3, #64	@ 0x40
 800664c:	f040 80b4 	bne.w	80067b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800665c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8140 	beq.w	80068e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800666a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800666e:	429a      	cmp	r2, r3
 8006670:	f080 8139 	bcs.w	80068e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800667a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006686:	f000 8088 	beq.w	800679a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1d9      	bne.n	800668a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3314      	adds	r3, #20
 80066dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3314      	adds	r3, #20
 80066f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800670c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e1      	bne.n	80066d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800673c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e3      	bne.n	8006712 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800677c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800677e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800678a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e3      	bne.n	8006758 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	4618      	mov	r0, r3
 8006796:	f7fc fad2 	bl	8002d3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f8b6 	bl	800691c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067b0:	e099      	b.n	80068e6 <HAL_UART_IRQHandler+0x50e>
 80067b2:	bf00      	nop
 80067b4:	08006b4b 	.word	0x08006b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 808b 	beq.w	80068ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8086 	beq.w	80068ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006802:	647a      	str	r2, [r7, #68]	@ 0x44
 8006804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e3      	bne.n	80067de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	623b      	str	r3, [r7, #32]
   return(result);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800683a:	633a      	str	r2, [r7, #48]	@ 0x30
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	60fb      	str	r3, [r7, #12]
   return(result);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0310 	bic.w	r3, r3, #16
 8006872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006880:	61fa      	str	r2, [r7, #28]
 8006882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	617b      	str	r3, [r7, #20]
   return(result);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e3      	bne.n	800685c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f83e 	bl	800691c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068a0:	e023      	b.n	80068ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_UART_IRQHandler+0x4ea>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f959 	bl	8006b72 <UART_Transmit_IT>
    return;
 80068c0:	e014      	b.n	80068ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <HAL_UART_IRQHandler+0x514>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f999 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 80068e0:	e004      	b.n	80068ec <HAL_UART_IRQHandler+0x514>
    return;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_UART_IRQHandler+0x514>
      return;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_UART_IRQHandler+0x514>
      return;
 80068ea:	bf00      	nop
  }
}
 80068ec:	37e8      	adds	r7, #232	@ 0xe8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop

080068f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b090      	sub	sp, #64	@ 0x40
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006944:	e050      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d04c      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800694e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <UART_WaitOnFlagUntilTimeout+0x30>
 8006954:	f7fc f8b2 	bl	8002abc <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006960:	429a      	cmp	r2, r3
 8006962:	d241      	bcs.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006984:	637a      	str	r2, [r7, #52]	@ 0x34
 8006986:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800698a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	613b      	str	r3, [r7, #16]
   return(result);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069b8:	623a      	str	r2, [r7, #32]
 80069ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	69f9      	ldr	r1, [r7, #28]
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e5      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e00f      	b.n	8006a08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4013      	ands	r3, r2
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	bf0c      	ite	eq
 80069f8:	2301      	moveq	r3, #1
 80069fa:	2300      	movne	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d09f      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3740      	adds	r7, #64	@ 0x40
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2222      	movs	r2, #34	@ 0x22
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0220 	orr.w	r2, r2, #32
 8006a74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b095      	sub	sp, #84	@ 0x54
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aac:	643a      	str	r2, [r7, #64]	@ 0x40
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3314      	adds	r3, #20
 8006ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d119      	bne.n	8006b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0310 	bic.w	r3, r3, #16
 8006b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b1c:	61ba      	str	r2, [r7, #24]
 8006b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6979      	ldr	r1, [r7, #20]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b3e:	bf00      	nop
 8006b40:	3754      	adds	r7, #84	@ 0x54
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fecf 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b21      	cmp	r3, #33	@ 0x21
 8006b84:	d13e      	bne.n	8006c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8e:	d114      	bne.n	8006bba <UART_Transmit_IT+0x48>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d110      	bne.n	8006bba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	1c9a      	adds	r2, r3, #2
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	621a      	str	r2, [r3, #32]
 8006bb8:	e008      	b.n	8006bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6211      	str	r1, [r2, #32]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fe5e 	bl	80068f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08c      	sub	sp, #48	@ 0x30
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b22      	cmp	r3, #34	@ 0x22
 8006c54:	f040 80ab 	bne.w	8006dae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c60:	d117      	bne.n	8006c92 <UART_Receive_IT+0x50>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d113      	bne.n	8006c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c90:	e026      	b.n	8006ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca4:	d007      	beq.n	8006cb6 <UART_Receive_IT+0x74>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <UART_Receive_IT+0x82>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e008      	b.n	8006cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4619      	mov	r1, r3
 8006cee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d15a      	bne.n	8006daa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0220 	bic.w	r2, r2, #32
 8006d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d135      	bne.n	8006da0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f023 0310 	bic.w	r3, r3, #16
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5a:	623a      	str	r2, [r7, #32]
 8006d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	69f9      	ldr	r1, [r7, #28]
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e5      	bne.n	8006d3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d10a      	bne.n	8006d92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fdbf 	bl	800691c <HAL_UARTEx_RxEventCallback>
 8006d9e:	e002      	b.n	8006da6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fb fcef 	bl	8002784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e002      	b.n	8006db0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e000      	b.n	8006db0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3730      	adds	r7, #48	@ 0x30
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dbc:	b0c0      	sub	sp, #256	@ 0x100
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	68d9      	ldr	r1, [r3, #12]
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	ea40 0301 	orr.w	r3, r0, r1
 8006de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e10:	f021 010c 	bic.w	r1, r1, #12
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e32:	6999      	ldr	r1, [r3, #24]
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	ea40 0301 	orr.w	r3, r0, r1
 8006e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	4b8f      	ldr	r3, [pc, #572]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d005      	beq.n	8006e58 <UART_SetConfig+0xa0>
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b8d      	ldr	r3, [pc, #564]	@ (8007088 <UART_SetConfig+0x2d0>)
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d104      	bne.n	8006e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e58:	f7fd ff2c 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8006e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e60:	e003      	b.n	8006e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e62:	f7fd ff13 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8006e66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e74:	f040 810c 	bne.w	8007090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	1891      	adds	r1, r2, r2
 8006e90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e92:	415b      	adcs	r3, r3
 8006e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	eb12 0801 	adds.w	r8, r2, r1
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	eb43 0901 	adc.w	r9, r3, r1
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eba:	4690      	mov	r8, r2
 8006ebc:	4699      	mov	r9, r3
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	eb18 0303 	adds.w	r3, r8, r3
 8006ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ec8:	462b      	mov	r3, r5
 8006eca:	eb49 0303 	adc.w	r3, r9, r3
 8006ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ede:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	18db      	adds	r3, r3, r3
 8006eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eec:	4613      	mov	r3, r2
 8006eee:	eb42 0303 	adc.w	r3, r2, r3
 8006ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006efc:	f7f9 f96c 	bl	80001d8 <__aeabi_uldivmod>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4b61      	ldr	r3, [pc, #388]	@ (800708c <UART_SetConfig+0x2d4>)
 8006f06:	fba3 2302 	umull	r2, r3, r3, r2
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	011c      	lsls	r4, r3, #4
 8006f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	1891      	adds	r1, r2, r2
 8006f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f28:	415b      	adcs	r3, r3
 8006f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f30:	4641      	mov	r1, r8
 8006f32:	eb12 0a01 	adds.w	sl, r2, r1
 8006f36:	4649      	mov	r1, r9
 8006f38:	eb43 0b01 	adc.w	fp, r3, r1
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f50:	4692      	mov	sl, r2
 8006f52:	469b      	mov	fp, r3
 8006f54:	4643      	mov	r3, r8
 8006f56:	eb1a 0303 	adds.w	r3, sl, r3
 8006f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	eb4b 0303 	adc.w	r3, fp, r3
 8006f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	18db      	adds	r3, r3, r3
 8006f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f82:	4613      	mov	r3, r2
 8006f84:	eb42 0303 	adc.w	r3, r2, r3
 8006f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f92:	f7f9 f921 	bl	80001d8 <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800708c <UART_SetConfig+0x2d4>)
 8006f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2264      	movs	r2, #100	@ 0x64
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	1acb      	subs	r3, r1, r3
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006fb2:	4b36      	ldr	r3, [pc, #216]	@ (800708c <UART_SetConfig+0x2d4>)
 8006fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fc0:	441c      	add	r4, r3
 8006fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	1891      	adds	r1, r2, r2
 8006fda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fdc:	415b      	adcs	r3, r3
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	1851      	adds	r1, r2, r1
 8006fe8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fea:	4649      	mov	r1, r9
 8006fec:	414b      	adcs	r3, r1
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	00cb      	lsls	r3, r1, #3
 8007000:	4651      	mov	r1, sl
 8007002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007006:	4651      	mov	r1, sl
 8007008:	00ca      	lsls	r2, r1, #3
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	4603      	mov	r3, r0
 8007010:	4642      	mov	r2, r8
 8007012:	189b      	adds	r3, r3, r2
 8007014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007018:	464b      	mov	r3, r9
 800701a:	460a      	mov	r2, r1
 800701c:	eb42 0303 	adc.w	r3, r2, r3
 8007020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007030:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007038:	460b      	mov	r3, r1
 800703a:	18db      	adds	r3, r3, r3
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800703e:	4613      	mov	r3, r2
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800704a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800704e:	f7f9 f8c3 	bl	80001d8 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <UART_SetConfig+0x2d4>)
 8007058:	fba3 1302 	umull	r1, r3, r3, r2
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	2164      	movs	r1, #100	@ 0x64
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	3332      	adds	r3, #50	@ 0x32
 800706a:	4a08      	ldr	r2, [pc, #32]	@ (800708c <UART_SetConfig+0x2d4>)
 800706c:	fba2 2303 	umull	r2, r3, r2, r3
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f003 0207 	and.w	r2, r3, #7
 8007076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4422      	add	r2, r4
 800707e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007080:	e106      	b.n	8007290 <UART_SetConfig+0x4d8>
 8007082:	bf00      	nop
 8007084:	40011000 	.word	0x40011000
 8007088:	40011400 	.word	0x40011400
 800708c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007094:	2200      	movs	r2, #0
 8007096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800709a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800709e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070a2:	4642      	mov	r2, r8
 80070a4:	464b      	mov	r3, r9
 80070a6:	1891      	adds	r1, r2, r2
 80070a8:	6239      	str	r1, [r7, #32]
 80070aa:	415b      	adcs	r3, r3
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070b2:	4641      	mov	r1, r8
 80070b4:	1854      	adds	r4, r2, r1
 80070b6:	4649      	mov	r1, r9
 80070b8:	eb43 0501 	adc.w	r5, r3, r1
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	00eb      	lsls	r3, r5, #3
 80070c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ca:	00e2      	lsls	r2, r4, #3
 80070cc:	4614      	mov	r4, r2
 80070ce:	461d      	mov	r5, r3
 80070d0:	4643      	mov	r3, r8
 80070d2:	18e3      	adds	r3, r4, r3
 80070d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070d8:	464b      	mov	r3, r9
 80070da:	eb45 0303 	adc.w	r3, r5, r3
 80070de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070fe:	4629      	mov	r1, r5
 8007100:	008b      	lsls	r3, r1, #2
 8007102:	4621      	mov	r1, r4
 8007104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007108:	4621      	mov	r1, r4
 800710a:	008a      	lsls	r2, r1, #2
 800710c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007110:	f7f9 f862 	bl	80001d8 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4b60      	ldr	r3, [pc, #384]	@ (800729c <UART_SetConfig+0x4e4>)
 800711a:	fba3 2302 	umull	r2, r3, r3, r2
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	011c      	lsls	r4, r3, #4
 8007122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007126:	2200      	movs	r2, #0
 8007128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800712c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007134:	4642      	mov	r2, r8
 8007136:	464b      	mov	r3, r9
 8007138:	1891      	adds	r1, r2, r2
 800713a:	61b9      	str	r1, [r7, #24]
 800713c:	415b      	adcs	r3, r3
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007144:	4641      	mov	r1, r8
 8007146:	1851      	adds	r1, r2, r1
 8007148:	6139      	str	r1, [r7, #16]
 800714a:	4649      	mov	r1, r9
 800714c:	414b      	adcs	r3, r1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800715c:	4659      	mov	r1, fp
 800715e:	00cb      	lsls	r3, r1, #3
 8007160:	4651      	mov	r1, sl
 8007162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007166:	4651      	mov	r1, sl
 8007168:	00ca      	lsls	r2, r1, #3
 800716a:	4610      	mov	r0, r2
 800716c:	4619      	mov	r1, r3
 800716e:	4603      	mov	r3, r0
 8007170:	4642      	mov	r2, r8
 8007172:	189b      	adds	r3, r3, r2
 8007174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007178:	464b      	mov	r3, r9
 800717a:	460a      	mov	r2, r1
 800717c:	eb42 0303 	adc.w	r3, r2, r3
 8007180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800718e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800719c:	4649      	mov	r1, r9
 800719e:	008b      	lsls	r3, r1, #2
 80071a0:	4641      	mov	r1, r8
 80071a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a6:	4641      	mov	r1, r8
 80071a8:	008a      	lsls	r2, r1, #2
 80071aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071ae:	f7f9 f813 	bl	80001d8 <__aeabi_uldivmod>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4611      	mov	r1, r2
 80071b8:	4b38      	ldr	r3, [pc, #224]	@ (800729c <UART_SetConfig+0x4e4>)
 80071ba:	fba3 2301 	umull	r2, r3, r3, r1
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2264      	movs	r2, #100	@ 0x64
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	1acb      	subs	r3, r1, r3
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	3332      	adds	r3, #50	@ 0x32
 80071cc:	4a33      	ldr	r2, [pc, #204]	@ (800729c <UART_SetConfig+0x4e4>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071d8:	441c      	add	r4, r3
 80071da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071de:	2200      	movs	r2, #0
 80071e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80071e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80071e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	1891      	adds	r1, r2, r2
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	415b      	adcs	r3, r3
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f8:	4641      	mov	r1, r8
 80071fa:	1851      	adds	r1, r2, r1
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	4649      	mov	r1, r9
 8007200:	414b      	adcs	r3, r1
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007210:	4659      	mov	r1, fp
 8007212:	00cb      	lsls	r3, r1, #3
 8007214:	4651      	mov	r1, sl
 8007216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800721a:	4651      	mov	r1, sl
 800721c:	00ca      	lsls	r2, r1, #3
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	4603      	mov	r3, r0
 8007224:	4642      	mov	r2, r8
 8007226:	189b      	adds	r3, r3, r2
 8007228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800722a:	464b      	mov	r3, r9
 800722c:	460a      	mov	r2, r1
 800722e:	eb42 0303 	adc.w	r3, r2, r3
 8007232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	663b      	str	r3, [r7, #96]	@ 0x60
 800723e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800724c:	4649      	mov	r1, r9
 800724e:	008b      	lsls	r3, r1, #2
 8007250:	4641      	mov	r1, r8
 8007252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007256:	4641      	mov	r1, r8
 8007258:	008a      	lsls	r2, r1, #2
 800725a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800725e:	f7f8 ffbb 	bl	80001d8 <__aeabi_uldivmod>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <UART_SetConfig+0x4e4>)
 8007268:	fba3 1302 	umull	r1, r3, r3, r2
 800726c:	095b      	lsrs	r3, r3, #5
 800726e:	2164      	movs	r1, #100	@ 0x64
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	3332      	adds	r3, #50	@ 0x32
 800727a:	4a08      	ldr	r2, [pc, #32]	@ (800729c <UART_SetConfig+0x4e4>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	f003 020f 	and.w	r2, r3, #15
 8007286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4422      	add	r2, r4
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007296:	46bd      	mov	sp, r7
 8007298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800729c:	51eb851f 	.word	0x51eb851f

080072a0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <FSMC_NORSRAM_Init+0xa0>)
 80072be:	4013      	ands	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072ca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80072d0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80072d6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80072dc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80072e2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80072e8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80072ee:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80072f4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80072fa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007300:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8007306:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 800730c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b08      	cmp	r3, #8
 800731a:	d103      	bne.n	8007324 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	fff00080 	.word	0xfff00080

08007344 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007366:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007372:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800737a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007382:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	3b01      	subs	r3, #1
 800738a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800738c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	3b02      	subs	r3, #2
 8007394:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007396:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800739c:	4313      	orrs	r3, r2
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6979      	ldr	r1, [r7, #20]
 80073ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d8:	d122      	bne.n	8007420 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4b15      	ldr	r3, [pc, #84]	@ (800743c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073f6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80073fe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007406:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800740c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6979      	ldr	r1, [r7, #20]
 800741a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800741e:	e005      	b.n	800742c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	cff00000 	.word	0xcff00000

08007440 <memset>:
 8007440:	4402      	add	r2, r0
 8007442:	4603      	mov	r3, r0
 8007444:	4293      	cmp	r3, r2
 8007446:	d100      	bne.n	800744a <memset+0xa>
 8007448:	4770      	bx	lr
 800744a:	f803 1b01 	strb.w	r1, [r3], #1
 800744e:	e7f9      	b.n	8007444 <memset+0x4>

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	@ (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	@ (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	@ (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	@ (8007494 <__libc_init_array+0x44>)
 8007464:	f000 f818 	bl	8007498 <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	0800a518 	.word	0x0800a518
 800748c:	0800a518 	.word	0x0800a518
 8007490:	0800a518 	.word	0x0800a518
 8007494:	0800a51c 	.word	0x0800a51c

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	bf00      	nop
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
