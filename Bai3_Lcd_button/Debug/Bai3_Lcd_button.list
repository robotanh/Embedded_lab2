
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f64  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800babc  0800babc  0000d048  2**0
                  CONTENTS
  4 .ARM          00000008  0800babc  0800babc  0000cabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bac4  0800bac4  0000d048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac4  0800bac4  0000cac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac8  0800bac8  0000cac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800bacc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d048  2**0
                  CONTENTS
 10 .bss          0000012c  20000048  20000048  0000d048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0000d048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0cb  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbb  00000000  00000000  0001c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  0001ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5f  00000000  00000000  0001fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022901  00000000  00000000  00020867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013206  00000000  00000000  00043168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd224  00000000  00000000  0005636e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123592  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c64  00000000  00000000  001235d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0012723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b40 	.word	0x08004b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08004b40 	.word	0x08004b40

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fb33 	bl	8002b3c <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 fb26 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 fb21 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f003 f978 	bl	80037f6 <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	20000064 	.word	0x20000064
 80005b0:	200000cc 	.word	0x200000cc
 80005b4:	20000000 	.word	0x20000000

080005b8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	@ 0x38
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005e4:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <MX_FSMC_Init+0xec>)
 80005e6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80005ea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005ec:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <MX_FSMC_Init+0xec>)
 80005ee:	4a2e      	ldr	r2, [pc, #184]	@ (80006a8 <MX_FSMC_Init+0xf0>)
 80005f0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005f2:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <MX_FSMC_Init+0xec>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005f8:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <MX_FSMC_Init+0xec>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005fe:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000606:	2210      	movs	r2, #16
 8000608:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000610:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000616:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_FSMC_Init+0xec>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000624:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_FSMC_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_FSMC_Init+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_FSMC_Init+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800064a:	230f      	movs	r3, #15
 800064c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800064e:	230f      	movs	r3, #15
 8000650:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000652:	233c      	movs	r3, #60	@ 0x3c
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800065a:	2310      	movs	r3, #16
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800065e:	2311      	movs	r3, #17
 8000660:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000662:	2300      	movs	r3, #0
 8000664:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000666:	2308      	movs	r3, #8
 8000668:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000676:	2310      	movs	r3, #16
 8000678:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800067a:	2311      	movs	r3, #17
 800067c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000682:	463a      	mov	r2, r7
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_FSMC_Init+0xec>)
 800068c:	f003 fc96 	bl	8003fbc <HAL_SRAM_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000696:	f001 f91f 	bl	80018d8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800069a:	bf00      	nop
 800069c:	3738      	adds	r7, #56	@ 0x38
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000068 	.word	0x20000068
 80006a8:	a0000104 	.word	0xa0000104

080006ac <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_FSMC_MspInit+0x88>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d131      	bne.n	800072c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <HAL_FSMC_MspInit+0x88>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <HAL_FSMC_MspInit+0x8c>)
 80006d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <HAL_FSMC_MspInit+0x8c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006ea:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80006ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006fc:	230c      	movs	r3, #12
 80006fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <HAL_FSMC_MspInit+0x90>)
 8000706:	f002 f87d 	bl	8002804 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800070a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800070e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800071c:	230c      	movs	r3, #12
 800071e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4806      	ldr	r0, [pc, #24]	@ (8000740 <HAL_FSMC_MspInit+0x94>)
 8000726:	f002 f86d 	bl	8002804 <HAL_GPIO_Init>
 800072a:	e000      	b.n	800072e <HAL_FSMC_MspInit+0x82>
    return;
 800072c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000b8 	.word	0x200000b8
 8000738:	40023800 	.word	0x40023800
 800073c:	40021000 	.word	0x40021000
 8000740:	40020c00 	.word	0x40020c00

08000744 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800074c:	f7ff ffae 	bl	80006ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	@ 0x30
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b6f      	ldr	r3, [pc, #444]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a6e      	ldr	r2, [pc, #440]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b6c      	ldr	r3, [pc, #432]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b68      	ldr	r3, [pc, #416]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a67      	ldr	r2, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b65      	ldr	r3, [pc, #404]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b61      	ldr	r3, [pc, #388]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a60      	ldr	r2, [pc, #384]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b5e      	ldr	r3, [pc, #376]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a59      	ldr	r2, [pc, #356]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b57      	ldr	r3, [pc, #348]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b53      	ldr	r3, [pc, #332]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a52      	ldr	r2, [pc, #328]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b50      	ldr	r3, [pc, #320]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a4b      	ldr	r2, [pc, #300]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b45      	ldr	r3, [pc, #276]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a44      	ldr	r2, [pc, #272]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b42      	ldr	r3, [pc, #264]	@ (8000930 <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2170      	movs	r1, #112	@ 0x70
 8000836:	483f      	ldr	r0, [pc, #252]	@ (8000934 <MX_GPIO_Init+0x1dc>)
 8000838:	f002 f980 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000842:	483d      	ldr	r0, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x1e0>)
 8000844:	f002 f97a 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	483b      	ldr	r0, [pc, #236]	@ (800093c <MX_GPIO_Init+0x1e4>)
 800084e:	f002 f975 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000858:	4839      	ldr	r0, [pc, #228]	@ (8000940 <MX_GPIO_Init+0x1e8>)
 800085a:	f002 f96f 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4838      	ldr	r0, [pc, #224]	@ (8000944 <MX_GPIO_Init+0x1ec>)
 8000864:	f002 f96a 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000868:	2370      	movs	r3, #112	@ 0x70
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	482d      	ldr	r0, [pc, #180]	@ (8000934 <MX_GPIO_Init+0x1dc>)
 8000880:	f001 ffc0 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4826      	ldr	r0, [pc, #152]	@ (8000938 <MX_GPIO_Init+0x1e0>)
 800089e:	f001 ffb1 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008a2:	23c0      	movs	r3, #192	@ 0xc0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4822      	ldr	r0, [pc, #136]	@ (8000940 <MX_GPIO_Init+0x1e8>)
 80008b6:	f001 ffa5 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008ba:	2330      	movs	r3, #48	@ 0x30
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481a      	ldr	r0, [pc, #104]	@ (8000938 <MX_GPIO_Init+0x1e0>)
 80008ce:	f001 ff99 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4814      	ldr	r0, [pc, #80]	@ (800093c <MX_GPIO_Init+0x1e4>)
 80008ea:	f001 ff8b 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_GPIO_Init+0x1e8>)
 8000908:	f001 ff7c 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800090c:	2308      	movs	r3, #8
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <MX_GPIO_Init+0x1ec>)
 8000924:	f001 ff6e 	bl	8002804 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	@ 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40021800 	.word	0x40021800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020c00 	.word	0x40020c00

08000948 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <LCD_WR_REG+0x1c>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	8013      	strh	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	600ffffe 	.word	0x600ffffe

08000968 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000972:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <LCD_WR_DATA+0x1c>)
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	8053      	strh	r3, [r2, #2]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	600ffffe 	.word	0x600ffffe

08000988 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <LCD_RD_DATA+0x20>)
 8000990:	885b      	ldrh	r3, [r3, #2]
 8000992:	b29b      	uxth	r3, r3
 8000994:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b29b      	uxth	r3, r3
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	600ffffe 	.word	0x600ffffe

080009ac <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4604      	mov	r4, r0
 80009b4:	4608      	mov	r0, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	4623      	mov	r3, r4
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	4603      	mov	r3, r0
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
 80009c6:	4613      	mov	r3, r2
 80009c8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009ca:	202a      	movs	r0, #42	@ 0x2a
 80009cc:	f7ff ffbc 	bl	8000948 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffc6 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffc0 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffba 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffb4 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000a00:	202b      	movs	r0, #43	@ 0x2b
 8000a02:	f7ff ffa1 	bl	8000948 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000a06:	88bb      	ldrh	r3, [r7, #4]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffab 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffa5 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a1e:	883b      	ldrh	r3, [r7, #0]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff9f 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a2a:	883b      	ldrh	r3, [r7, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff99 	bl	8000968 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a36:	202c      	movs	r0, #44	@ 0x2c
 8000a38:	f7ff ff86 	bl	8000948 <LCD_WR_REG>
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}

08000a44 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <lcd_Clear+0x60>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <lcd_Clear+0x60>)
 8000a58:	885b      	ldrh	r3, [r3, #2]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ffa3 	bl	80009ac <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	e011      	b.n	8000a90 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	81bb      	strh	r3, [r7, #12]
 8000a70:	e006      	b.n	8000a80 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff77 	bl	8000968 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	81bb      	strh	r3, [r7, #12]
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <lcd_Clear+0x60>)
 8000a82:	885b      	ldrh	r3, [r3, #2]
 8000a84:	89ba      	ldrh	r2, [r7, #12]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3f3      	bcc.n	8000a72 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	81fb      	strh	r3, [r7, #14]
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <lcd_Clear+0x60>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	89fa      	ldrh	r2, [r7, #14]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d3e8      	bcc.n	8000a6c <lcd_Clear+0x28>
		}
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000bc 	.word	0x200000bc

08000aa8 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	883b      	ldrh	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	88b9      	ldrh	r1, [r7, #4]
 8000ad4:	88f8      	ldrh	r0, [r7, #6]
 8000ad6:	f7ff ff69 	bl	80009ac <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	e010      	b.n	8000b02 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	81bb      	strh	r3, [r7, #12]
 8000ae4:	e006      	b.n	8000af4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ae6:	8c3b      	ldrh	r3, [r7, #32]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff3d 	bl	8000968 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000aee:	89bb      	ldrh	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	81bb      	strh	r3, [r7, #12]
 8000af4:	89ba      	ldrh	r2, [r7, #12]
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3f4      	bcc.n	8000ae6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	3301      	adds	r3, #1
 8000b00:	81fb      	strh	r3, [r7, #14]
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d3ea      	bcc.n	8000ae0 <lcd_Fill+0x38>
		}
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}

08000b14 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	88b9      	ldrh	r1, [r7, #4]
 8000b2c:	88f8      	ldrh	r0, [r7, #6]
 8000b2e:	f7ff ff3d 	bl	80009ac <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff17 	bl	8000968 <LCD_WR_DATA>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	fb12 f303 	smulbb	r3, r2, r3
 8000b9a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	3b20      	subs	r3, #32
 8000ba0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29c      	uxth	r4, r3
 8000bb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	88b9      	ldrh	r1, [r7, #4]
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	f7ff fef1 	bl	80009ac <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	827b      	strh	r3, [r7, #18]
 8000bce:	e07a      	b.n	8000cc6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bd4:	2b0c      	cmp	r3, #12
 8000bd6:	d028      	beq.n	8000c2a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bdc:	2b10      	cmp	r3, #16
 8000bde:	d108      	bne.n	8000bf2 <lcd_ShowChar+0xae>
 8000be0:	78fa      	ldrb	r2, [r7, #3]
 8000be2:	8a7b      	ldrh	r3, [r7, #18]
 8000be4:	493c      	ldr	r1, [pc, #240]	@ (8000cd8 <lcd_ShowChar+0x194>)
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	440a      	add	r2, r1
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e01b      	b.n	8000c2a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000bf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bf6:	2b18      	cmp	r3, #24
 8000bf8:	d10b      	bne.n	8000c12 <lcd_ShowChar+0xce>
 8000bfa:	78fa      	ldrb	r2, [r7, #3]
 8000bfc:	8a79      	ldrh	r1, [r7, #18]
 8000bfe:	4837      	ldr	r0, [pc, #220]	@ (8000cdc <lcd_ShowChar+0x198>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	4403      	add	r3, r0
 8000c0a:	440b      	add	r3, r1
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	75fb      	strb	r3, [r7, #23]
 8000c10:	e00b      	b.n	8000c2a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000c12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	d15a      	bne.n	8000cd0 <lcd_ShowChar+0x18c>
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	8a7b      	ldrh	r3, [r7, #18]
 8000c1e:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <lcd_ShowChar+0x19c>)
 8000c20:	0192      	lsls	r2, r2, #6
 8000c22:	440a      	add	r2, r1
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75bb      	strb	r3, [r7, #22]
 8000c2e:	e044      	b.n	8000cba <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000c30:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d120      	bne.n	8000c7a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c38:	7dfa      	ldrb	r2, [r7, #23]
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	fa42 f303 	asr.w	r3, r2, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d004      	beq.n	8000c52 <lcd_ShowChar+0x10e>
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe8c 	bl	8000968 <LCD_WR_DATA>
 8000c50:	e003      	b.n	8000c5a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe87 	bl	8000968 <LCD_WR_DATA>
				m++;
 8000c5a:	7d7b      	ldrb	r3, [r7, #21]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000c60:	7d7b      	ldrb	r3, [r7, #21]
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c68:	fb01 f202 	mul.w	r2, r1, r2
 8000c6c:	1a9b      	subs	r3, r3, r2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11f      	bne.n	8000cb4 <lcd_ShowChar+0x170>
				{
					m=0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	757b      	strb	r3, [r7, #21]
					break;
 8000c78:	e022      	b.n	8000cc0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c7a:	7dfa      	ldrb	r2, [r7, #23]
 8000c7c:	7dbb      	ldrb	r3, [r7, #22]
 8000c7e:	fa42 f303 	asr.w	r3, r2, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <lcd_ShowChar+0x152>
 8000c8a:	883a      	ldrh	r2, [r7, #0]
 8000c8c:	88b9      	ldrh	r1, [r7, #4]
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff3f 	bl	8000b14 <lcd_DrawPoint>
				x++;
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c9c:	88fa      	ldrh	r2, [r7, #6]
 8000c9e:	8a3b      	ldrh	r3, [r7, #16]
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d105      	bne.n	8000cb4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ca8:	8a3b      	ldrh	r3, [r7, #16]
 8000caa:	80fb      	strh	r3, [r7, #6]
					y++;
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	80bb      	strh	r3, [r7, #4]
					break;
 8000cb2:	e005      	b.n	8000cc0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000cb4:	7dbb      	ldrb	r3, [r7, #22]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	75bb      	strb	r3, [r7, #22]
 8000cba:	7dbb      	ldrb	r3, [r7, #22]
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	d9b7      	bls.n	8000c30 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000cc0:	8a7b      	ldrh	r3, [r7, #18]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	827b      	strh	r3, [r7, #18]
 8000cc6:	8a7a      	ldrh	r2, [r7, #18]
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d380      	bcc.n	8000bd0 <lcd_ShowChar+0x8c>
 8000cce:	e000      	b.n	8000cd2 <lcd_ShowChar+0x18e>
		else return;
 8000cd0:	bf00      	nop
				}
			}
		}
	}
}
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	08004be4 	.word	0x08004be4
 8000cdc:	080051d4 	.word	0x080051d4
 8000ce0:	080063a4 	.word	0x080063a4

08000ce4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000cf8:	e004      	b.n	8000d04 <mypow+0x20>
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	71ba      	strb	r2, [r7, #6]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f5      	bne.n	8000cfa <mypow+0x16>
	return result;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e059      	b.n	8000e00 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d4c:	887c      	ldrh	r4, [r7, #2]
 8000d4e:	787a      	ldrb	r2, [r7, #1]
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f7ff ffc1 	bl	8000ce4 <mypow>
 8000d62:	4603      	mov	r3, r0
 8000d64:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <lcd_ShowIntNum+0xf8>)
 8000d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1aca      	subs	r2, r1, r3
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d121      	bne.n	8000dc8 <lcd_ShowIntNum+0xac>
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	787b      	ldrb	r3, [r7, #1]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	da1c      	bge.n	8000dc8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d117      	bne.n	8000dc4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	7b7b      	ldrb	r3, [r7, #13]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	fb12 f303 	smulbb	r3, r2, r3
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4413      	add	r3, r2
 8000da6:	b298      	uxth	r0, r3
 8000da8:	8c3a      	ldrh	r2, [r7, #32]
 8000daa:	88b9      	ldrh	r1, [r7, #4]
 8000dac:	2300      	movs	r3, #0
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	f7ff fec1 	bl	8000b44 <lcd_ShowChar>
				continue;
 8000dc2:	e01a      	b.n	8000dfa <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	7b7b      	ldrb	r3, [r7, #13]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fb12 f303 	smulbb	r3, r2, r3
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b298      	uxth	r0, r3
 8000ddc:	7b3b      	ldrb	r3, [r7, #12]
 8000dde:	3330      	adds	r3, #48	@ 0x30
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	8c3c      	ldrh	r4, [r7, #32]
 8000de4:	88b9      	ldrh	r1, [r7, #4]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9302      	str	r3, [sp, #8]
 8000dea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4623      	mov	r3, r4
 8000df6:	f7ff fea5 	bl	8000b44 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3a1      	bcc.n	8000d4c <lcd_ShowIntNum+0x30>
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	cccccccd 	.word	0xcccccccd

08000e18 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	80fb      	strh	r3, [r7, #6]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80bb      	strh	r3, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	4613      	mov	r3, r2
 8000e34:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	3b01      	subs	r3, #1
 8000e44:	b29c      	uxth	r4, r3
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	88b9      	ldrh	r1, [r7, #4]
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	4622      	mov	r2, r4
 8000e58:	f7ff fda8 	bl	80009ac <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	82fb      	strh	r3, [r7, #22]
 8000e60:	e027      	b.n	8000eb2 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	82bb      	strh	r3, [r7, #20]
 8000e66:	e01d      	b.n	8000ea4 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	3301      	adds	r3, #1
 8000e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fd68 	bl	8000968 <LCD_WR_DATA>
			k++;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000e9e:	8abb      	ldrh	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	82bb      	strh	r3, [r7, #20]
 8000ea4:	8aba      	ldrh	r2, [r7, #20]
 8000ea6:	883b      	ldrh	r3, [r7, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3dd      	bcc.n	8000e68 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000eac:	8afb      	ldrh	r3, [r7, #22]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	82fb      	strh	r3, [r7, #22]
 8000eb2:	8afa      	ldrh	r2, [r7, #22]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3d3      	bcc.n	8000e62 <lcd_ShowPicture+0x4a>
		}
	}
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <lcd_SetDir+0x44>)
 8000ee0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ee4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <lcd_SetDir+0x44>)
 8000ee8:	22f0      	movs	r2, #240	@ 0xf0
 8000eea:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000eec:	e006      	b.n	8000efc <lcd_SetDir+0x38>
		lcddev.width=240;
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <lcd_SetDir+0x44>)
 8000ef0:	22f0      	movs	r2, #240	@ 0xf0
 8000ef2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <lcd_SetDir+0x44>)
 8000ef6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000efa:	805a      	strh	r2, [r3, #2]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200000bc 	.word	0x200000bc

08000f0c <lcd_init>:


void lcd_init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f16:	48aa      	ldr	r0, [pc, #680]	@ (80011c0 <lcd_init+0x2b4>)
 8000f18:	f001 fe10 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f20:	f001 fb3a 	bl	8002598 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2a:	48a5      	ldr	r0, [pc, #660]	@ (80011c0 <lcd_init+0x2b4>)
 8000f2c:	f001 fe06 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f34:	f001 fb30 	bl	8002598 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff ffc3 	bl	8000ec4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f3e:	20d3      	movs	r0, #211	@ 0xd3
 8000f40:	f7ff fd02 	bl	8000948 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f44:	f7ff fd20 	bl	8000988 <LCD_RD_DATA>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80011c4 <lcd_init+0x2b8>)
 8000f4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f50:	f7ff fd1a 	bl	8000988 <LCD_RD_DATA>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b9a      	ldr	r3, [pc, #616]	@ (80011c4 <lcd_init+0x2b8>)
 8000f5a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f5c:	f7ff fd14 	bl	8000988 <LCD_RD_DATA>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b97      	ldr	r3, [pc, #604]	@ (80011c4 <lcd_init+0x2b8>)
 8000f66:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000f68:	4b96      	ldr	r3, [pc, #600]	@ (80011c4 <lcd_init+0x2b8>)
 8000f6a:	889b      	ldrh	r3, [r3, #4]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b94      	ldr	r3, [pc, #592]	@ (80011c4 <lcd_init+0x2b8>)
 8000f72:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000f74:	f7ff fd08 	bl	8000988 <LCD_RD_DATA>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <lcd_init+0x2b8>)
 8000f7e:	889b      	ldrh	r3, [r3, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b8f      	ldr	r3, [pc, #572]	@ (80011c4 <lcd_init+0x2b8>)
 8000f86:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f88:	20cf      	movs	r0, #207	@ 0xcf
 8000f8a:	f7ff fcdd 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fcea 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f94:	20c1      	movs	r0, #193	@ 0xc1
 8000f96:	f7ff fce7 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f9a:	2030      	movs	r0, #48	@ 0x30
 8000f9c:	f7ff fce4 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000fa0:	20ed      	movs	r0, #237	@ 0xed
 8000fa2:	f7ff fcd1 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000fa6:	2064      	movs	r0, #100	@ 0x64
 8000fa8:	f7ff fcde 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f7ff fcdb 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000fb2:	2012      	movs	r0, #18
 8000fb4:	f7ff fcd8 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000fb8:	2081      	movs	r0, #129	@ 0x81
 8000fba:	f7ff fcd5 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000fbe:	20e8      	movs	r0, #232	@ 0xe8
 8000fc0:	f7ff fcc2 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000fc4:	2085      	movs	r0, #133	@ 0x85
 8000fc6:	f7ff fccf 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f7ff fccc 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000fd0:	207a      	movs	r0, #122	@ 0x7a
 8000fd2:	f7ff fcc9 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000fd6:	20cb      	movs	r0, #203	@ 0xcb
 8000fd8:	f7ff fcb6 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000fdc:	2039      	movs	r0, #57	@ 0x39
 8000fde:	f7ff fcc3 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000fe2:	202c      	movs	r0, #44	@ 0x2c
 8000fe4:	f7ff fcc0 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fcbd 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000fee:	2034      	movs	r0, #52	@ 0x34
 8000ff0:	f7ff fcba 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff fcb7 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ffa:	20f7      	movs	r0, #247	@ 0xf7
 8000ffc:	f7ff fca4 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001000:	2020      	movs	r0, #32
 8001002:	f7ff fcb1 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001006:	20ea      	movs	r0, #234	@ 0xea
 8001008:	f7ff fc9e 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fcab 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fca8 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001018:	20c0      	movs	r0, #192	@ 0xc0
 800101a:	f7ff fc95 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800101e:	201b      	movs	r0, #27
 8001020:	f7ff fca2 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001024:	20c1      	movs	r0, #193	@ 0xc1
 8001026:	f7ff fc8f 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff fc9c 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001030:	20c5      	movs	r0, #197	@ 0xc5
 8001032:	f7ff fc89 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001036:	2030      	movs	r0, #48	@ 0x30
 8001038:	f7ff fc96 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800103c:	2030      	movs	r0, #48	@ 0x30
 800103e:	f7ff fc93 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001042:	20c7      	movs	r0, #199	@ 0xc7
 8001044:	f7ff fc80 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001048:	20b7      	movs	r0, #183	@ 0xb7
 800104a:	f7ff fc8d 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800104e:	2036      	movs	r0, #54	@ 0x36
 8001050:	f7ff fc7a 	bl	8000948 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001054:	2008      	movs	r0, #8
 8001056:	f7ff fc87 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800105a:	203a      	movs	r0, #58	@ 0x3a
 800105c:	f7ff fc74 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001060:	2055      	movs	r0, #85	@ 0x55
 8001062:	f7ff fc81 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001066:	20b1      	movs	r0, #177	@ 0xb1
 8001068:	f7ff fc6e 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fc7b 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001072:	201a      	movs	r0, #26
 8001074:	f7ff fc78 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001078:	20b6      	movs	r0, #182	@ 0xb6
 800107a:	f7ff fc65 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800107e:	200a      	movs	r0, #10
 8001080:	f7ff fc72 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001084:	20a2      	movs	r0, #162	@ 0xa2
 8001086:	f7ff fc6f 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800108a:	20f2      	movs	r0, #242	@ 0xf2
 800108c:	f7ff fc5c 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fc69 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001096:	2026      	movs	r0, #38	@ 0x26
 8001098:	f7ff fc56 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fc63 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80010a2:	20e0      	movs	r0, #224	@ 0xe0
 80010a4:	f7ff fc50 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80010a8:	200f      	movs	r0, #15
 80010aa:	f7ff fc5d 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80010ae:	202a      	movs	r0, #42	@ 0x2a
 80010b0:	f7ff fc5a 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80010b4:	2028      	movs	r0, #40	@ 0x28
 80010b6:	f7ff fc57 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010ba:	2008      	movs	r0, #8
 80010bc:	f7ff fc54 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010c0:	200e      	movs	r0, #14
 80010c2:	f7ff fc51 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010c6:	2008      	movs	r0, #8
 80010c8:	f7ff fc4e 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80010cc:	2054      	movs	r0, #84	@ 0x54
 80010ce:	f7ff fc4b 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80010d2:	20a9      	movs	r0, #169	@ 0xa9
 80010d4:	f7ff fc48 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80010d8:	2043      	movs	r0, #67	@ 0x43
 80010da:	f7ff fc45 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80010de:	200a      	movs	r0, #10
 80010e0:	f7ff fc42 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010e4:	200f      	movs	r0, #15
 80010e6:	f7ff fc3f 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fc3c 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fc39 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fc36 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fc33 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001102:	20e1      	movs	r0, #225	@ 0xe1
 8001104:	f7ff fc20 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fc2d 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800110e:	2015      	movs	r0, #21
 8001110:	f7ff fc2a 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001114:	2017      	movs	r0, #23
 8001116:	f7ff fc27 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800111a:	2007      	movs	r0, #7
 800111c:	f7ff fc24 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001120:	2011      	movs	r0, #17
 8001122:	f7ff fc21 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001126:	2006      	movs	r0, #6
 8001128:	f7ff fc1e 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800112c:	202b      	movs	r0, #43	@ 0x2b
 800112e:	f7ff fc1b 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001132:	2056      	movs	r0, #86	@ 0x56
 8001134:	f7ff fc18 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001138:	203c      	movs	r0, #60	@ 0x3c
 800113a:	f7ff fc15 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800113e:	2005      	movs	r0, #5
 8001140:	f7ff fc12 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001144:	2010      	movs	r0, #16
 8001146:	f7ff fc0f 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800114a:	200f      	movs	r0, #15
 800114c:	f7ff fc0c 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001150:	203f      	movs	r0, #63	@ 0x3f
 8001152:	f7ff fc09 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001156:	203f      	movs	r0, #63	@ 0x3f
 8001158:	f7ff fc06 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800115c:	200f      	movs	r0, #15
 800115e:	f7ff fc03 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001162:	202b      	movs	r0, #43	@ 0x2b
 8001164:	f7ff fbf0 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fbfd 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fbfa 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fbf7 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800117a:	203f      	movs	r0, #63	@ 0x3f
 800117c:	f7ff fbf4 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001180:	202a      	movs	r0, #42	@ 0x2a
 8001182:	f7ff fbe1 	bl	8000948 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fbee 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fbeb 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fbe8 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001198:	20ef      	movs	r0, #239	@ 0xef
 800119a:	f7ff fbe5 	bl	8000968 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800119e:	2011      	movs	r0, #17
 80011a0:	f7ff fbd2 	bl	8000948 <LCD_WR_REG>
	HAL_Delay(120);
 80011a4:	2078      	movs	r0, #120	@ 0x78
 80011a6:	f001 f9f7 	bl	8002598 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80011aa:	2029      	movs	r0, #41	@ 0x29
 80011ac:	f7ff fbcc 	bl	8000948 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <lcd_init+0x2bc>)
 80011b8:	f001 fcc0 	bl	8002b3c <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020800 	.word	0x40020800
 80011c4:	200000bc 	.word	0x200000bc
 80011c8:	40020000 	.word	0x40020000

080011cc <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b298      	uxth	r0, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	8b3a      	ldrh	r2, [r7, #24]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fc8d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b298      	uxth	r0, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	b29a      	uxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	8b3a      	ldrh	r2, [r7, #24]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc7d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4413      	add	r3, r2
 8001224:	b298      	uxth	r0, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	b29a      	uxth	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	8b3a      	ldrh	r2, [r7, #24]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc6d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	b29b      	uxth	r3, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b298      	uxth	r0, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	b29a      	uxth	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	8b3a      	ldrh	r2, [r7, #24]
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc5d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	b29a      	uxth	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b298      	uxth	r0, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	8b3a      	ldrh	r2, [r7, #24]
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc4d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b29a      	uxth	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b298      	uxth	r0, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	8b3a      	ldrh	r2, [r7, #24]
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc3d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29a      	uxth	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b298      	uxth	r0, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	8b3a      	ldrh	r2, [r7, #24]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc2d 	bl	8000b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b298      	uxth	r0, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8b3a      	ldrh	r2, [r7, #24]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc1d 	bl	8000b14 <lcd_DrawPoint>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b08a      	sub	sp, #40	@ 0x28
 80012e6:	af02      	add	r7, sp, #8
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4613      	mov	r3, r2
 80012f0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	f1c3 0303 	rsb	r3, r3, #3
 8001302:	613b      	str	r3, [r7, #16]


	if (fill)
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d04f      	beq.n	80013aa <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800130a:	e029      	b.n	8001360 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff ff55 	bl	80011cc <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	429a      	cmp	r2, r3
 800132e:	ddf0      	ble.n	8001312 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2b00      	cmp	r3, #0
 8001334:	da06      	bge.n	8001344 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	009a      	lsls	r2, r3, #2
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4413      	add	r3, r2
 800133e:	3306      	adds	r3, #6
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	e00a      	b.n	800135a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	330a      	adds	r3, #10
 8001352:	613b      	str	r3, [r7, #16]
				y--;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3b01      	subs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	429a      	cmp	r2, r3
 8001366:	ddd1      	ble.n	800130c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001368:	e023      	b.n	80013b2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff ff29 	bl	80011cc <_draw_circle_8>
			if (d < 0) {
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da06      	bge.n	800138e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	009a      	lsls	r2, r3, #2
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4413      	add	r3, r2
 8001388:	3306      	adds	r3, #6
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	e00a      	b.n	80013a4 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	009a      	lsls	r2, r3, #2
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4413      	add	r3, r2
 800139a:	330a      	adds	r3, #10
 800139c:	613b      	str	r3, [r7, #16]
				y--;
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
			x++;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dddb      	ble.n	800136a <lcd_DrawCircle+0x88>
}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	@ 0x2c
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	81fb      	strh	r3, [r7, #14]
 80013ca:	460b      	mov	r3, r1
 80013cc:	81bb      	strh	r3, [r7, #12]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013da:	e048      	b.n	800146e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d145      	bne.n	800146e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013e2:	89fa      	ldrh	r2, [r7, #14]
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <lcd_ShowStr+0xc4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	1acb      	subs	r3, r1, r3
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc3f      	bgt.n	8001478 <lcd_ShowStr+0xbc>
 80013f8:	89ba      	ldrh	r2, [r7, #12]
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <lcd_ShowStr+0xc4>)
 80013fc:	885b      	ldrh	r3, [r3, #2]
 80013fe:	4619      	mov	r1, r3
 8001400:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001404:	1acb      	subs	r3, r1, r3
 8001406:	429a      	cmp	r2, r3
 8001408:	dc36      	bgt.n	8001478 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b80      	cmp	r3, #128	@ 0x80
 8001410:	d902      	bls.n	8001418 <lcd_ShowStr+0x5c>
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	e02a      	b.n	800146e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	d10b      	bne.n	8001438 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001420:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001424:	b29a      	uxth	r2, r3
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800142c:	8abb      	ldrh	r3, [r7, #20]
 800142e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e017      	b.n	8001468 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	88fc      	ldrh	r4, [r7, #6]
 800143e:	89b9      	ldrh	r1, [r7, #12]
 8001440:	89f8      	ldrh	r0, [r7, #14]
 8001442:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4623      	mov	r3, r4
 8001454:	f7ff fb76 	bl	8000b44 <lcd_ShowChar>
					x+=sizey/2;
 8001458:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	4413      	add	r3, r2
 8001466:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1b2      	bne.n	80013dc <lcd_ShowStr+0x20>
 8001476:	e000      	b.n	800147a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001478:	bf00      	nop
			}
		}
	}
}
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	200000bc 	.word	0x200000bc

08001484 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af04      	add	r7, sp, #16
 800148a:	60ba      	str	r2, [r7, #8]
 800148c:	461a      	mov	r2, r3
 800148e:	4603      	mov	r3, r0
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	460b      	mov	r3, r1
 8001494:	81bb      	strh	r3, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7fe fe94 	bl	80001c8 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <lcd_StrCenter+0x60>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	8afb      	ldrh	r3, [r7, #22]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	0fda      	lsrs	r2, r3, #31
 80014b2:	4413      	add	r3, r2
 80014b4:	105b      	asrs	r3, r3, #1
 80014b6:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014b8:	89fa      	ldrh	r2, [r7, #14]
 80014ba:	8abb      	ldrh	r3, [r7, #20]
 80014bc:	4413      	add	r3, r2
 80014be:	b298      	uxth	r0, r3
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	89b9      	ldrh	r1, [r7, #12]
 80014c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	8c3b      	ldrh	r3, [r7, #32]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f7ff ff70 	bl	80013bc <lcd_ShowStr>
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000bc 	.word	0x200000bc

080014e8 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <led7_init+0x14>)
 80014f2:	f001 fb23 	bl	8002b3c <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021800 	.word	0x40021800

08001500 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001504:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <led7_Scan+0x104>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <led7_Scan+0x104>)
 800150e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001510:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <led7_Scan+0x108>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <led7_Scan+0x10c>)
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <led7_Scan+0x104>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b36      	ldr	r3, [pc, #216]	@ (8001604 <led7_Scan+0x104>)
 800152c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800152e:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <led7_Scan+0x108>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d846      	bhi.n	80015c4 <led7_Scan+0xc4>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <led7_Scan+0x3c>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	0800156b 	.word	0x0800156b
 8001544:	08001589 	.word	0x08001589
 8001548:	080015a7 	.word	0x080015a7
	case 0:
		spi_buffer |= 0x00b0;
 800154c:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <led7_Scan+0x104>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <led7_Scan+0x104>)
 8001558:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <led7_Scan+0x104>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <led7_Scan+0x104>)
 8001566:	801a      	strh	r2, [r3, #0]
		break;
 8001568:	e02d      	b.n	80015c6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800156a:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <led7_Scan+0x104>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <led7_Scan+0x104>)
 8001576:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <led7_Scan+0x104>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f023 0320 	bic.w	r3, r3, #32
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <led7_Scan+0x104>)
 8001584:	801a      	strh	r2, [r3, #0]
		break;
 8001586:	e01e      	b.n	80015c6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <led7_Scan+0x104>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <led7_Scan+0x104>)
 8001594:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <led7_Scan+0x104>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f023 0310 	bic.w	r3, r3, #16
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <led7_Scan+0x104>)
 80015a2:	801a      	strh	r2, [r3, #0]
		break;
 80015a4:	e00f      	b.n	80015c6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <led7_Scan+0x104>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <led7_Scan+0x104>)
 80015b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <led7_Scan+0x104>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <led7_Scan+0x104>)
 80015c0:	801a      	strh	r2, [r3, #0]
		break;
 80015c2:	e000      	b.n	80015c6 <led7_Scan+0xc6>
	default:
		break;
 80015c4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <led7_Scan+0x108>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	425a      	negs	r2, r3
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	bf58      	it	pl
 80015d8:	4253      	negpl	r3, r2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <led7_Scan+0x108>)
 80015de:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2140      	movs	r1, #64	@ 0x40
 80015e4:	480a      	ldr	r0, [pc, #40]	@ (8001610 <led7_Scan+0x110>)
 80015e6:	f001 faa9 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015ea:	2301      	movs	r3, #1
 80015ec:	2202      	movs	r2, #2
 80015ee:	4905      	ldr	r1, [pc, #20]	@ (8001604 <led7_Scan+0x104>)
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <led7_Scan+0x114>)
 80015f2:	f001 ffc4 	bl	800357e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2140      	movs	r1, #64	@ 0x40
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <led7_Scan+0x110>)
 80015fc:	f001 fa9e 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000024 	.word	0x20000024
 8001608:	200000c2 	.word	0x200000c2
 800160c:	20000020 	.word	0x20000020
 8001610:	40021800 	.word	0x40021800
 8001614:	200000cc 	.word	0x200000cc

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f000 ff4a 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001620:	f000 f826 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001624:	f7ff f898 	bl	8000758 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001628:	f000 fa9e 	bl	8001b68 <MX_TIM2_Init>
  MX_SPI1_Init();
 800162c:	f000 f9aa 	bl	8001984 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001630:	f7fe ffc2 	bl	80005b8 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001634:	f000 f886 	bl	8001744 <system_init>
  lcd_Clear(WHITE);
 8001638:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800163c:	f7ff fa02 	bl	8000a44 <lcd_Clear>
  normal_run();
 8001640:	f000 f900 	bl	8001844 <normal_run>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8001644:	bf00      	nop
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <main+0x54>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0fb      	beq.n	8001646 <main+0x2e>
	  flag_timer2 = 0;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <main+0x54>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001654:	f7fe ff44 	bl	80004e0 <button_Scan>
	  button_bai3();
 8001658:	f000 f8b8 	bl	80017cc <button_bai3>
	  test_LedDebug();
 800165c:	f000 f892 	bl	8001784 <test_LedDebug>
	  Blink();
 8001660:	f000 faf4 	bl	8001c4c <Blink>
	  TrafficLight_Update();
 8001664:	f000 fb9a 	bl	8001d9c <TrafficLight_Update>
	  while(!flag_timer2);
 8001668:	e7ec      	b.n	8001644 <main+0x2c>
 800166a:	bf00      	nop
 800166c:	200000c6 	.word	0x200000c6

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	@ 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2230      	movs	r2, #48	@ 0x30
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fa32 	bl	8004ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	4a27      	ldr	r2, [pc, #156]	@ (800173c <SystemClock_Config+0xcc>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <SystemClock_Config+0xd0>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d4:	2310      	movs	r3, #16
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d8:	2302      	movs	r3, #2
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	@ 0xa8
 80016e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fa55 	bl	8002ba4 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001700:	f000 f8ea 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001710:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001716:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2105      	movs	r1, #5
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fcb6 	bl	8003094 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172e:	f000 f8d3 	bl	80018d8 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	@ 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2120      	movs	r1, #32
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <system_init+0x3c>)
 800174e:	f001 f9f5 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2140      	movs	r1, #64	@ 0x40
 8001756:	480a      	ldr	r0, [pc, #40]	@ (8001780 <system_init+0x3c>)
 8001758:	f001 f9f0 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2110      	movs	r1, #16
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <system_init+0x3c>)
 8001762:	f001 f9eb 	bl	8002b3c <HAL_GPIO_WritePin>
	  timer_init();
 8001766:	f000 f8bd 	bl	80018e4 <timer_init>
	  led7_init();
 800176a:	f7ff febd 	bl	80014e8 <led7_init>
	  button_init();
 800176e:	f7fe feab 	bl	80004c8 <button_init>
	  lcd_init();
 8001772:	f7ff fbcb 	bl	8000f0c <lcd_init>

	  setTimer2(50);
 8001776:	2032      	movs	r0, #50	@ 0x32
 8001778:	f000 f8be 	bl	80018f8 <setTimer2>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <test_LedDebug>:

uint8_t count_led_debug = 0;
uint8_t count_led_Y0 = 0;
uint8_t count_led_Y1 = 0;

void test_LedDebug(){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <test_LedDebug+0x3c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <test_LedDebug+0x40>)
 8001790:	fb83 1302 	smull	r1, r3, r3, r2
 8001794:	10d9      	asrs	r1, r3, #3
 8001796:	17d3      	asrs	r3, r2, #31
 8001798:	1ac9      	subs	r1, r1, r3
 800179a:	460b      	mov	r3, r1
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	1ad1      	subs	r1, r2, r3
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <test_LedDebug+0x3c>)
 80017a8:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <test_LedDebug+0x3c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80017b2:	2110      	movs	r1, #16
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <test_LedDebug+0x44>)
 80017b6:	f001 f9da 	bl	8002b6e <HAL_GPIO_TogglePin>
	}
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000c5 	.word	0x200000c5
 80017c4:	66666667 	.word	0x66666667
 80017c8:	40021000 	.word	0x40021000

080017cc <button_bai3>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void button_bai3() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    for(int i = 0; i < 16; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	e029      	b.n	800182c <button_bai3+0x60>
        if(button_count[i] %40 == 1) {
 80017d8:	4a18      	ldr	r2, [pc, #96]	@ (800183c <button_bai3+0x70>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <button_bai3+0x74>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	0959      	lsrs	r1, r3, #5
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d116      	bne.n	8001826 <button_bai3+0x5a>
            // Check which button is pressed and call the appropriate function
            switch (i) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d00f      	beq.n	800181e <button_bai3+0x52>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	dc0f      	bgt.n	8001824 <button_bai3+0x58>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <button_bai3+0x46>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <button_bai3+0x4c>
                case 2:
                    handleConfirmValue();
                    break;

                default:
                    break;
 8001810:	e008      	b.n	8001824 <button_bai3+0x58>
                    handleSwitchState();
 8001812:	f000 fd1d 	bl	8002250 <handleSwitchState>
                    break;
 8001816:	e006      	b.n	8001826 <button_bai3+0x5a>
                    handleIncreaseCounter();
 8001818:	f000 fdca 	bl	80023b0 <handleIncreaseCounter>
                    break;
 800181c:	e003      	b.n	8001826 <button_bai3+0x5a>
                    handleConfirmValue();
 800181e:	f000 fdf5 	bl	800240c <handleConfirmValue>
                    break;
 8001822:	e000      	b.n	8001826 <button_bai3+0x5a>
                    break;
 8001824:	bf00      	nop
    for(int i = 0; i < 16; i++) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	ddd2      	ble.n	80017d8 <button_bai3+0xc>
            }


        }
    }
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000000 	.word	0x20000000
 8001840:	cccccccd 	.word	0xcccccccd

08001844 <normal_run>:

void normal_run(){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 800184a:	231f      	movs	r3, #31
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2314      	movs	r3, #20
 8001850:	22f0      	movs	r2, #240	@ 0xf0
 8001852:	2100      	movs	r1, #0
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff f927 	bl	8000aa8 <lcd_Fill>
	lcd_StrCenter(0, 2, "Normal state", RED, BLUE, 16, 1);
 800185a:	2301      	movs	r3, #1
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	2310      	movs	r3, #16
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	231f      	movs	r3, #31
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800186a:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <normal_run+0x88>)
 800186c:	2102      	movs	r1, #2
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fe08 	bl	8001484 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Traffic light", WHITE, RED, 24, 0);
 8001874:	2300      	movs	r3, #0
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	2318      	movs	r3, #24
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001886:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <normal_run+0x8c>)
 8001888:	211e      	movs	r1, #30
 800188a:	2014      	movs	r0, #20
 800188c:	f7ff fd96 	bl	80013bc <lcd_ShowStr>
	lcd_DrawCircle(60, 120, GREEN, 40, 1);
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2328      	movs	r3, #40	@ 0x28
 8001896:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800189a:	2178      	movs	r1, #120	@ 0x78
 800189c:	203c      	movs	r0, #60	@ 0x3c
 800189e:	f7ff fd20 	bl	80012e2 <lcd_DrawCircle>
	lcd_DrawCircle(160, 120,RED, 40, 1);
 80018a2:	2301      	movs	r3, #1
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2328      	movs	r3, #40	@ 0x28
 80018a8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80018ac:	2178      	movs	r1, #120	@ 0x78
 80018ae:	20a0      	movs	r0, #160	@ 0xa0
 80018b0:	f7ff fd17 	bl	80012e2 <lcd_DrawCircle>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <normal_run+0x90>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	235a      	movs	r3, #90	@ 0x5a
 80018ba:	225a      	movs	r2, #90	@ 0x5a
 80018bc:	21c8      	movs	r1, #200	@ 0xc8
 80018be:	2050      	movs	r0, #80	@ 0x50
 80018c0:	f7ff faaa 	bl	8000e18 <lcd_ShowPicture>
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08004b58 	.word	0x08004b58
 80018d0:	08004b68 	.word	0x08004b68
 80018d4:	08007b64 	.word	0x08007b64

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <timer_init+0x10>)
 80018ea:	f002 fbfb 	bl	80040e4 <HAL_TIM_Base_Start_IT>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000124 	.word	0x20000124

080018f8 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001902:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <setTimer2+0x2c>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <setTimer2+0x2c>)
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <setTimer2+0x30>)
 800190e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <setTimer2+0x34>)
 8001912:	2200      	movs	r2, #0
 8001914:	801a      	strh	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200000ca 	.word	0x200000ca
 8001928:	200000c8 	.word	0x200000c8
 800192c:	200000c6 	.word	0x200000c6

08001930 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001940:	d116      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001954:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001960:	2201      	movs	r2, #1
 8001962:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800196a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 800196c:	f7ff fdc8 	bl	8001500 <led7_Scan>
	}
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000c8 	.word	0x200000c8
 800197c:	200000c6 	.word	0x200000c6
 8001980:	200000ca 	.word	0x200000ca

08001984 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_SPI1_Init+0x64>)
 800198a:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <MX_SPI1_Init+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_SPI1_Init+0x64>)
 8001990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001994:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <MX_SPI1_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <MX_SPI1_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019d0:	220a      	movs	r2, #10
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <MX_SPI1_Init+0x64>)
 80019d6:	f001 fd49 	bl	800346c <HAL_SPI_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019e0:	f7ff ff7a 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000cc 	.word	0x200000cc
 80019ec:	40013000 	.word	0x40013000

080019f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <HAL_SPI_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12b      	bne.n	8001a6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	4a17      	ldr	r2, [pc, #92]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a10      	ldr	r2, [pc, #64]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a4a:	2338      	movs	r3, #56	@ 0x38
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <HAL_SPI_MspInit+0x8c>)
 8001a66:	f000 fecd 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	@ 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40013000 	.word	0x40013000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_MspInit+0x4c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 fd17 	bl	8002558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <TIM2_IRQHandler+0x10>)
 8001b36:	f002 fb45 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000124 	.word	0x20000124

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001b86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001b8e:	f240 3247 	movw	r2, #839	@ 0x347
 8001b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001b9c:	2263      	movs	r2, #99	@ 0x63
 8001b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bac:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001bae:	f002 fa49 	bl	8004044 <HAL_TIM_Base_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb8:	f7ff fe8e 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001bca:	f002 fc03 	bl	80043d4 <HAL_TIM_ConfigClockSource>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bd4:	f7ff fe80 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_TIM2_Init+0x94>)
 8001be6:	f002 fe1f 	bl	8004828 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bf0:	f7ff fe72 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000124 	.word	0x20000124

08001c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c10:	d115      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	201c      	movs	r0, #28
 8001c34:	f000 fdaf 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c38:	201c      	movs	r0, #28
 8001c3a:	f000 fdc8 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <Blink>:
uint8_t counter_blink =0;
uint8_t GREEN_COUNTER = 1;
uint8_t YELLOW_COUNTER = 1;
uint8_t RED_COUNTER = 1;

void Blink(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af04      	add	r7, sp, #16
    counter_blink = (counter_blink + 1) % 10;  // Increment and wrap around every 10 ticks
 8001c52:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <Blink+0x134>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <Blink+0x138>)
 8001c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c5e:	1099      	asrs	r1, r3, #2
 8001c60:	17d3      	asrs	r3, r2, #31
 8001c62:	1ac9      	subs	r1, r1, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	1ad1      	subs	r1, r2, r3
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <Blink+0x134>)
 8001c72:	701a      	strb	r2, [r3, #0]
    if(systemState != NORMAL){
 8001c74:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <Blink+0x13c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d07e      	beq.n	8001d7a <Blink+0x12e>
		if (counter_blink == 0) {  // Toggle every 10 ticks
 8001c7c:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <Blink+0x134>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d17a      	bne.n	8001d7a <Blink+0x12e>
			static uint8_t isLightOn = 1;  // Track light state (on/off)

			if (isLightOn) {
 8001c84:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <Blink+0x140>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d012      	beq.n	8001cb2 <Blink+0x66>
				// Turn off the lights (white circle)
				lcd_DrawCircle(60, 120, WHITE, 40, 1);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2328      	movs	r3, #40	@ 0x28
 8001c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c96:	2178      	movs	r1, #120	@ 0x78
 8001c98:	203c      	movs	r0, #60	@ 0x3c
 8001c9a:	f7ff fb22 	bl	80012e2 <lcd_DrawCircle>
				lcd_DrawCircle(160, 120, WHITE, 40, 1);
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2328      	movs	r3, #40	@ 0x28
 8001ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca8:	2178      	movs	r1, #120	@ 0x78
 8001caa:	20a0      	movs	r0, #160	@ 0xa0
 8001cac:	f7ff fb19 	bl	80012e2 <lcd_DrawCircle>
 8001cb0:	e059      	b.n	8001d66 <Blink+0x11a>
			} else {
				// Display the current light state in modify mode
				switch (systemState) {
 8001cb2:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <Blink+0x13c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d03a      	beq.n	8001d30 <Blink+0xe4>
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	dc52      	bgt.n	8001d64 <Blink+0x118>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <Blink+0x7c>
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d01a      	beq.n	8001cfc <Blink+0xb0>
					case MODIFY_YELLOW_LIGHT:
						lcd_DrawCircle(160, 120, YELLOW, 40, 1);  // Show YELLOW
						lcd_ShowIntNum(140, 105, YELLOW_DURATION, 2, WHITE, YELLOW, 32);
						break;
					default:
						break;
 8001cc6:	e04d      	b.n	8001d64 <Blink+0x118>
						lcd_DrawCircle(160, 120, RED, 40, 1);  // Show RED
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2328      	movs	r3, #40	@ 0x28
 8001cce:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cd2:	2178      	movs	r1, #120	@ 0x78
 8001cd4:	20a0      	movs	r0, #160	@ 0xa0
 8001cd6:	f7ff fb04 	bl	80012e2 <lcd_DrawCircle>
						lcd_ShowIntNum(140, 105, RED_DURATION, 2, WHITE, RED, 32);
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <Blink+0x144>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	2169      	movs	r1, #105	@ 0x69
 8001cf4:	208c      	movs	r0, #140	@ 0x8c
 8001cf6:	f7ff f811 	bl	8000d1c <lcd_ShowIntNum>
						break;
 8001cfa:	e034      	b.n	8001d66 <Blink+0x11a>
						lcd_DrawCircle(60, 120, GREEN, 40, 1);  // Show GREEN
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2328      	movs	r3, #40	@ 0x28
 8001d02:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d06:	2178      	movs	r1, #120	@ 0x78
 8001d08:	203c      	movs	r0, #60	@ 0x3c
 8001d0a:	f7ff faea 	bl	80012e2 <lcd_DrawCircle>
						lcd_ShowIntNum(40, 105, GREEN_DURATION, 2, WHITE, GREEN, 32);
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <Blink+0x148>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2320      	movs	r3, #32
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2302      	movs	r3, #2
 8001d26:	2169      	movs	r1, #105	@ 0x69
 8001d28:	2028      	movs	r0, #40	@ 0x28
 8001d2a:	f7fe fff7 	bl	8000d1c <lcd_ShowIntNum>
						break;
 8001d2e:	e01a      	b.n	8001d66 <Blink+0x11a>
						lcd_DrawCircle(160, 120, YELLOW, 40, 1);  // Show YELLOW
 8001d30:	2301      	movs	r3, #1
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2328      	movs	r3, #40	@ 0x28
 8001d36:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d3a:	2178      	movs	r1, #120	@ 0x78
 8001d3c:	20a0      	movs	r0, #160	@ 0xa0
 8001d3e:	f7ff fad0 	bl	80012e2 <lcd_DrawCircle>
						lcd_ShowIntNum(140, 105, YELLOW_DURATION, 2, WHITE, YELLOW, 32);
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <Blink+0x14c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	2320      	movs	r3, #32
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	2169      	movs	r1, #105	@ 0x69
 8001d5c:	208c      	movs	r0, #140	@ 0x8c
 8001d5e:	f7fe ffdd 	bl	8000d1c <lcd_ShowIntNum>
						break;
 8001d62:	e000      	b.n	8001d66 <Blink+0x11a>
						break;
 8001d64:	bf00      	nop
				}
			}

			isLightOn = !isLightOn;  // Toggle light state
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <Blink+0x140>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <Blink+0x140>)
 8001d78:	701a      	strb	r2, [r3, #0]
		}
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000016e 	.word	0x2000016e
 8001d84:	66666667 	.word	0x66666667
 8001d88:	200000c4 	.word	0x200000c4
 8001d8c:	2000003c 	.word	0x2000003c
 8001d90:	20000034 	.word	0x20000034
 8001d94:	2000002c 	.word	0x2000002c
 8001d98:	20000030 	.word	0x20000030

08001d9c <TrafficLight_Update>:



void TrafficLight_Update(void) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af04      	add	r7, sp, #16
    counter = (counter + 1) % 20;
 8001da2:	4b9c      	ldr	r3, [pc, #624]	@ (8002014 <TrafficLight_Update+0x278>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	4b9b      	ldr	r3, [pc, #620]	@ (8002018 <TrafficLight_Update+0x27c>)
 8001daa:	fb83 1302 	smull	r1, r3, r3, r2
 8001dae:	10d9      	asrs	r1, r3, #3
 8001db0:	17d3      	asrs	r3, r2, #31
 8001db2:	1ac9      	subs	r1, r1, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	1ad1      	subs	r1, r2, r3
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	4b94      	ldr	r3, [pc, #592]	@ (8002014 <TrafficLight_Update+0x278>)
 8001dc2:	701a      	strb	r2, [r3, #0]
//    counter_blink =(counter_blink+1)%10;
    if (counter == 0) {
 8001dc4:	4b93      	ldr	r3, [pc, #588]	@ (8002014 <TrafficLight_Update+0x278>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 822f 	bne.w	800222c <TrafficLight_Update+0x490>
        if (systemState == NORMAL) {
 8001dce:	4b93      	ldr	r3, [pc, #588]	@ (800201c <TrafficLight_Update+0x280>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 822a 	bne.w	800222c <TrafficLight_Update+0x490>
            stateCounter++;
 8001dd8:	4b91      	ldr	r3, [pc, #580]	@ (8002020 <TrafficLight_Update+0x284>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b8f      	ldr	r3, [pc, #572]	@ (8002020 <TrafficLight_Update+0x284>)
 8001de2:	701a      	strb	r2, [r3, #0]
            GREEN_COUNTER++;
 8001de4:	4b8f      	ldr	r3, [pc, #572]	@ (8002024 <TrafficLight_Update+0x288>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b8d      	ldr	r3, [pc, #564]	@ (8002024 <TrafficLight_Update+0x288>)
 8001dee:	701a      	strb	r2, [r3, #0]
            YELLOW_COUNTER++;
 8001df0:	4b8d      	ldr	r3, [pc, #564]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b8b      	ldr	r3, [pc, #556]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001dfa:	701a      	strb	r2, [r3, #0]
            RED_COUNTER++;
 8001dfc:	4b8b      	ldr	r3, [pc, #556]	@ (800202c <TrafficLight_Update+0x290>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b89      	ldr	r3, [pc, #548]	@ (800202c <TrafficLight_Update+0x290>)
 8001e06:	701a      	strb	r2, [r3, #0]

            // Traffic light state transitions
            switch (currentState) {
 8001e08:	4b89      	ldr	r3, [pc, #548]	@ (8002030 <TrafficLight_Update+0x294>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	f200 820d 	bhi.w	800222c <TrafficLight_Update+0x490>
 8001e12:	a201      	add	r2, pc, #4	@ (adr r2, 8001e18 <TrafficLight_Update+0x7c>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001f1b 	.word	0x08001f1b
 8001e20:	0800203d 	.word	0x0800203d
 8001e24:	0800212f 	.word	0x0800212f
                case NS_GREEN_EW_RED:
					lcd_DrawCircle(60, 120, GREEN, 40, 1);
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2328      	movs	r3, #40	@ 0x28
 8001e2e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001e32:	2178      	movs	r1, #120	@ 0x78
 8001e34:	203c      	movs	r0, #60	@ 0x3c
 8001e36:	f7ff fa54 	bl	80012e2 <lcd_DrawCircle>
					lcd_DrawCircle(160, 120, RED, 40, 1);
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2328      	movs	r3, #40	@ 0x28
 8001e40:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e44:	2178      	movs	r1, #120	@ 0x78
 8001e46:	20a0      	movs	r0, #160	@ 0xa0
 8001e48:	f7ff fa4b 	bl	80012e2 <lcd_DrawCircle>
                    lcd_ShowIntNum(40, 105, GREEN_COUNTER, 2, WHITE, GREEN, 32);
 8001e4c:	4b75      	ldr	r3, [pc, #468]	@ (8002024 <TrafficLight_Update+0x288>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	2320      	movs	r3, #32
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2302      	movs	r3, #2
 8001e64:	2169      	movs	r1, #105	@ 0x69
 8001e66:	2028      	movs	r0, #40	@ 0x28
 8001e68:	f7fe ff58 	bl	8000d1c <lcd_ShowIntNum>
                    lcd_ShowIntNum(140, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <TrafficLight_Update+0x290>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	2320      	movs	r3, #32
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2302      	movs	r3, #2
 8001e84:	2169      	movs	r1, #105	@ 0x69
 8001e86:	208c      	movs	r0, #140	@ 0x8c
 8001e88:	f7fe ff48 	bl	8000d1c <lcd_ShowIntNum>
                    if (stateCounter > GREEN_DURATION) {
 8001e8c:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <TrafficLight_Update+0x284>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <TrafficLight_Update+0x298>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f340 81c1 	ble.w	800221e <TrafficLight_Update+0x482>
                        currentState = NS_YELLOW_EW_RED;
 8001e9c:	4b64      	ldr	r3, [pc, #400]	@ (8002030 <TrafficLight_Update+0x294>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
                        stateCounter = 1;
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8002020 <TrafficLight_Update+0x284>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
                        GREEN_COUNTER = 1;
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <TrafficLight_Update+0x288>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
                        YELLOW_COUNTER = 1;
 8001eae:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]

						lcd_DrawCircle(60, 120, YELLOW, 40, 1);
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2328      	movs	r3, #40	@ 0x28
 8001eba:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001ebe:	2178      	movs	r1, #120	@ 0x78
 8001ec0:	203c      	movs	r0, #60	@ 0x3c
 8001ec2:	f7ff fa0e 	bl	80012e2 <lcd_DrawCircle>
						lcd_DrawCircle(160, 120, RED, 40, 1);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2328      	movs	r3, #40	@ 0x28
 8001ecc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ed0:	2178      	movs	r1, #120	@ 0x78
 8001ed2:	20a0      	movs	r0, #160	@ 0xa0
 8001ed4:	f7ff fa05 	bl	80012e2 <lcd_DrawCircle>


                        lcd_ShowIntNum(40, 105, YELLOW_COUNTER, 2, WHITE, YELLOW, 32);
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	2320      	movs	r3, #32
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	2169      	movs	r1, #105	@ 0x69
 8001ef2:	2028      	movs	r0, #40	@ 0x28
 8001ef4:	f7fe ff12 	bl	8000d1c <lcd_ShowIntNum>
                        lcd_ShowIntNum(140, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <TrafficLight_Update+0x290>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2320      	movs	r3, #32
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	2169      	movs	r1, #105	@ 0x69
 8001f12:	208c      	movs	r0, #140	@ 0x8c
 8001f14:	f7fe ff02 	bl	8000d1c <lcd_ShowIntNum>
                    }
                    break;
 8001f18:	e181      	b.n	800221e <TrafficLight_Update+0x482>

                case NS_YELLOW_EW_RED:
                	lcd_DrawCircle(60, 120, YELLOW, 40, 1);
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2328      	movs	r3, #40	@ 0x28
 8001f20:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001f24:	2178      	movs	r1, #120	@ 0x78
 8001f26:	203c      	movs	r0, #60	@ 0x3c
 8001f28:	f7ff f9db 	bl	80012e2 <lcd_DrawCircle>
                	lcd_DrawCircle(160, 120, RED, 40, 1);
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2328      	movs	r3, #40	@ 0x28
 8001f32:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001f36:	2178      	movs	r1, #120	@ 0x78
 8001f38:	20a0      	movs	r0, #160	@ 0xa0
 8001f3a:	f7ff f9d2 	bl	80012e2 <lcd_DrawCircle>
                    lcd_ShowIntNum(40, 105, YELLOW_COUNTER, 2, WHITE, YELLOW, 32);
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	2320      	movs	r3, #32
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2302      	movs	r3, #2
 8001f56:	2169      	movs	r1, #105	@ 0x69
 8001f58:	2028      	movs	r0, #40	@ 0x28
 8001f5a:	f7fe fedf 	bl	8000d1c <lcd_ShowIntNum>
                    lcd_ShowIntNum(140, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8001f5e:	4b33      	ldr	r3, [pc, #204]	@ (800202c <TrafficLight_Update+0x290>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	2320      	movs	r3, #32
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2302      	movs	r3, #2
 8001f76:	2169      	movs	r1, #105	@ 0x69
 8001f78:	208c      	movs	r0, #140	@ 0x8c
 8001f7a:	f7fe fecf 	bl	8000d1c <lcd_ShowIntNum>
                    if (stateCounter > YELLOW_DURATION) {
 8001f7e:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <TrafficLight_Update+0x284>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <TrafficLight_Update+0x29c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f340 814a 	ble.w	8002222 <TrafficLight_Update+0x486>
                        currentState = NS_RED_EW_GREEN;
 8001f8e:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <TrafficLight_Update+0x294>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
                        stateCounter = 1;
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <TrafficLight_Update+0x284>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
                        YELLOW_COUNTER = 1;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <TrafficLight_Update+0x28c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
                        RED_COUNTER = 1;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <TrafficLight_Update+0x290>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
                        GREEN_COUNTER = 1;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <TrafficLight_Update+0x288>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]

						lcd_DrawCircle(60, 120, RED, 40, 1);
 8001fac:	2301      	movs	r3, #1
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2328      	movs	r3, #40	@ 0x28
 8001fb2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001fb6:	2178      	movs	r1, #120	@ 0x78
 8001fb8:	203c      	movs	r0, #60	@ 0x3c
 8001fba:	f7ff f992 	bl	80012e2 <lcd_DrawCircle>
						lcd_DrawCircle(160, 120, GREEN, 40, 1);
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2328      	movs	r3, #40	@ 0x28
 8001fc4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001fc8:	2178      	movs	r1, #120	@ 0x78
 8001fca:	20a0      	movs	r0, #160	@ 0xa0
 8001fcc:	f7ff f989 	bl	80012e2 <lcd_DrawCircle>



                        lcd_ShowIntNum(40, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8001fd0:	4b16      	ldr	r3, [pc, #88]	@ (800202c <TrafficLight_Update+0x290>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	2169      	movs	r1, #105	@ 0x69
 8001fea:	2028      	movs	r0, #40	@ 0x28
 8001fec:	f7fe fe96 	bl	8000d1c <lcd_ShowIntNum>
                        lcd_ShowIntNum(140, 105, GREEN_COUNTER, 2, WHITE, GREEN, 32);
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <TrafficLight_Update+0x288>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	2169      	movs	r1, #105	@ 0x69
 800200a:	208c      	movs	r0, #140	@ 0x8c
 800200c:	f7fe fe86 	bl	8000d1c <lcd_ShowIntNum>
                    }
                    break;
 8002010:	e107      	b.n	8002222 <TrafficLight_Update+0x486>
 8002012:	bf00      	nop
 8002014:	2000016d 	.word	0x2000016d
 8002018:	66666667 	.word	0x66666667
 800201c:	200000c4 	.word	0x200000c4
 8002020:	20000038 	.word	0x20000038
 8002024:	20000039 	.word	0x20000039
 8002028:	2000003a 	.word	0x2000003a
 800202c:	2000003b 	.word	0x2000003b
 8002030:	2000016c 	.word	0x2000016c
 8002034:	2000002c 	.word	0x2000002c
 8002038:	20000030 	.word	0x20000030

                case NS_RED_EW_GREEN:
                	lcd_DrawCircle(60, 120, RED, 40, 1);
 800203c:	2301      	movs	r3, #1
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2328      	movs	r3, #40	@ 0x28
 8002042:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002046:	2178      	movs	r1, #120	@ 0x78
 8002048:	203c      	movs	r0, #60	@ 0x3c
 800204a:	f7ff f94a 	bl	80012e2 <lcd_DrawCircle>
                	lcd_DrawCircle(160, 120, GREEN, 40, 1);
 800204e:	2301      	movs	r3, #1
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2328      	movs	r3, #40	@ 0x28
 8002054:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002058:	2178      	movs	r1, #120	@ 0x78
 800205a:	20a0      	movs	r0, #160	@ 0xa0
 800205c:	f7ff f941 	bl	80012e2 <lcd_DrawCircle>
                    lcd_ShowIntNum(40, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8002060:	4b74      	ldr	r3, [pc, #464]	@ (8002234 <TrafficLight_Update+0x498>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	2320      	movs	r3, #32
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2302      	movs	r3, #2
 8002078:	2169      	movs	r1, #105	@ 0x69
 800207a:	2028      	movs	r0, #40	@ 0x28
 800207c:	f7fe fe4e 	bl	8000d1c <lcd_ShowIntNum>
                    lcd_ShowIntNum(140, 105, GREEN_COUNTER, 2, WHITE, GREEN, 32);
 8002080:	4b6d      	ldr	r3, [pc, #436]	@ (8002238 <TrafficLight_Update+0x49c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	2320      	movs	r3, #32
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2302      	movs	r3, #2
 8002098:	2169      	movs	r1, #105	@ 0x69
 800209a:	208c      	movs	r0, #140	@ 0x8c
 800209c:	f7fe fe3e 	bl	8000d1c <lcd_ShowIntNum>
                    if (stateCounter > GREEN_DURATION) {
 80020a0:	4b66      	ldr	r3, [pc, #408]	@ (800223c <TrafficLight_Update+0x4a0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <TrafficLight_Update+0x4a4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	f340 80bb 	ble.w	8002226 <TrafficLight_Update+0x48a>
                        currentState = NS_RED_EW_YELLOW;
 80020b0:	4b64      	ldr	r3, [pc, #400]	@ (8002244 <TrafficLight_Update+0x4a8>)
 80020b2:	2203      	movs	r2, #3
 80020b4:	701a      	strb	r2, [r3, #0]
                        stateCounter = 1;
 80020b6:	4b61      	ldr	r3, [pc, #388]	@ (800223c <TrafficLight_Update+0x4a0>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
                        GREEN_COUNTER = 1;
 80020bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002238 <TrafficLight_Update+0x49c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
                        YELLOW_COUNTER = 1;
 80020c2:	4b61      	ldr	r3, [pc, #388]	@ (8002248 <TrafficLight_Update+0x4ac>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]

						lcd_DrawCircle(60, 120, RED, 40, 1);
 80020c8:	2301      	movs	r3, #1
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2328      	movs	r3, #40	@ 0x28
 80020ce:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80020d2:	2178      	movs	r1, #120	@ 0x78
 80020d4:	203c      	movs	r0, #60	@ 0x3c
 80020d6:	f7ff f904 	bl	80012e2 <lcd_DrawCircle>
						lcd_DrawCircle(160, 120, YELLOW, 40, 1);
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2328      	movs	r3, #40	@ 0x28
 80020e0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80020e4:	2178      	movs	r1, #120	@ 0x78
 80020e6:	20a0      	movs	r0, #160	@ 0xa0
 80020e8:	f7ff f8fb 	bl	80012e2 <lcd_DrawCircle>

                        lcd_ShowIntNum(40, 105, RED_COUNTER, 2, WHITE, RED, 32);
 80020ec:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <TrafficLight_Update+0x498>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2320      	movs	r3, #32
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2302      	movs	r3, #2
 8002104:	2169      	movs	r1, #105	@ 0x69
 8002106:	2028      	movs	r0, #40	@ 0x28
 8002108:	f7fe fe08 	bl	8000d1c <lcd_ShowIntNum>
                        lcd_ShowIntNum(140, 105, YELLOW_COUNTER, 2, WHITE, YELLOW, 32);
 800210c:	4b4e      	ldr	r3, [pc, #312]	@ (8002248 <TrafficLight_Update+0x4ac>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	2320      	movs	r3, #32
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2302      	movs	r3, #2
 8002124:	2169      	movs	r1, #105	@ 0x69
 8002126:	208c      	movs	r0, #140	@ 0x8c
 8002128:	f7fe fdf8 	bl	8000d1c <lcd_ShowIntNum>
                    }
                    break;
 800212c:	e07b      	b.n	8002226 <TrafficLight_Update+0x48a>

                case NS_RED_EW_YELLOW:
        			lcd_DrawCircle(60, 120, RED, 40, 1);
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2328      	movs	r3, #40	@ 0x28
 8002134:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002138:	2178      	movs	r1, #120	@ 0x78
 800213a:	203c      	movs	r0, #60	@ 0x3c
 800213c:	f7ff f8d1 	bl	80012e2 <lcd_DrawCircle>
        			lcd_DrawCircle(160, 120, YELLOW, 40, 1);
 8002140:	2301      	movs	r3, #1
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2328      	movs	r3, #40	@ 0x28
 8002146:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800214a:	2178      	movs	r1, #120	@ 0x78
 800214c:	20a0      	movs	r0, #160	@ 0xa0
 800214e:	f7ff f8c8 	bl	80012e2 <lcd_DrawCircle>
                    lcd_ShowIntNum(40, 105, RED_COUNTER, 2, WHITE, RED, 32);
 8002152:	4b38      	ldr	r3, [pc, #224]	@ (8002234 <TrafficLight_Update+0x498>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2302      	movs	r3, #2
 800216a:	2169      	movs	r1, #105	@ 0x69
 800216c:	2028      	movs	r0, #40	@ 0x28
 800216e:	f7fe fdd5 	bl	8000d1c <lcd_ShowIntNum>
                    lcd_ShowIntNum(140, 105, YELLOW_COUNTER, 2, WHITE, YELLOW, 32);
 8002172:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <TrafficLight_Update+0x4ac>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	2320      	movs	r3, #32
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2302      	movs	r3, #2
 800218a:	2169      	movs	r1, #105	@ 0x69
 800218c:	208c      	movs	r0, #140	@ 0x8c
 800218e:	f7fe fdc5 	bl	8000d1c <lcd_ShowIntNum>
                    if (stateCounter > YELLOW_DURATION) {
 8002192:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <TrafficLight_Update+0x4a0>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <TrafficLight_Update+0x4b0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	dd44      	ble.n	800222a <TrafficLight_Update+0x48e>
                        currentState = NS_GREEN_EW_RED;
 80021a0:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <TrafficLight_Update+0x4a8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
                        stateCounter = 1;
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <TrafficLight_Update+0x4a0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
                        GREEN_COUNTER = 1;
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <TrafficLight_Update+0x49c>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
                        RED_COUNTER = 1;
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <TrafficLight_Update+0x498>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]

						lcd_DrawCircle(60, 120, GREEN, 40, 1);
 80021b8:	2301      	movs	r3, #1
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2328      	movs	r3, #40	@ 0x28
 80021be:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80021c2:	2178      	movs	r1, #120	@ 0x78
 80021c4:	203c      	movs	r0, #60	@ 0x3c
 80021c6:	f7ff f88c 	bl	80012e2 <lcd_DrawCircle>
						lcd_DrawCircle(160, 120, RED, 40, 1);
 80021ca:	2301      	movs	r3, #1
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2328      	movs	r3, #40	@ 0x28
 80021d0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80021d4:	2178      	movs	r1, #120	@ 0x78
 80021d6:	20a0      	movs	r0, #160	@ 0xa0
 80021d8:	f7ff f883 	bl	80012e2 <lcd_DrawCircle>


                        lcd_ShowIntNum(40, 105, GREEN_COUNTER, 2, WHITE, GREEN, 32);
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <TrafficLight_Update+0x49c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2320      	movs	r3, #32
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2302      	movs	r3, #2
 80021f4:	2169      	movs	r1, #105	@ 0x69
 80021f6:	2028      	movs	r0, #40	@ 0x28
 80021f8:	f7fe fd90 	bl	8000d1c <lcd_ShowIntNum>
                        lcd_ShowIntNum(140, 105, RED_COUNTER, 2, WHITE, RED, 32);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <TrafficLight_Update+0x498>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	2320      	movs	r3, #32
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2302      	movs	r3, #2
 8002214:	2169      	movs	r1, #105	@ 0x69
 8002216:	208c      	movs	r0, #140	@ 0x8c
 8002218:	f7fe fd80 	bl	8000d1c <lcd_ShowIntNum>
                    }
                    break;
 800221c:	e005      	b.n	800222a <TrafficLight_Update+0x48e>
                    break;
 800221e:	bf00      	nop
 8002220:	e004      	b.n	800222c <TrafficLight_Update+0x490>
                    break;
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <TrafficLight_Update+0x490>
                    break;
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <TrafficLight_Update+0x490>
                    break;
 800222a:	bf00      	nop
    }
//    else if (counter_blink == 0){
//    	lcd_DrawCircle(60, 120, WHITE, 40, 1);
//    	lcd_DrawCircle(160, 120, WHITE, 40, 1);
//    }
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000003b 	.word	0x2000003b
 8002238:	20000039 	.word	0x20000039
 800223c:	20000038 	.word	0x20000038
 8002240:	2000002c 	.word	0x2000002c
 8002244:	2000016c 	.word	0x2000016c
 8002248:	2000003a 	.word	0x2000003a
 800224c:	20000030 	.word	0x20000030

08002250 <handleSwitchState>:

// Button handling functions
void handleSwitchState(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af04      	add	r7, sp, #16
    switch (systemState) {
 8002256:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <handleSwitchState+0x138>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	f200 8091 	bhi.w	8002382 <handleSwitchState+0x132>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <handleSwitchState+0x18>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	08002279 	.word	0x08002279
 800226c:	080022c9 	.word	0x080022c9
 8002270:	08002307 	.word	0x08002307
 8002274:	08002345 	.word	0x08002345
        case NORMAL:
            systemState = MODIFY_RED_LIGHT;
 8002278:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <handleSwitchState+0x138>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
            RED_DURATION =0;
 800227e:	4b43      	ldr	r3, [pc, #268]	@ (800238c <handleSwitchState+0x13c>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
            GREEN_DURATION=0;
 8002284:	4b42      	ldr	r3, [pc, #264]	@ (8002390 <handleSwitchState+0x140>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
            YELLOW_DURATION=0;
 800228a:	4b42      	ldr	r3, [pc, #264]	@ (8002394 <handleSwitchState+0x144>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
        	lcd_StrCenter(0, 2, "Modify state", RED, BLUE, 16, 1);
 8002290:	2301      	movs	r3, #1
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	2310      	movs	r3, #16
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	231f      	movs	r3, #31
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002398 <handleSwitchState+0x148>)
 80022a2:	2102      	movs	r1, #2
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff f8ed 	bl	8001484 <lcd_StrCenter>
        	lcd_ShowStr(20, 30, "MODIFY_RED_LIGHT", WHITE, RED, 24, 0);
 80022aa:	2300      	movs	r3, #0
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2318      	movs	r3, #24
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022bc:	4a37      	ldr	r2, [pc, #220]	@ (800239c <handleSwitchState+0x14c>)
 80022be:	211e      	movs	r1, #30
 80022c0:	2014      	movs	r0, #20
 80022c2:	f7ff f87b 	bl	80013bc <lcd_ShowStr>
            break;
 80022c6:	e05c      	b.n	8002382 <handleSwitchState+0x132>
        case MODIFY_RED_LIGHT:
            systemState = MODIFY_GREEN_LIGHT;
 80022c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <handleSwitchState+0x138>)
 80022ca:	2202      	movs	r2, #2
 80022cc:	701a      	strb	r2, [r3, #0]
        	lcd_StrCenter(0, 2, "Modify state", RED, BLUE, 16, 1);
 80022ce:	2301      	movs	r3, #1
 80022d0:	9302      	str	r3, [sp, #8]
 80022d2:	2310      	movs	r3, #16
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	231f      	movs	r3, #31
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022de:	4a2e      	ldr	r2, [pc, #184]	@ (8002398 <handleSwitchState+0x148>)
 80022e0:	2102      	movs	r1, #2
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f8ce 	bl	8001484 <lcd_StrCenter>
        	lcd_ShowStr(20, 30, "MODIFY_GREEN_LIGHT", WHITE, RED, 24, 0);
 80022e8:	2300      	movs	r3, #0
 80022ea:	9302      	str	r3, [sp, #8]
 80022ec:	2318      	movs	r3, #24
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022fa:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <handleSwitchState+0x150>)
 80022fc:	211e      	movs	r1, #30
 80022fe:	2014      	movs	r0, #20
 8002300:	f7ff f85c 	bl	80013bc <lcd_ShowStr>
            break;
 8002304:	e03d      	b.n	8002382 <handleSwitchState+0x132>
        case MODIFY_GREEN_LIGHT:
            systemState = MODIFY_YELLOW_LIGHT;
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <handleSwitchState+0x138>)
 8002308:	2203      	movs	r2, #3
 800230a:	701a      	strb	r2, [r3, #0]
        	lcd_StrCenter(0, 2, "Modify state", RED, BLUE, 16, 1);
 800230c:	2301      	movs	r3, #1
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2310      	movs	r3, #16
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	231f      	movs	r3, #31
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800231c:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <handleSwitchState+0x148>)
 800231e:	2102      	movs	r1, #2
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff f8af 	bl	8001484 <lcd_StrCenter>
        	lcd_ShowStr(20, 30, "MODIFY_YELLOW_LIGHT", WHITE, RED, 24, 0);
 8002326:	2300      	movs	r3, #0
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	2318      	movs	r3, #24
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002338:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <handleSwitchState+0x154>)
 800233a:	211e      	movs	r1, #30
 800233c:	2014      	movs	r0, #20
 800233e:	f7ff f83d 	bl	80013bc <lcd_ShowStr>
            break;
 8002342:	e01e      	b.n	8002382 <handleSwitchState+0x132>
        case MODIFY_YELLOW_LIGHT:
            systemState = NORMAL;
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <handleSwitchState+0x138>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
        	lcd_StrCenter(0, 2, "Normal state", RED, BLUE, 16, 1);
 800234a:	2301      	movs	r3, #1
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2310      	movs	r3, #16
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	231f      	movs	r3, #31
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800235a:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <handleSwitchState+0x158>)
 800235c:	2102      	movs	r1, #2
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff f890 	bl	8001484 <lcd_StrCenter>
        	lcd_ShowStr(20, 30, "Traffic light", WHITE, RED, 24, 0);
 8002364:	2300      	movs	r3, #0
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2318      	movs	r3, #24
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <handleSwitchState+0x15c>)
 8002378:	211e      	movs	r1, #30
 800237a:	2014      	movs	r0, #20
 800237c:	f7ff f81e 	bl	80013bc <lcd_ShowStr>
            break;
 8002380:	bf00      	nop
    }
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000c4 	.word	0x200000c4
 800238c:	20000034 	.word	0x20000034
 8002390:	2000002c 	.word	0x2000002c
 8002394:	20000030 	.word	0x20000030
 8002398:	08004b78 	.word	0x08004b78
 800239c:	08004b88 	.word	0x08004b88
 80023a0:	08004b9c 	.word	0x08004b9c
 80023a4:	08004bb0 	.word	0x08004bb0
 80023a8:	08004bc4 	.word	0x08004bc4
 80023ac:	08004bd4 	.word	0x08004bd4

080023b0 <handleIncreaseCounter>:

void handleIncreaseCounter(void) {
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
    switch (systemState) {
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <handleIncreaseCounter+0x4c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d012      	beq.n	80023e2 <handleIncreaseCounter+0x32>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	dc16      	bgt.n	80023ee <handleIncreaseCounter+0x3e>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d002      	beq.n	80023ca <handleIncreaseCounter+0x1a>
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d006      	beq.n	80023d6 <handleIncreaseCounter+0x26>
        case MODIFY_YELLOW_LIGHT:
            YELLOW_DURATION++;
//            lcd_ShowIntNum(140, 105, YELLOW_DURATION, 2, WHITE, YELLOW, 32);
            break;
        default:
            break;
 80023c8:	e011      	b.n	80023ee <handleIncreaseCounter+0x3e>
            RED_DURATION++;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <handleIncreaseCounter+0x50>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <handleIncreaseCounter+0x50>)
 80023d2:	6013      	str	r3, [r2, #0]
            break;
 80023d4:	e00c      	b.n	80023f0 <handleIncreaseCounter+0x40>
            GREEN_DURATION++;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <handleIncreaseCounter+0x54>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <handleIncreaseCounter+0x54>)
 80023de:	6013      	str	r3, [r2, #0]
            break;
 80023e0:	e006      	b.n	80023f0 <handleIncreaseCounter+0x40>
            YELLOW_DURATION++;
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <handleIncreaseCounter+0x58>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a07      	ldr	r2, [pc, #28]	@ (8002408 <handleIncreaseCounter+0x58>)
 80023ea:	6013      	str	r3, [r2, #0]
            break;
 80023ec:	e000      	b.n	80023f0 <handleIncreaseCounter+0x40>
            break;
 80023ee:	bf00      	nop
    }
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200000c4 	.word	0x200000c4
 8002400:	20000034 	.word	0x20000034
 8002404:	2000002c 	.word	0x2000002c
 8002408:	20000030 	.word	0x20000030

0800240c <handleConfirmValue>:

void handleConfirmValue(void) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af04      	add	r7, sp, #16
    // Confirm and save the new values, and return to NORMAL state
    systemState = NORMAL;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <handleConfirmValue+0x48>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	lcd_StrCenter(0, 2, "Normal state", RED, BLUE, 16, 1);
 8002418:	2301      	movs	r3, #1
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	2310      	movs	r3, #16
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	231f      	movs	r3, #31
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <handleConfirmValue+0x4c>)
 800242a:	2102      	movs	r1, #2
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff f829 	bl	8001484 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Traffic light", WHITE, RED, 24, 0);
 8002432:	2300      	movs	r3, #0
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	2318      	movs	r3, #24
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002444:	4a05      	ldr	r2, [pc, #20]	@ (800245c <handleConfirmValue+0x50>)
 8002446:	211e      	movs	r1, #30
 8002448:	2014      	movs	r0, #20
 800244a:	f7fe ffb7 	bl	80013bc <lcd_ShowStr>
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200000c4 	.word	0x200000c4
 8002458:	08004bc4 	.word	0x08004bc4
 800245c:	08004bd4 	.word	0x08004bd4

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002464:	480d      	ldr	r0, [pc, #52]	@ (800249c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002466:	490e      	ldr	r1, [pc, #56]	@ (80024a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002468:	4a0e      	ldr	r2, [pc, #56]	@ (80024a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0b      	ldr	r2, [pc, #44]	@ (80024a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800247c:	4c0b      	ldr	r4, [pc, #44]	@ (80024ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248a:	f7ff fb5b 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248e:	f002 fb33 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7ff f8c1 	bl	8001618 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80024a4:	0800bacc 	.word	0x0800bacc
  ldr r2, =_sbss
 80024a8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80024ac:	20000174 	.word	0x20000174

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <HAL_Init+0x40>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <HAL_Init+0x40>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_Init+0x40>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f94f 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	200f      	movs	r0, #15
 80024e4:	f000 f808 	bl	80024f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff faca 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_InitTick+0x54>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_InitTick+0x58>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f967 	bl	80027ea <HAL_SYSTICK_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e00e      	b.n	8002544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d80a      	bhi.n	8002542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f000 f92f 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002538:	4a06      	ldr	r2, [pc, #24]	@ (8002554 <HAL_InitTick+0x5c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000028 	.word	0x20000028
 8002550:	20000044 	.word	0x20000044
 8002554:	20000040 	.word	0x20000040

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000044 	.word	0x20000044
 800257c:	20000170 	.word	0x20000170

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000170 	.word	0x20000170

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffde 	bl	8002580 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000044 	.word	0x20000044

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e16b      	b.n	8002af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 815a 	bne.w	8002af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80b4 	beq.w	8002af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b60      	ldr	r3, [pc, #384]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a5f      	ldr	r2, [pc, #380]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_GPIO_Init+0x314>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_GPIO_Init+0x318>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a50      	ldr	r2, [pc, #320]	@ (8002b20 <HAL_GPIO_Init+0x31c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b24 <HAL_GPIO_Init+0x320>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x21a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_GPIO_Init+0x324>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x216>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_GPIO_Init+0x328>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x212>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b30 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x20e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	@ (8002b34 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x20a>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00e      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e00c      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e00a      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6e:	4a32      	ldr	r2, [pc, #200]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a98:	4a27      	ldr	r2, [pc, #156]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9e:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aec:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f ae90 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40021400 	.word	0x40021400
 8002b30:	40021800 	.word	0x40021800
 8002b34:	40021c00 	.word	0x40021c00
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	041a      	lsls	r2, r3, #16
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	400b      	ands	r3, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e267      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d075      	beq.n	8002cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc2:	4b88      	ldr	r3, [pc, #544]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d00c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b85      	ldr	r3, [pc, #532]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b82      	ldr	r3, [pc, #520]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05b      	beq.n	8002cac <HAL_RCC_OscConfig+0x108>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d157      	bne.n	8002cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e242      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x74>
 8002c0a:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a75      	ldr	r2, [pc, #468]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b70      	ldr	r3, [pc, #448]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6f      	ldr	r2, [pc, #444]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6c      	ldr	r2, [pc, #432]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	4b69      	ldr	r3, [pc, #420]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a68      	ldr	r2, [pc, #416]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fc90 	bl	8002580 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff fc8c 	bl	8002580 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e207      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b5b      	ldr	r3, [pc, #364]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fc7c 	bl	8002580 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff fc78 	bl	8002580 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1f3      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	4b51      	ldr	r3, [pc, #324]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0xe8>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	4b41      	ldr	r3, [pc, #260]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1c7      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4937      	ldr	r1, [pc, #220]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff fc31 	bl	8002580 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d22:	f7ff fc2d 	bl	8002580 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1a8      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4925      	ldr	r1, [pc, #148]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fc10 	bl	8002580 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d64:	f7ff fc0c 	bl	8002580 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e187      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d036      	beq.n	8002dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7ff fbf0 	bl	8002580 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da4:	f7ff fbec 	bl	8002580 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e167      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x200>
 8002dc2:	e01b      	b.n	8002dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7ff fbd9 	bl	8002580 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	e00e      	b.n	8002df0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fbd5 	bl	8002580 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d907      	bls.n	8002df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e150      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ea      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8097 	beq.w	8002f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b81      	ldr	r3, [pc, #516]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b74      	ldr	r3, [pc, #464]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a73      	ldr	r2, [pc, #460]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7ff fb95 	bl	8002580 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7ff fb91 	bl	8002580 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e10c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2ea>
 8002e80:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	4a63      	ldr	r2, [pc, #396]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x30c>
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a54      	ldr	r2, [pc, #336]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7ff fb56 	bl	8002580 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7ff fb52 	bl	8002580 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0cb      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ee      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7ff fb40 	bl	8002580 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7ff fb3c 	bl	8002580 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0b5      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ee      	bne.n	8002f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4a38      	ldr	r2, [pc, #224]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a1 	beq.w	8003084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d05c      	beq.n	8003008 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d141      	bne.n	8002fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b31      	ldr	r3, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff fb10 	bl	8002580 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff fb0c 	bl	8002580 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e087      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	491b      	ldr	r1, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fae5 	bl	8002580 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7ff fae1 	bl	8002580 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e05c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x416>
 8002fd8:	e054      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff face 	bl	8002580 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff faca 	bl	8002580 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e045      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
 8003006:	e03d      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e038      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d028      	beq.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d121      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11a      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cc      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b65      	ldr	r3, [pc, #404]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d119      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e067      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4934      	ldr	r1, [pc, #208]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7ff f9fc 	bl	8002580 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7ff f9f8 	bl	8002580 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d20c      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	@ (8003254 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f95c 	bl	80024f8 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	0800baac 	.word	0x0800baac
 8003258:	20000028 	.word	0x20000028
 800325c:	20000040 	.word	0x20000040

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b094      	sub	sp, #80	@ 0x50
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	647b      	str	r3, [r7, #68]	@ 0x44
 800326c:	2300      	movs	r3, #0
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003270:	2300      	movs	r3, #0
 8003272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b79      	ldr	r3, [pc, #484]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80e1 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e0db      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 8003296:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003298:	e0db      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b73      	ldr	r3, [pc, #460]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x208>)
 800329c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800329e:	e0d8      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032d2:	4622      	mov	r2, r4
 80032d4:	462b      	mov	r3, r5
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	0159      	lsls	r1, r3, #5
 80032e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e4:	0150      	lsls	r0, r2, #5
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4621      	mov	r1, r4
 80032ec:	1a51      	subs	r1, r2, r1
 80032ee:	6139      	str	r1, [r7, #16]
 80032f0:	4629      	mov	r1, r5
 80032f2:	eb63 0301 	sbc.w	r3, r3, r1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003304:	4659      	mov	r1, fp
 8003306:	018b      	lsls	r3, r1, #6
 8003308:	4651      	mov	r1, sl
 800330a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800330e:	4651      	mov	r1, sl
 8003310:	018a      	lsls	r2, r1, #6
 8003312:	4651      	mov	r1, sl
 8003314:	ebb2 0801 	subs.w	r8, r2, r1
 8003318:	4659      	mov	r1, fp
 800331a:	eb63 0901 	sbc.w	r9, r3, r1
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800332e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003332:	4690      	mov	r8, r2
 8003334:	4699      	mov	r9, r3
 8003336:	4623      	mov	r3, r4
 8003338:	eb18 0303 	adds.w	r3, r8, r3
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	462b      	mov	r3, r5
 8003340:	eb49 0303 	adc.w	r3, r9, r3
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003352:	4629      	mov	r1, r5
 8003354:	024b      	lsls	r3, r1, #9
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800335c:	4621      	mov	r1, r4
 800335e:	024a      	lsls	r2, r1, #9
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003366:	2200      	movs	r2, #0
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800336a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003370:	f7fc ff32 	bl	80001d8 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800337c:	e058      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	2200      	movs	r2, #0
 8003386:	4618      	mov	r0, r3
 8003388:	4611      	mov	r1, r2
 800338a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
 8003394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	f04f 0000 	mov.w	r0, #0
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	0159      	lsls	r1, r3, #5
 80033a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033aa:	0150      	lsls	r0, r2, #5
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4641      	mov	r1, r8
 80033b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033b6:	4649      	mov	r1, r9
 80033b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d0:	ebb2 040a 	subs.w	r4, r2, sl
 80033d4:	eb63 050b 	sbc.w	r5, r3, fp
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	00eb      	lsls	r3, r5, #3
 80033e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e6:	00e2      	lsls	r2, r4, #3
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	18e3      	adds	r3, r4, r3
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	464b      	mov	r3, r9
 80033f4:	eb45 0303 	adc.w	r3, r5, r3
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003406:	4629      	mov	r1, r5
 8003408:	028b      	lsls	r3, r1, #10
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003410:	4621      	mov	r1, r4
 8003412:	028a      	lsls	r2, r1, #10
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	61fa      	str	r2, [r7, #28]
 8003420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003424:	f7fc fed8 	bl	80001d8 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344a:	e002      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003454:	4618      	mov	r0, r3
 8003456:	3750      	adds	r7, #80	@ 0x50
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400
 8003468:	007a1200 	.word	0x007a1200

0800346c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07b      	b.n	8003576 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d009      	beq.n	80034a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	e005      	b.n	80034a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fa96 	bl	80019f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	f003 0104 	and.w	r1, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	f003 0210 	and.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003564:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b088      	sub	sp, #32
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_SPI_Transmit+0x22>
 800359c:	2302      	movs	r3, #2
 800359e:	e126      	b.n	80037ee <HAL_SPI_Transmit+0x270>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a8:	f7fe ffea 	bl	8002580 <HAL_GetTick>
 80035ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c2:	e10b      	b.n	80037dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0x52>
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d4:	e102      	b.n	80037dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361c:	d10f      	bne.n	800363e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800363c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003648:	2b40      	cmp	r3, #64	@ 0x40
 800364a:	d007      	beq.n	800365c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003664:	d14b      	bne.n	80036fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Transmit+0xf6>
 800366e:	8afb      	ldrh	r3, [r7, #22]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d13e      	bne.n	80036f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003698:	e02b      	b.n	80036f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d112      	bne.n	80036ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036cc:	e011      	b.n	80036f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ce:	f7fe ff57 	bl	8002580 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d803      	bhi.n	80036e6 <HAL_SPI_Transmit+0x168>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_Transmit+0x16e>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036f0:	e074      	b.n	80037dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ce      	bne.n	800369a <HAL_SPI_Transmit+0x11c>
 80036fc:	e04c      	b.n	8003798 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SPI_Transmit+0x18e>
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d140      	bne.n	800378e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003732:	e02c      	b.n	800378e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d113      	bne.n	800376a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003768:	e011      	b.n	800378e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800376a:	f7fe ff09 	bl	8002580 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d803      	bhi.n	8003782 <HAL_SPI_Transmit+0x204>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d102      	bne.n	8003788 <HAL_SPI_Transmit+0x20a>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800378c:	e026      	b.n	80037dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1cd      	bne.n	8003734 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	6839      	ldr	r1, [r7, #0]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fbcb 	bl	8003f38 <SPI_EndRxTxTransaction>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e000      	b.n	80037dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80037da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003812:	d112      	bne.n	800383a <HAL_SPI_Receive+0x44>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10e      	bne.n	800383a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2204      	movs	r2, #4
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8f1 	bl	8003a18 <HAL_SPI_TransmitReceive>
 8003836:	4603      	mov	r3, r0
 8003838:	e0ea      	b.n	8003a10 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_SPI_Receive+0x52>
 8003844:	2302      	movs	r3, #2
 8003846:	e0e3      	b.n	8003a10 <HAL_SPI_Receive+0x21a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003850:	f7fe fe96 	bl	8002580 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003866:	e0ca      	b.n	80039fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_Receive+0x7e>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003878:	e0c1      	b.n	80039fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2204      	movs	r2, #4
 800387e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c0:	d10f      	bne.n	80038e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d007      	beq.n	8003900 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d162      	bne.n	80039ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003908:	e02e      	b.n	8003968 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d115      	bne.n	8003944 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f103 020c 	add.w	r2, r3, #12
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003942:	e011      	b.n	8003968 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003944:	f7fe fe1c 	bl	8002580 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d803      	bhi.n	800395c <HAL_SPI_Receive+0x166>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d102      	bne.n	8003962 <HAL_SPI_Receive+0x16c>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003966:	e04a      	b.n	80039fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1cb      	bne.n	800390a <HAL_SPI_Receive+0x114>
 8003972:	e031      	b.n	80039d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d113      	bne.n	80039aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	b292      	uxth	r2, r2
 800398e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	1c9a      	adds	r2, r3, #2
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039a8:	e011      	b.n	80039ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039aa:	f7fe fde9 	bl	8002580 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d803      	bhi.n	80039c2 <HAL_SPI_Receive+0x1cc>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d102      	bne.n	80039c8 <HAL_SPI_Receive+0x1d2>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039cc:	e017      	b.n	80039fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1cd      	bne.n	8003974 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fa45 	bl	8003e6c <SPI_EndRxTransaction>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
 80039fa:	e000      	b.n	80039fe <HAL_SPI_Receive+0x208>
  }

error :
 80039fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	@ 0x30
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a26:	2301      	movs	r3, #1
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x26>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e18a      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x33c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a46:	f7fe fd9b 	bl	8002580 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d00f      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x70>
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a6e:	d107      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x68>
 8003a78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d003      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003a86:	e15b      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x82>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x82>
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003aa0:	e14e      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d003      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	887a      	ldrh	r2, [r7, #2]
 8003ade:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af6:	2b40      	cmp	r3, #64	@ 0x40
 8003af8:	d007      	beq.n	8003b0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b12:	d178      	bne.n	8003c06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x10a>
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d166      	bne.n	8003bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b46:	e053      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d11b      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x176>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d016      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x176>
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d113      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	1c9a      	adds	r2, r3, #2
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d119      	bne.n	8003bd0 <HAL_SPI_TransmitReceive+0x1b8>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd0:	f7fe fcd6 	bl	8002580 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d807      	bhi.n	8003bf0 <HAL_SPI_TransmitReceive+0x1d8>
 8003be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d003      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003bee:	e0a7      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1a6      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x130>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1a1      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x130>
 8003c04:	e07c      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x1fc>
 8003c0e:	8b7b      	ldrh	r3, [r7, #26]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d16b      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3a:	e057      	b.n	8003cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d11c      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x26c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d017      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x26c>
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d114      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d119      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x2ae>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d014      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc6:	f7fe fc5b 	bl	8002580 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d803      	bhi.n	8003cde <HAL_SPI_TransmitReceive+0x2c6>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x2cc>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003cea:	e029      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1a2      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x224>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d19d      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f917 	bl	8003f38 <SPI_EndRxTxTransaction>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003d1c:	e010      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	e000      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3730      	adds	r7, #48	@ 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d6c:	f7fe fc08 	bl	8002580 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d7c:	f7fe fc00 	bl	8002580 <HAL_GetTick>
 8003d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d82:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	0d1b      	lsrs	r3, r3, #20
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d92:	e054      	b.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d050      	beq.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9c:	f7fe fbf0 	bl	8002580 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d902      	bls.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d13d      	bne.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dca:	d111      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd4:	d004      	beq.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dde:	d107      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df8:	d10f      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e017      	b.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d19b      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000028 	.word	0x20000028

08003e6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e80:	d111      	bne.n	8003ea6 <SPI_EndRxTransaction+0x3a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e8a:	d004      	beq.n	8003e96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e94:	d107      	bne.n	8003ea6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eae:	d12a      	bne.n	8003f06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb8:	d012      	beq.n	8003ee0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff49 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02d      	beq.n	8003f2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e026      	b.n	8003f2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2101      	movs	r1, #1
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff36 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01a      	beq.n	8003f2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e013      	b.n	8003f2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2101      	movs	r1, #1
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff23 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e000      	b.n	8003f2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <SPI_EndRxTxTransaction+0x7c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <SPI_EndRxTxTransaction+0x80>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0d5b      	lsrs	r3, r3, #21
 8003f50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f62:	d112      	bne.n	8003f8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	@ 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fef4 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e00f      	b.n	8003faa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b80      	cmp	r3, #128	@ 0x80
 8003fa2:	d0f2      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x52>
 8003fa4:	e000      	b.n	8003fa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fa6:	bf00      	nop
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000028 	.word	0x20000028
 8003fb8:	165e9f81 	.word	0x165e9f81

08003fbc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e034      	b.n	800403c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7fc fbac 	bl	8000744 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 fca6 	bl	8004948 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	461a      	mov	r2, r3
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	f000 fcf0 	bl	80049ec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6858      	ldr	r0, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	f000 fd25 	bl	8004a68 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6892      	ldr	r2, [r2, #8]
 8004032:	f041 0101 	orr.w	r1, r1, #1
 8004036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e041      	b.n	80040da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fdc8 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 fa96 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e04e      	b.n	800419a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a23      	ldr	r2, [pc, #140]	@ (80041a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d01d      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_TIM_Base_Start_IT+0xc8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d111      	bne.n	8004188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d010      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	e007      	b.n	8004198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40010400 	.word	0x40010400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40001800 	.word	0x40001800

080041c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0202 	mvn.w	r2, #2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f9b5 	bl	8004576 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9a7 	bl	8004562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9b8 	bl	800458a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0204 	mvn.w	r2, #4
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f98b 	bl	8004576 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f97d 	bl	8004562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f98e 	bl	800458a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f961 	bl	8004576 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f953 	bl	8004562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f964 	bl	800458a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0210 	mvn.w	r2, #16
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2208      	movs	r2, #8
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f937 	bl	8004576 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f929 	bl	8004562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f93a 	bl	800458a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0201 	mvn.w	r2, #1
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd faf4 	bl	8001930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004352:	2b80      	cmp	r3, #128	@ 0x80
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	2b80      	cmp	r3, #128	@ 0x80
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fae0 	bl	8004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8ff 	bl	800459e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d107      	bne.n	80043cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0220 	mvn.w	r2, #32
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 faaa 	bl	8004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIM_ConfigClockSource+0x1c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0b4      	b.n	800455a <HAL_TIM_ConfigClockSource+0x186>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800440e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	d03e      	beq.n	80044a8 <HAL_TIM_ConfigClockSource+0xd4>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442e:	f200 8087 	bhi.w	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004436:	f000 8086 	beq.w	8004546 <HAL_TIM_ConfigClockSource+0x172>
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443e:	d87f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b70      	cmp	r3, #112	@ 0x70
 8004442:	d01a      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xa6>
 8004444:	2b70      	cmp	r3, #112	@ 0x70
 8004446:	d87b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b60      	cmp	r3, #96	@ 0x60
 800444a:	d050      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x11a>
 800444c:	2b60      	cmp	r3, #96	@ 0x60
 800444e:	d877      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b50      	cmp	r3, #80	@ 0x50
 8004452:	d03c      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xfa>
 8004454:	2b50      	cmp	r3, #80	@ 0x50
 8004456:	d873      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b40      	cmp	r3, #64	@ 0x40
 800445a:	d058      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x13a>
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d86f      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b30      	cmp	r3, #48	@ 0x30
 8004462:	d064      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	2b30      	cmp	r3, #48	@ 0x30
 8004466:	d86b      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d060      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d867      	bhi.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05c      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004474:	2b10      	cmp	r3, #16
 8004476:	d05a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	e062      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f000 f9ad 	bl	80047e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800449c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	609a      	str	r2, [r3, #8]
      break;
 80044a6:	e04f      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f000 f996 	bl	80047e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ca:	609a      	str	r2, [r3, #8]
      break;
 80044cc:	e03c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 f90a 	bl	80046f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2150      	movs	r1, #80	@ 0x50
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f963 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80044ec:	e02c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f929 	bl	8004752 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2160      	movs	r1, #96	@ 0x60
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f953 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800450c:	e01c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f8ea 	bl	80046f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2140      	movs	r1, #64	@ 0x40
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f943 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800452c:	e00c      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f000 f93a 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800453e:	e003      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      break;
 8004544:	e000      	b.n	8004548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a40      	ldr	r2, [pc, #256]	@ (80046c8 <TIM_Base_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3d      	ldr	r2, [pc, #244]	@ (80046cc <TIM_Base_SetConfig+0x118>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3c      	ldr	r2, [pc, #240]	@ (80046d0 <TIM_Base_SetConfig+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3b      	ldr	r2, [pc, #236]	@ (80046d4 <TIM_Base_SetConfig+0x120>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3a      	ldr	r2, [pc, #232]	@ (80046d8 <TIM_Base_SetConfig+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2f      	ldr	r2, [pc, #188]	@ (80046c8 <TIM_Base_SetConfig+0x114>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004614:	d027      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <TIM_Base_SetConfig+0x118>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d023      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2b      	ldr	r2, [pc, #172]	@ (80046d0 <TIM_Base_SetConfig+0x11c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <TIM_Base_SetConfig+0x120>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a29      	ldr	r2, [pc, #164]	@ (80046d8 <TIM_Base_SetConfig+0x124>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d017      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <TIM_Base_SetConfig+0x128>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <TIM_Base_SetConfig+0x12c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <TIM_Base_SetConfig+0x130>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a25      	ldr	r2, [pc, #148]	@ (80046e8 <TIM_Base_SetConfig+0x134>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <TIM_Base_SetConfig+0x138>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a23      	ldr	r2, [pc, #140]	@ (80046f0 <TIM_Base_SetConfig+0x13c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <TIM_Base_SetConfig+0x114>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0c      	ldr	r2, [pc, #48]	@ (80046d8 <TIM_Base_SetConfig+0x124>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800
 80046e8:	40001800 	.word	0x40001800
 80046ec:	40001c00 	.word	0x40001c00
 80046f0:	40002000 	.word	0x40002000

080046f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004752:	b480      	push	{r7}
 8004754:	b087      	sub	sp, #28
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800477c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800478e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 0307 	orr.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	021a      	lsls	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	e05a      	b.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a18      	ldr	r2, [pc, #96]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a15      	ldr	r2, [pc, #84]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10c      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40001800 	.word	0x40001800

08004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <FSMC_NORSRAM_Init+0xa0>)
 8004966:	4013      	ands	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004972:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004978:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800497e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004984:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800498a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004990:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004996:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800499c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80049a2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80049a8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80049ae:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80049b4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d103      	bne.n	80049cc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	fff00080 	.word	0xfff00080

080049ec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a0e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a1a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004a22:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004a2a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a34:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	3b02      	subs	r3, #2
 8004a3c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004a3e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a44:	4313      	orrs	r3, r2
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6979      	ldr	r1, [r7, #20]
 8004a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a80:	d122      	bne.n	8004ac8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a9e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004aa6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004aae:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004ab4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ac6:	e005      	b.n	8004ad4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	cff00000 	.word	0xcff00000

08004ae8 <memset>:
 8004ae8:	4402      	add	r2, r0
 8004aea:	4603      	mov	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d100      	bne.n	8004af2 <memset+0xa>
 8004af0:	4770      	bx	lr
 8004af2:	f803 1b01 	strb.w	r1, [r3], #1
 8004af6:	e7f9      	b.n	8004aec <memset+0x4>

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4d0d      	ldr	r5, [pc, #52]	@ (8004b30 <__libc_init_array+0x38>)
 8004afc:	4c0d      	ldr	r4, [pc, #52]	@ (8004b34 <__libc_init_array+0x3c>)
 8004afe:	1b64      	subs	r4, r4, r5
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	2600      	movs	r6, #0
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	4d0b      	ldr	r5, [pc, #44]	@ (8004b38 <__libc_init_array+0x40>)
 8004b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b3c <__libc_init_array+0x44>)
 8004b0c:	f000 f818 	bl	8004b40 <_init>
 8004b10:	1b64      	subs	r4, r4, r5
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	2600      	movs	r6, #0
 8004b16:	42a6      	cmp	r6, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b20:	4798      	blx	r3
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2a:	4798      	blx	r3
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	0800bac4 	.word	0x0800bac4
 8004b34:	0800bac4 	.word	0x0800bac4
 8004b38:	0800bac4 	.word	0x0800bac4
 8004b3c:	0800bac8 	.word	0x0800bac8

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
